WEBVTT

00:00:00.000 --> 00:00:07.040
歡迎收聽乾爹發狗糧時間

00:00:07.040 --> 00:00:08.880
Yeah

00:00:08.880 --> 00:00:12.800
今天的乾爹是台中最大醫療規模的中國醫藥大學

00:00:12.800 --> 00:00:15.200
他們的藥學系教授林文興教授

00:00:15.200 --> 00:00:18.160
同時也是益生菌臨床研究計畫的主持人

00:00:18.160 --> 00:00:21.680
他前陣子就有來跟我們分享益生菌的一些奧妙

00:00:21.680 --> 00:00:23.600
跟這個強盜的一些東西

00:00:23.600 --> 00:00:27.440
他們醫藥團隊所開發的CMU995益生菌

00:00:27.440 --> 00:00:29.520
獲得了很多的國際專利

00:00:29.520 --> 00:00:31.840
包含了抗幽門桿菌感染

00:00:31.840 --> 00:00:33.680
保肝排毒的專利

00:00:33.680 --> 00:00:35.600
還有一些抗過敏的專利等等

00:00:35.600 --> 00:00:36.800
相當厲害啊

00:00:36.800 --> 00:00:37.920
那上次節目過後啊

00:00:37.920 --> 00:00:39.360
不管是GF、SKY

00:00:39.360 --> 00:00:40.960
還有我們的Pox製作人

00:00:40.960 --> 00:00:42.640
其實也都有持續在購買

00:00:42.640 --> 00:00:44.800
他們所開發的這個益生菌系列

00:00:44.800 --> 00:00:46.800
所以今天林教授來當我們的乾爹

00:00:46.800 --> 00:00:50.080
我們就非常的樂意做這個產品的分享

00:00:50.080 --> 00:00:52.160
那如果沒有去聽上一集的朋友啊

00:00:52.160 --> 00:00:55.360
我們還是可以來科普一下益生菌對人體的重要性

00:00:55.360 --> 00:00:56.960
上次教授就有提到說

00:00:56.960 --> 00:00:59.360
其實萬病的支援就在強盜

00:00:59.360 --> 00:01:01.120
那我們強盜有非常多的細菌

00:01:01.120 --> 00:01:02.640
裡面有好的有不好的

00:01:02.640 --> 00:01:04.480
那當壞菌比較多的時候

00:01:04.480 --> 00:01:08.320
身體還有強盜就比較容易去產生全身的發炎反應

00:01:08.320 --> 00:01:10.480
那最嚴重就像癌症的發生嘛

00:01:10.480 --> 00:01:13.840
在台灣大腸癌就是國人發生率第一名的癌症

00:01:13.840 --> 00:01:15.440
那如果想要保持強盜健康

00:01:15.440 --> 00:01:19.840
其實就不外乎多喝水、多吃水果、多運動

00:01:19.840 --> 00:01:22.320
可是對於比較忙碌或者是做喜相

00:01:22.320 --> 00:01:24.480
就是習慣久坐的上班族來說

00:01:24.480 --> 00:01:27.200
就如果你要去多吃蔬菜水果啊

00:01:27.200 --> 00:01:28.880
或者是健康菜盒吃多了

00:01:28.880 --> 00:01:31.680
可能就是稍微的比較不方便

00:01:31.680 --> 00:01:34.400
那可能就會有像便祕、胃食道逆流

00:01:34.400 --> 00:01:36.320
脹氣、消化不良等等困擾

00:01:36.320 --> 00:01:38.720
這種時候你就可以去考慮補充益生菌

00:01:38.720 --> 00:01:40.880
為強盜去增添更多的好菌

00:01:40.880 --> 00:01:42.960
也幫助強盜打擊壞菌

00:01:42.960 --> 00:01:44.400
那這樣子也可以調整體質

00:01:44.400 --> 00:01:45.840
還有增加我們的免疫力

00:01:45.840 --> 00:01:47.040
教授之前有說過

00:01:47.040 --> 00:01:50.560
我們在家要判斷自己的強盜是不是健康

00:01:50.560 --> 00:01:52.320
他就會跟你講你有沒有大便啊

00:01:52.320 --> 00:01:54.320
形狀啊、頻率啊對不對

00:01:54.320 --> 00:01:57.920
你換菌很多你就放屁大便都會很臭啊

00:01:57.920 --> 00:01:59.120
容易便祕啊

00:01:59.120 --> 00:02:00.240
甚至會脹氣啊

00:02:00.240 --> 00:02:02.000
反正重點就是你壞菌太多啦

00:02:02.000 --> 00:02:03.120
所以你要補一些好菌

00:02:03.120 --> 00:02:04.640
那這個就是對你的這個

00:02:04.640 --> 00:02:06.720
強盜的健康非常有益就對了

00:02:06.720 --> 00:02:07.920
那益生菌它是活的

00:02:07.920 --> 00:02:09.040
雖然品種很多啊

00:02:09.040 --> 00:02:10.320
功效也都不一樣

00:02:10.320 --> 00:02:11.920
算是一種非常複雜

00:02:11.920 --> 00:02:13.840
專業性非常高的保健食品

00:02:13.840 --> 00:02:16.000
那這個CMU995它的益生菌

00:02:16.000 --> 00:02:17.360
最大的特色啊

00:02:17.360 --> 00:02:19.200
就是它的菌種是篩選自

00:02:19.200 --> 00:02:21.120
台灣健康的寶寶還有母乳

00:02:21.120 --> 00:02:22.880
又有多國的國際專利

00:02:22.880 --> 00:02:25.200
那經過人體臨床研究的證實

00:02:25.200 --> 00:02:27.840
它可以強烈吸附在強盜還有泌尿道

00:02:27.840 --> 00:02:29.840
也可以快速去打擊壞菌

00:02:29.840 --> 00:02:31.760
降低細菌還有病毒的感染

00:02:31.760 --> 00:02:34.560
也幫助去排除毒素啊抑制發炎

00:02:34.560 --> 00:02:37.200
那教授也有去開發其他抗過敏的菌種

00:02:37.200 --> 00:02:39.840
還有幫助入睡的像母乳益生菌

00:02:39.840 --> 00:02:40.880
那不同情況

00:02:40.880 --> 00:02:42.960
它就有不同的產品去搭配

00:02:42.960 --> 00:02:44.960
是 當然大家都知道我有在健身嘛

00:02:44.960 --> 00:02:46.880
所以其實我自己很少吃澱粉啦

00:02:46.880 --> 00:02:48.960
當然這個跟健身其實不一定有關係啦

00:02:48.960 --> 00:02:50.000
對

00:02:50.000 --> 00:02:51.680
健身不是就是吃蛋白這樣子嗎

00:02:51.680 --> 00:02:53.920
對 少吃澱粉是怕胖啊

00:02:53.920 --> 00:02:56.000
稍微有點容易胖

00:02:56.000 --> 00:02:58.560
你少吃飯你就會多吃肉嘛

00:02:58.560 --> 00:03:00.160
這個應該蠻明確的吧

00:03:00.160 --> 00:03:03.680
對 所以對這個腸道的傷害就比較大

00:03:03.680 --> 00:03:06.000
所以其實我蠻多人有買的啦

00:03:06.000 --> 00:03:07.680
反正我買了就是自己吃嘛

00:03:07.680 --> 00:03:09.440
那藍色包裝吃了一陣子

00:03:09.440 --> 00:03:11.840
就家人的症也是沒那麼臭啦

00:03:11.840 --> 00:03:15.200
對 那我自己本身腸胃應該算健康啦

00:03:15.200 --> 00:03:17.200
所以我就是幾天吃一包

00:03:17.200 --> 00:03:18.640
當作照顧腸道囉

00:03:18.640 --> 00:03:21.520
那當然我自己也是有買一些

00:03:21.520 --> 00:03:24.320
黃色的這個包裝的益生菌給我小孩子吃啦

00:03:24.320 --> 00:03:25.680
那是抗過敏的對不對

00:03:25.680 --> 00:03:27.200
對 因為我們家都有過敏啦

00:03:27.200 --> 00:03:28.720
對 那我想說就是

00:03:28.720 --> 00:03:30.560
買來給這個小孩子吃吃看

00:03:30.560 --> 00:03:33.280
不然他每天一直那邊打噴嚏很煩

00:03:33.280 --> 00:03:35.600
對 那他其實蠻挑食的啦

00:03:35.600 --> 00:03:37.200
就我的小孩蠻挑食的

00:03:37.200 --> 00:03:38.640
那他也經常便祕啦

00:03:38.640 --> 00:03:39.760
所以就蠻擔心的

00:03:39.760 --> 00:03:41.680
所以我們就買了一個來吃吃看啦

00:03:41.680 --> 00:03:43.200
那目前看起來還算

00:03:43.200 --> 00:03:44.560
欸 有點效果

00:03:44.560 --> 00:03:45.360
喔 真的喔

00:03:45.360 --> 00:03:46.240
效果像怎麼樣

00:03:46.240 --> 00:03:48.320
就是比較正常的大便

00:03:48.320 --> 00:03:49.120
喔 真的喔

00:03:49.120 --> 00:03:51.040
對 那當然我相信有其他因素啦

00:03:51.040 --> 00:03:52.320
那我們不能說這都是這個

00:03:52.320 --> 00:03:54.080
至少過敏調整比值

00:03:54.080 --> 00:03:55.200
就是還是可以觀察啦

00:03:55.200 --> 00:03:56.800
至少是往好的方向發展

00:03:56.800 --> 00:03:58.160
那乾爹也有說明說

00:03:58.160 --> 00:03:59.840
欸 這個益生菌畢竟不是藥物

00:03:59.840 --> 00:04:01.120
不可以馬上立即過敏

00:04:01.120 --> 00:04:03.920
那但是藥物本身是無法改變體質的嘛

00:04:03.920 --> 00:04:06.240
那益生菌就至少讓你體內的好菌變多

00:04:06.240 --> 00:04:09.360
那大約是需要三到六個月的時間去改善

00:04:09.360 --> 00:04:10.640
那至於口感的部分

00:04:10.640 --> 00:04:12.080
就是淡淡的甜味啦

00:04:12.080 --> 00:04:14.480
所以那個大人吃應該沒問題啦

00:04:14.480 --> 00:04:15.840
重點是小孩子好不好

00:04:15.840 --> 00:04:16.800
那你的小孩OK

00:04:16.800 --> 00:04:18.400
OK啊 他甜的都OK

00:04:18.400 --> 00:04:19.840
OK OK

00:04:19.840 --> 00:04:21.520
小孩子最喜歡吃甜的啦

00:04:21.520 --> 00:04:22.960
不過我覺得他們很專業的是

00:04:22.960 --> 00:04:25.520
這個益生菌的確就是要低溫配送啦

00:04:25.520 --> 00:04:26.800
那個太高溫他們會死掉

00:04:26.800 --> 00:04:28.320
所以你不要配溫開水餒

00:04:28.320 --> 00:04:30.720
記得要配冷開水喔

00:04:30.720 --> 00:04:32.240
就是冷水或常溫水

00:04:32.240 --> 00:04:34.720
那上次教授有提到

00:04:34.720 --> 00:04:36.080
在選擇益生菌的時候

00:04:36.080 --> 00:04:37.760
除了合適的菌種以外

00:04:37.760 --> 00:04:39.760
你這個含菌量的多寡

00:04:39.760 --> 00:04:41.120
這也是一個重要的因素

00:04:41.120 --> 00:04:44.560
所以他們每一包的含菌數高達650億

00:04:44.560 --> 00:04:46.080
其實大家可以去比較一下啦

00:04:46.080 --> 00:04:48.720
就是每一包650億的菌數

00:04:48.720 --> 00:04:50.640
其實這個濃度算是蠻高的

00:04:50.640 --> 00:04:51.760
那乾爹有跟我們說

00:04:51.760 --> 00:04:54.320
他們是絕對不添加任何的香料啊

00:04:54.320 --> 00:04:55.920
糖啊等等添加物

00:04:55.920 --> 00:04:58.080
所以他們的益生菌幼兒也可以放心吃

00:04:58.080 --> 00:04:59.360
都還算很安全

00:04:59.360 --> 00:05:02.000
那客人的回購率也都是高達90%以上

00:05:02.000 --> 00:05:04.880
代表說他的滿意度都還是相當不錯的

00:05:04.880 --> 00:05:06.240
最後還是有個小小建議

00:05:06.240 --> 00:05:07.680
因為益生菌就活的嘛

00:05:07.680 --> 00:05:10.320
他們對人體的功效就是因人而異的

00:05:10.320 --> 00:05:11.440
所以有任何的問題

00:05:11.440 --> 00:05:12.880
都可以撥打他們的電話

00:05:12.880 --> 00:05:15.440
0800-678-995

00:05:15.440 --> 00:05:17.520
或者是我們放在資訊欄的LINE官網

00:05:17.520 --> 00:05:20.160
你都可以去免費的資詢他們專業團隊

00:05:20.160 --> 00:05:22.400
最後再次感謝乾爹林教授

00:05:22.400 --> 00:05:24.000
幫我們保護我們的腸胃健康

00:05:24.000 --> 00:05:25.920
也讓我們吃多一點的牛肉乾

00:05:25.920 --> 00:05:27.920
耶 謝謝乾爹

00:05:27.920 --> 00:05:34.000
歡迎收聽財報狗Podcast

00:05:34.000 --> 00:05:35.040
我是主持人威宇

00:05:35.040 --> 00:05:37.040
在我旁邊的是財報狗投資者林家SKY

00:05:37.040 --> 00:05:38.320
哈囉大家好

00:05:38.320 --> 00:05:40.000
今天是達人聊產業的單元

00:05:40.000 --> 00:05:40.960
在這個單元裡

00:05:40.960 --> 00:05:42.800
我們會邀請在各個產業裡面的人

00:05:42.800 --> 00:05:44.320
跟我們分享這個產業的概況啊

00:05:44.320 --> 00:05:45.600
未來的趨勢

00:05:45.600 --> 00:05:46.480
之前有一集

00:05:46.480 --> 00:05:48.720
我們邀請到了台大的李宏義教授

00:05:48.720 --> 00:05:50.160
跟我們很深度的在聊一下

00:05:50.160 --> 00:05:52.160
雲端的大型語言模型

00:05:52.160 --> 00:05:54.000
這些東西都是在雲端嘛

00:05:54.000 --> 00:05:56.000
今天我們要來聊一下是Edge端

00:05:56.000 --> 00:05:56.960
這邊的技術

00:05:56.960 --> 00:05:57.920
今天邀請到來賓

00:05:57.920 --> 00:06:00.000
他們最近推出了AI加速器

00:06:00.000 --> 00:06:01.760
幫助Edge端的推進

00:06:01.760 --> 00:06:03.680
我們就是在Facebook上面看到了Poll文

00:06:03.680 --> 00:06:04.960
我忘記是看到誰分享

00:06:04.960 --> 00:06:06.560
我就說 欸 等一下

00:06:06.560 --> 00:06:08.000
所以已經有這個東西了嗎

00:06:08.000 --> 00:06:10.240
就是Edge端相關的晶片技術

00:06:10.240 --> 00:06:11.200
然後我覺得很有趣

00:06:11.200 --> 00:06:12.880
我就想說邀請他來上節目

00:06:12.880 --> 00:06:14.240
跟我們好好聊一聊

00:06:14.240 --> 00:06:15.440
今天我們邀請到的

00:06:15.440 --> 00:06:17.440
是英業大的資深副總經理

00:06:17.440 --> 00:06:19.040
及數位長陳文威超先生

00:06:19.040 --> 00:06:20.400
大家好 主持人好

00:06:20.400 --> 00:06:21.440
各位聽眾好

00:06:21.440 --> 00:06:23.200
我們稍微看了一下你的那個經歷

00:06:23.200 --> 00:06:24.720
一開始我只是看到那個貼文

00:06:24.720 --> 00:06:25.920
然後我就想說 欸 這很有趣

00:06:25.920 --> 00:06:27.920
我想要就看有沒有機會聊一下

00:06:27.920 --> 00:06:29.120
然後看一下你的經歷發現說

00:06:29.120 --> 00:06:31.680
哇 你做的事情超級多的

00:06:31.680 --> 00:06:32.960
對

00:06:32.960 --> 00:06:35.360
這個感覺你現在

00:06:35.360 --> 00:06:37.360
主要的工作大概是像什麼樣子

00:06:37.360 --> 00:06:38.640
就是有可能有些聽眾還不熟悉

00:06:38.640 --> 00:06:40.400
可以請你先稍微介紹一下嗎

00:06:40.400 --> 00:06:41.680
好 我覺得步入中年

00:06:41.680 --> 00:06:44.240
你做的事情就累積的越來越多啦

00:06:44.240 --> 00:06:46.400
所以我覺得也還好啦 沒什麼

00:06:46.400 --> 00:06:48.960
那我現在是英業大的數位長

00:06:48.960 --> 00:06:50.800
那我管理有兩個中心

00:06:50.800 --> 00:06:52.480
算是我幫忙創辦的

00:06:52.480 --> 00:06:53.760
一個是AI中心

00:06:53.760 --> 00:06:55.520
大概2018年成立的

00:06:55.520 --> 00:06:57.040
然後再來就一個數位中心

00:06:57.040 --> 00:06:59.280
大概是2020年成立的

00:06:59.280 --> 00:07:01.760
那這兩個中心主要就是做

00:07:01.760 --> 00:07:03.440
集團AI的技術

00:07:03.440 --> 00:07:05.040
那還有那個數位轉型

00:07:05.040 --> 00:07:07.120
這方面的一些工作

00:07:07.120 --> 00:07:09.280
那除此之外我還有

00:07:09.280 --> 00:07:11.040
自己有一個新創公司

00:07:11.040 --> 00:07:12.960
叫新品Skywatch

00:07:12.960 --> 00:07:14.880
那那個當初跟英業達結緣

00:07:14.880 --> 00:07:16.480
也是這個Skywatch

00:07:16.480 --> 00:07:19.760
跟那個英業達有一個投資的關係

00:07:19.760 --> 00:07:21.520
那後來我們因為本來就有

00:07:21.520 --> 00:07:23.200
這個雲端AI的技術

00:07:23.200 --> 00:07:25.360
那我們再來一起協助

00:07:25.360 --> 00:07:27.600
這個方面的開發

00:07:27.600 --> 00:07:29.760
那最後就是我還有一個

00:07:29.760 --> 00:07:31.360
客座教授的身份

00:07:31.360 --> 00:07:33.760
在台大職工

00:07:33.760 --> 00:07:36.000
那我覺得這些工作

00:07:36.000 --> 00:07:37.520
合在一起是同一個

00:07:37.520 --> 00:07:38.640
對不對 我覺得就是說

00:07:38.640 --> 00:07:40.080
有時候大家會說

00:07:40.080 --> 00:07:42.160
你是不是有三個工作

00:07:42.160 --> 00:07:43.360
其實這三個工作

00:07:43.360 --> 00:07:44.800
如果它是衝突的

00:07:44.800 --> 00:07:46.240
我覺得它就是三個工作

00:07:46.240 --> 00:07:47.520
如果它是同步的

00:07:47.520 --> 00:07:49.360
我覺得就是人家說有一個人

00:07:49.360 --> 00:07:50.800
戴好幾個帽子

00:07:50.800 --> 00:07:51.760
我覺得這一個帽子

00:07:51.760 --> 00:07:53.760
可能顏色比較多了一點

00:07:53.760 --> 00:07:54.560
大概是這樣而已

00:07:54.560 --> 00:07:55.520
了解了解

00:07:55.520 --> 00:07:56.240
你剛有提到說

00:07:56.240 --> 00:07:59.040
你在英業達有兩個中心

00:07:59.040 --> 00:08:00.400
AI中心跟數位中心

00:08:00.400 --> 00:08:00.880
對

00:08:00.880 --> 00:08:02.160
可以稍微解釋一下說

00:08:02.160 --> 00:08:03.360
這兩個中心他們的

00:08:03.360 --> 00:08:04.640
主要任務是什麼

00:08:04.640 --> 00:08:06.400
其實AI這邊就是比較

00:08:06.400 --> 00:08:08.000
是技術性的事情

00:08:08.000 --> 00:08:09.520
那數位這邊就是比較是

00:08:09.520 --> 00:08:11.120
跟集團合作

00:08:11.120 --> 00:08:12.880
還有這個我們叫做

00:08:12.880 --> 00:08:13.680
數位轉型

00:08:13.680 --> 00:08:16.400
關於比較資料方面的一些事情

00:08:16.400 --> 00:08:18.080
那我想AI就需要資料

00:08:18.080 --> 00:08:19.280
那所以這兩個中心

00:08:19.280 --> 00:08:21.120
有點互補的在執行

00:08:21.120 --> 00:08:23.680
那其實常常大家就也一起合作

00:08:23.680 --> 00:08:24.960
所以我覺得

00:08:24.960 --> 00:08:27.040
這邊的界線並沒有很清楚

00:08:27.040 --> 00:08:28.400
其實這個東西我滿好奇

00:08:28.400 --> 00:08:30.160
大家在講所謂的數位轉型

00:08:30.160 --> 00:08:30.560
對

00:08:30.560 --> 00:08:32.240
就是這個東西到底在幹嘛

00:08:32.240 --> 00:08:34.480
然後你覺得主要的瓶頸在哪裡

00:08:34.480 --> 00:08:35.440
就是before after

00:08:35.440 --> 00:08:36.640
到底是什麼東西

00:08:36.640 --> 00:08:38.000
對 這有趣的事情

00:08:38.000 --> 00:08:39.680
這樣子我們就這麼講

00:08:39.680 --> 00:08:41.840
其實沖向的名詞很多人講

00:08:41.840 --> 00:08:43.280
那實際上落地

00:08:43.280 --> 00:08:45.360
可能有人搞不大清楚在做什麼

00:08:45.360 --> 00:08:47.200
那我覺得是這樣

00:08:47.200 --> 00:08:49.040
我一開始也不知道他在幹什麼

00:08:49.040 --> 00:08:49.920
那很好的

00:08:49.920 --> 00:08:51.200
那它是一個framework

00:08:51.200 --> 00:08:52.560
所以基本上做什麼

00:08:52.560 --> 00:08:53.280
例如說

00:08:53.280 --> 00:08:54.880
我覺得公司要做數位轉型

00:08:54.880 --> 00:08:56.720
跟公司要做AI

00:08:56.720 --> 00:08:58.160
跟例如說公司要漲營收

00:08:58.160 --> 00:09:00.560
我覺得這些東西都是抽象的事情

00:09:00.560 --> 00:09:01.920
那你做一個可能

00:09:01.920 --> 00:09:03.360
所謂高階主管好了

00:09:03.360 --> 00:09:04.240
你要做的事情

00:09:04.240 --> 00:09:06.800
就是要把抽象的事情實體化

00:09:06.800 --> 00:09:08.480
對 那我們在做數位轉型

00:09:08.480 --> 00:09:09.840
最重要的事情就是

00:09:09.840 --> 00:09:11.840
我們要把這些資料資料規格

00:09:11.840 --> 00:09:14.960
我們叫資料治理這種事情把它做好

00:09:14.960 --> 00:09:16.160
我簡單來講

00:09:16.160 --> 00:09:19.840
例如說今天我們的公司的營收是

00:09:19.840 --> 00:09:21.680
假設100萬美金好了

00:09:21.680 --> 00:09:22.800
那你就把它轉成

00:09:22.800 --> 00:09:25.360
例如說3000萬台幣

00:09:25.360 --> 00:09:26.640
3000萬多一點

00:09:26.640 --> 00:09:27.520
對不對

00:09:27.520 --> 00:09:29.840
但是你可能轉換那個美金

00:09:29.840 --> 00:09:31.680
跟台幣的方法不同

00:09:31.680 --> 00:09:34.000
有的是當日的匯率

00:09:34.000 --> 00:09:36.480
有的是可能你跟我學出來最好的匯率

00:09:36.480 --> 00:09:37.920
有的是三旬

00:09:37.920 --> 00:09:39.360
那所以光是這個

00:09:39.360 --> 00:09:41.840
錢這件事情其實就要定義清楚

00:09:41.840 --> 00:09:44.000
美金跟台幣怎麼轉

00:09:44.000 --> 00:09:46.080
所以這只是一個大家可以理解

00:09:46.080 --> 00:09:47.120
很簡單的例子

00:09:47.120 --> 00:09:49.360
但這件事情就沒有很簡單

00:09:49.360 --> 00:09:50.560
所以我們在講

00:09:50.560 --> 00:09:53.440
如果我要做AI的話我需要資料

00:09:53.440 --> 00:09:55.840
但是資料如果是亂七八糟的

00:09:55.840 --> 00:09:58.080
它沒有一個清楚定義的時候

00:09:58.080 --> 00:09:59.280
你不能信任它的時候

00:09:59.280 --> 00:10:02.800
它做出來AI就不大能夠被信任

00:10:02.800 --> 00:10:04.080
所以我們從比較

00:10:04.080 --> 00:10:05.520
不要講商業目的來講

00:10:05.520 --> 00:10:07.680
我們講收集資料的話

00:10:07.680 --> 00:10:09.440
我覺得最重要的就是

00:10:09.440 --> 00:10:11.440
這個資料定義的事情

00:10:11.440 --> 00:10:13.840
所以這是所謂數位轉型在做的就是說

00:10:13.840 --> 00:10:15.280
我們到底需要哪些資料

00:10:15.280 --> 00:10:17.040
這些資料應該要長什麼樣子

00:10:17.040 --> 00:10:18.000
被保存在哪裡

00:10:18.000 --> 00:10:19.600
整個Pipeline應該長什麼樣子

00:10:19.600 --> 00:10:20.320
對啊

00:10:20.320 --> 00:10:21.760
有人說這個叫做

00:10:21.760 --> 00:10:23.280
那個資料下水道

00:10:23.280 --> 00:10:26.080
就是做了沒有什麼功勞的感覺

00:10:26.080 --> 00:10:27.440
很多人會覺得你很煩

00:10:27.440 --> 00:10:28.800
就是大家那個

00:10:28.800 --> 00:10:30.880
整天要資料也不知道做什麼

00:10:30.880 --> 00:10:32.880
所以我們一定要有個目的性

00:10:32.880 --> 00:10:36.080
就是把應用跟資料接在一起

00:10:36.080 --> 00:10:37.520
不要把那個下水道

00:10:37.520 --> 00:10:39.120
接到沒有人住的地方

00:10:39.120 --> 00:10:41.680
我想這是一個很清楚的一個命令

00:10:41.680 --> 00:10:44.560
不能說就是為了收資料而資料

00:10:44.560 --> 00:10:46.800
那像這種AI中心

00:10:46.800 --> 00:10:49.920
因為AI的確也是你們產品的一部分

00:10:49.920 --> 00:10:52.000
所以我很好奇說所謂的AI中心

00:10:52.000 --> 00:10:55.040
你們是在做產品上面的開發

00:10:55.040 --> 00:10:57.760
還是在做像內部效率的改善

00:10:57.760 --> 00:11:00.080
我覺得這個東西比較有彈性

00:11:00.080 --> 00:11:03.280
並不一定是一個一或二的事情

00:11:03.280 --> 00:11:04.880
那我覺得我們這邊算是

00:11:04.880 --> 00:11:06.880
簡單來說叫做功能性組織

00:11:06.880 --> 00:11:07.680
對不對

00:11:07.680 --> 00:11:09.680
那那個一般的

00:11:09.680 --> 00:11:11.680
例如說像Apple這種產品公司

00:11:11.680 --> 00:11:14.480
它就是幾乎都是功能性組織

00:11:14.480 --> 00:11:16.400
你有這個軟體部門

00:11:16.400 --> 00:11:18.480
你有做這個Product Design

00:11:18.480 --> 00:11:20.160
你有做這些Technology

00:11:20.160 --> 00:11:22.480
你有做那種做Business

00:11:22.480 --> 00:11:24.480
那我們如果說回到這種

00:11:24.480 --> 00:11:27.680
我們比較是商業性的公司

00:11:27.680 --> 00:11:31.360
它有時候可能就會以這個業務導向

00:11:31.360 --> 00:11:33.520
弄成不同的叫BU

00:11:33.520 --> 00:11:35.360
那所以台灣很多公司

00:11:35.360 --> 00:11:37.360
你就聽到有BGI BU這樣子

00:11:37.360 --> 00:11:40.960
那所以我們這邊公司當然就有這種事業處

00:11:40.960 --> 00:11:44.080
那我們也有這種跟事業比較獨立的部門

00:11:44.080 --> 00:11:46.320
像我們這個就是功能性組織

00:11:46.320 --> 00:11:48.560
所以你們這邊就是有點像是說

00:11:48.560 --> 00:11:49.920
哪邊會需要你們協助

00:11:49.920 --> 00:11:51.360
你們就會去協助這樣子嗎

00:11:51.360 --> 00:11:52.720
基本上是這樣子

00:11:52.720 --> 00:11:54.480
對 所以這個就是例如說

00:11:54.480 --> 00:11:58.400
我想有時候你有不同的事業體

00:11:58.400 --> 00:12:01.680
那每個事業體可能都做一點點AI

00:12:01.680 --> 00:12:04.240
那它好不好維持

00:12:04.240 --> 00:12:05.680
那它會不會有時候

00:12:05.680 --> 00:12:07.840
那個事業體的這個部門很忙

00:12:07.840 --> 00:12:09.360
那另外一個事業體很閒

00:12:09.360 --> 00:12:11.360
也有這種可能性

00:12:11.360 --> 00:12:13.920
所以如果把這些相關的人放在一起

00:12:13.920 --> 00:12:15.280
這種功能性組織

00:12:15.280 --> 00:12:17.920
它有時候可以發揮不錯的綜效

00:12:17.920 --> 00:12:19.360
大家也可以互相學習

00:12:19.360 --> 00:12:22.400
像現在這個AI中心大概多少人

00:12:22.400 --> 00:12:24.480
我們的AI數位大概是40幾個吧

00:12:24.480 --> 00:12:25.680
我好像覺得是蠻多的

00:12:25.680 --> 00:12:26.800
不多不少

00:12:26.800 --> 00:12:29.600
就算大

00:12:29.600 --> 00:12:31.040
對 那我想是這樣子

00:12:31.040 --> 00:12:33.280
看裡面的人的組成啦

00:12:33.280 --> 00:12:34.560
在某種角度是多

00:12:34.560 --> 00:12:36.560
在某種角度又是少

00:12:36.560 --> 00:12:37.840
例如說我們前幾天在辦一個

00:12:37.840 --> 00:12:39.680
內部的AI day的活動

00:12:39.680 --> 00:12:43.120
那就把過去兩年做的題目整理一下

00:12:43.120 --> 00:12:45.680
大概就將近20個題目

00:12:45.680 --> 00:12:48.160
那所以其實以這個人的量

00:12:48.160 --> 00:12:51.920
他產生的那個專利跟那個論文

00:12:51.920 --> 00:12:53.040
跟這些專案

00:12:53.040 --> 00:12:54.400
其實量體是不小

00:12:54.400 --> 00:12:55.360
對

00:12:55.360 --> 00:12:58.000
因為你在主要一開始的任務

00:12:58.000 --> 00:12:59.840
其實是在做發明研究

00:12:59.840 --> 00:13:00.640
是

00:13:00.640 --> 00:13:02.880
那我們定義發明研究就是

00:13:02.880 --> 00:13:04.320
各位讀過書就知道

00:13:04.320 --> 00:13:05.680
就是不是寫論文

00:13:05.680 --> 00:13:06.560
就是寫專利嘛

00:13:06.560 --> 00:13:08.960
開發系統

00:13:08.960 --> 00:13:11.440
那當然開發系統之後

00:13:11.440 --> 00:13:13.680
就會有這些不同的應用出來

00:13:13.680 --> 00:13:15.280
但是如果說做研究的話

00:13:15.280 --> 00:13:16.960
就是這個角度出發

00:13:16.960 --> 00:13:18.640
那所以以這樣子來說

00:13:18.640 --> 00:13:20.720
我們以研究為出發

00:13:20.720 --> 00:13:23.360
然後開始再往各個不同的

00:13:23.360 --> 00:13:25.760
那個應用去開發或deploy

00:13:25.760 --> 00:13:27.840
覺得這個目前算是有一個

00:13:27.840 --> 00:13:28.960
逐步的成果啦

00:13:28.960 --> 00:13:30.400
對

00:13:30.400 --> 00:13:31.840
像剛剛這樣聽起來

00:13:31.840 --> 00:13:34.240
在做研究這邊就比較偏向於說

00:13:34.240 --> 00:13:36.160
各種產品上的專利嗎

00:13:36.160 --> 00:13:36.640
是嗎

00:13:36.640 --> 00:13:38.560
就是你們會協助比方說

00:13:38.560 --> 00:13:42.320
像最近很多AI什麼在協助做人資啊

00:13:42.320 --> 00:13:44.800
面試啊 履歷啊 薪水管理啊

00:13:44.800 --> 00:13:46.640
或者是各種什麼會議紀錄啊

00:13:46.640 --> 00:13:48.160
你們會去做這個東西嗎

00:13:48.160 --> 00:13:50.400
有啊 其實我不知道誰先開始啦

00:13:50.400 --> 00:13:53.440
但是三四年前我有給的talk就有講

00:13:53.440 --> 00:13:55.360
我們有一些AI可以預測

00:13:55.360 --> 00:13:56.880
誰什麼時候會離職啊

00:13:56.880 --> 00:13:58.000
對

00:13:58.000 --> 00:14:00.400
那那個這個AI蠻好玩的

00:14:00.400 --> 00:14:03.760
過一陣子我也聽到各種不同的公司在講這件事情

00:14:03.760 --> 00:14:05.600
所以我就不講說是誰先開始的

00:14:05.600 --> 00:14:08.400
那正好大家都做類似的事情

00:14:08.400 --> 00:14:11.360
那那個我覺得這些東西都可做啦

00:14:11.360 --> 00:14:13.360
那我們做研究

00:14:13.360 --> 00:14:16.880
其實就是做這些關鍵發明嘛

00:14:16.880 --> 00:14:18.720
那它真的拿去應用

00:14:18.720 --> 00:14:20.880
不一定是跟這些研究有關係啦

00:14:20.880 --> 00:14:22.240
有時候是例如說

00:14:22.240 --> 00:14:24.240
研究可以拿去做一些應用

00:14:24.240 --> 00:14:26.880
有時候應用會需求一些清楚的研究

00:14:26.880 --> 00:14:28.240
所以這個有點像

00:14:28.240 --> 00:14:29.440
不一定是機身代理

00:14:29.440 --> 00:14:31.280
不一定是單身機

00:14:31.280 --> 00:14:33.520
NVIDIA一開始它是在做代工嘛

00:14:33.520 --> 00:14:35.120
筆電啊 伺服器啊

00:14:35.120 --> 00:14:36.640
這種智慧裝置的代工

00:14:36.640 --> 00:14:37.360
也算是

00:14:37.360 --> 00:14:40.400
對 就是是怎麼樣的一個機緣會開始說

00:14:40.400 --> 00:14:43.120
那我們要來投入AI上面的研究

00:14:43.120 --> 00:14:46.000
因為它已經更偏向於某種的設計啊

00:14:46.000 --> 00:14:48.000
或者是你說的這種系統架構啊

00:14:48.000 --> 00:14:48.880
這種東西

00:14:48.880 --> 00:14:50.880
對 所以這個問題其實很好

00:14:50.880 --> 00:14:52.720
就是說大家說代工

00:14:52.720 --> 00:14:55.920
那因為它的很大的營收看起來是代工

00:14:55.920 --> 00:14:58.320
但是人家為什麼要讓你代工嘛

00:14:58.320 --> 00:14:59.760
一定不是說

00:14:59.760 --> 00:15:01.280
例如說勞工便宜啊

00:15:01.280 --> 00:15:03.760
我們在台灣或者在我們不同的地方

00:15:03.760 --> 00:15:06.160
不一定我們可以取得最便宜的勞工嘛

00:15:06.160 --> 00:15:07.920
品質最好也不一定

00:15:07.920 --> 00:15:08.400
對不對

00:15:08.400 --> 00:15:10.400
這些當然都是生產要素啦

00:15:10.400 --> 00:15:11.600
對不對

00:15:11.600 --> 00:15:14.080
但是生產要素裡面還有一些就是

00:15:14.080 --> 00:15:16.320
根據設計驅動

00:15:16.320 --> 00:15:17.040
對不對

00:15:17.040 --> 00:15:19.840
造成你最有效率的一個產品

00:15:19.840 --> 00:15:20.400
對不對

00:15:20.400 --> 00:15:22.880
所以那個代工生產這件事情

00:15:22.880 --> 00:15:27.040
很多我們其實是跟我們客戶一起去研究出來的

00:15:27.040 --> 00:15:28.640
那研究出來之後

00:15:28.640 --> 00:15:31.680
那我覺得可能某種程度來說就是

00:15:31.680 --> 00:15:33.440
客戶想要跟你合作

00:15:33.440 --> 00:15:36.480
大概也不希望你太綁死他

00:15:36.480 --> 00:15:39.280
所以有時候我們就會交換一些我們的設計

00:15:39.280 --> 00:15:41.280
那他可能也需要把這個設計

00:15:41.280 --> 00:15:43.200
也可以交給其他工廠做

00:15:43.200 --> 00:15:46.560
但是一開始他可能就會有跟我們有一些

00:15:46.560 --> 00:15:48.640
agreement說那這是你設計的

00:15:48.640 --> 00:15:50.400
那我們先在你這邊生產

00:15:50.880 --> 00:15:53.040
所以它不是一個純粹代工行為

00:15:53.040 --> 00:15:54.400
代工行為的話

00:15:54.400 --> 00:15:56.480
價值通常做不大上去

00:15:56.480 --> 00:15:59.600
現在的這種我們講的代工廠

00:15:59.600 --> 00:16:00.480
都會像這個樣子嗎

00:16:00.480 --> 00:16:01.680
就是其實自己都有技術

00:16:01.680 --> 00:16:02.880
他們是ODM

00:16:02.880 --> 00:16:04.640
對 我們也很講ODM

00:16:04.640 --> 00:16:06.480
那但是我覺得這個有的時候

00:16:06.480 --> 00:16:08.160
代工有的ODM有的品牌

00:16:08.160 --> 00:16:10.240
我覺得大概大家都在做產品

00:16:10.240 --> 00:16:12.640
那只是大家的貢獻狀況不一樣

00:16:12.640 --> 00:16:14.800
你如果說代工的話

00:16:14.800 --> 00:16:17.760
比較會專注在那個生產效率

00:16:17.760 --> 00:16:20.000
而不是在設計的有效性

00:16:20.000 --> 00:16:21.200
對 -了解了解

00:16:21.200 --> 00:16:22.720
就是今年AI server

00:16:22.720 --> 00:16:24.320
一直是一個很大的一個主題

00:16:24.320 --> 00:16:25.760
大家都在講這個

00:16:25.760 --> 00:16:26.560
是啊是啊

00:16:26.560 --> 00:16:28.720
我們節目講了好幾集的AI server

00:16:28.720 --> 00:16:29.920
可是我覺得你們現在

00:16:29.920 --> 00:16:31.600
就我們這些看到的東西特別一個

00:16:31.600 --> 00:16:32.480
我覺得有缺點

00:16:32.480 --> 00:16:34.160
就是在edge端

00:16:34.160 --> 00:16:35.200
對 所以我也蠻好奇

00:16:35.200 --> 00:16:36.240
就是先講這個好了

00:16:36.240 --> 00:16:38.800
就是在伺服器端跟edge端這兩塊

00:16:38.800 --> 00:16:40.240
你目前是怎麼看

00:16:40.240 --> 00:16:41.280
不管是現在的狀態

00:16:41.280 --> 00:16:42.480
或者是未來的發展

00:16:42.480 --> 00:16:45.520
其實我覺得我們小時候有那個什麼

00:16:45.520 --> 00:16:47.200
client server

00:16:47.200 --> 00:16:49.600
然後又叫分散式處理

00:16:49.600 --> 00:16:51.840
然後還有雲端啊什麼的

00:16:51.840 --> 00:16:53.280
其實我覺得有趣啦

00:16:53.280 --> 00:16:55.200
這個你有不同的技術

00:16:55.200 --> 00:16:57.520
那到最後有一個時間點可以放到哪裡

00:16:57.520 --> 00:17:00.720
那個技術就會造成這種移動啦

00:17:00.720 --> 00:17:02.160
那以前我們有一個老師

00:17:02.160 --> 00:17:04.800
就是這個叫做再生轉世

00:17:04.800 --> 00:17:06.800
wheel of reincarnation

00:17:06.800 --> 00:17:07.840
就一樣的技術

00:17:07.840 --> 00:17:10.400
可能過一陣子會再繞出來繞出來

00:17:10.400 --> 00:17:12.240
client server過一陣子就純雲端

00:17:12.240 --> 00:17:14.800
純雲端過一陣子又有client server的狀況

00:17:14.800 --> 00:17:16.800
這個看起來是蠻清楚的

00:17:16.800 --> 00:17:18.720
所以你看你們現在手機很強嘛

00:17:18.720 --> 00:17:19.760
可以做很多事情

00:17:19.760 --> 00:17:21.200
那你不會說都雲端

00:17:21.200 --> 00:17:23.760
那個我在這邊玩我的game

00:17:23.760 --> 00:17:25.040
那所有的rendering

00:17:25.040 --> 00:17:26.160
所有的運算都在雲端

00:17:26.160 --> 00:17:27.360
大概不會這樣子

00:17:27.360 --> 00:17:29.840
因為你的手機有一定的能力嘛

00:17:29.840 --> 00:17:32.160
所以本來就有這種誤補的狀況啦

00:17:32.160 --> 00:17:34.720
那那個我覺得在server這邊

00:17:34.720 --> 00:17:38.160
可能最主要它會上來一個很大狀況

00:17:38.160 --> 00:17:41.600
是因為AI的那個訓練跟推論

00:17:41.600 --> 00:17:43.120
它的不對稱性

00:17:43.120 --> 00:17:46.640
它這不對稱性並沒有被消彌的狀況

00:17:46.640 --> 00:17:49.440
可以解釋一下這個所謂的不對稱性是什麼嗎

00:17:49.440 --> 00:17:50.800
對 就是要學很久

00:17:50.800 --> 00:17:53.040
要學很久但用起來很快

00:17:53.040 --> 00:17:55.040
就例如說我要訓練一個AI

00:17:55.040 --> 00:17:58.160
要花很多資料很多力氣很多能量

00:17:58.160 --> 00:18:01.040
然後那個搞不好有些ESG的議題

00:18:01.040 --> 00:18:02.640
然後這些事情

00:18:02.640 --> 00:18:04.640
所以你要花很多力氣去訓練

00:18:04.640 --> 00:18:06.800
那但真的是去推論

00:18:06.800 --> 00:18:09.040
就是拿這個用好的模型

00:18:09.040 --> 00:18:10.560
訓練好的模型來用

00:18:10.560 --> 00:18:12.240
需要運算它很快

00:18:12.240 --> 00:18:14.160
所以這個不對稱性

00:18:14.160 --> 00:18:15.680
讓你不但能夠說

00:18:15.680 --> 00:18:18.240
我有一個小小的伺服器在家裡

00:18:18.240 --> 00:18:19.840
我小小的脾氣在家裡

00:18:19.840 --> 00:18:21.840
就去訓練然後就可以用

00:18:21.840 --> 00:18:24.320
因為尤其現在大的語言模型

00:18:24.320 --> 00:18:25.200
是

00:18:25.200 --> 00:18:27.680
那你需要很多平行的運算

00:18:27.680 --> 00:18:31.040
你需要很多分散式的那個記憶體架構

00:18:31.040 --> 00:18:34.000
你需要很多高速的那個聯網

00:18:34.000 --> 00:18:36.160
這個伺服器中間要聯網

00:18:36.160 --> 00:18:37.760
那記憶體可以互相access

00:18:37.760 --> 00:18:39.360
你才有辦法訓練一個大模型

00:18:39.360 --> 00:18:42.080
所以你這種事情在edge端做

00:18:42.080 --> 00:18:43.840
當然是會有困難

00:18:43.840 --> 00:18:46.400
嗯 就很貴啦

00:18:46.400 --> 00:18:48.400
edge端要裝這個可能不知道多少錢

00:18:48.400 --> 00:18:50.640
也有可能就是完全沒有效率

00:18:50.640 --> 00:18:52.000
所以不大可能會贏

00:18:52.000 --> 00:18:53.120
對

00:18:53.120 --> 00:18:54.400
這是現況嘛 對不對

00:18:54.400 --> 00:18:55.120
現況是這樣子

00:18:55.120 --> 00:18:56.960
那又是什麼原因會讓你們說

00:18:56.960 --> 00:18:59.200
還是想要去做edge這邊的開發呢

00:18:59.200 --> 00:19:00.800
所以這個就是剛剛講的嘛

00:19:00.800 --> 00:19:02.960
就是說其實假設我訓練完了

00:19:02.960 --> 00:19:04.560
我拿到前端來應用

00:19:04.560 --> 00:19:05.840
其實是蠻有可能的

00:19:05.840 --> 00:19:06.960
看不同的應用嘛

00:19:06.960 --> 00:19:07.600
是

00:19:07.600 --> 00:19:10.080
所以其實你就看現在的手機的相機

00:19:10.080 --> 00:19:11.120
不是很聰明嗎

00:19:11.120 --> 00:19:12.960
可以認真的連啊這些事情

00:19:12.960 --> 00:19:15.760
其實在當初訓練花很多力氣嘛

00:19:15.760 --> 00:19:17.600
那現在實際來應用是很快的

00:19:17.600 --> 00:19:19.360
所以在edge端要做推論

00:19:19.360 --> 00:19:21.120
基本上就是蠻合理的

00:19:21.120 --> 00:19:23.520
尤其有一些privacy的原因啊

00:19:23.520 --> 00:19:24.960
你在這邊照相片

00:19:24.960 --> 00:19:26.800
然後他的臉是誰的

00:19:26.800 --> 00:19:29.360
你不一定想要丟到cloud大家看嘛

00:19:29.360 --> 00:19:31.200
那有時候可能沒有聯網

00:19:31.200 --> 00:19:33.200
你沒有辦法接上去用

00:19:33.200 --> 00:19:34.960
你可能在本地端要去應用

00:19:34.960 --> 00:19:38.400
所以本來edge就有它的很大的應用的市場

00:19:38.400 --> 00:19:40.320
對 所以這個不用自己

00:19:40.320 --> 00:19:41.440
本來就有這個市場

00:19:41.440 --> 00:19:44.160
那主要就是說這兩個的不對稱性

00:19:44.160 --> 00:19:47.600
在例如說我們現在習慣影像的應用

00:19:47.600 --> 00:19:49.600
好像都ok了嘛

00:19:49.600 --> 00:19:51.440
但是你要知道前幾年

00:19:51.440 --> 00:19:53.120
做影像辨識這個事情

00:19:53.120 --> 00:19:53.600
是

00:19:53.600 --> 00:19:56.080
他還是得要用很昂貴的

00:19:56.080 --> 00:19:58.480
桌上的處理器才可以執行

00:19:58.480 --> 00:19:58.720
對不對

00:19:58.720 --> 00:19:59.360
是

00:19:59.360 --> 00:20:00.400
那在這幾年來

00:20:00.400 --> 00:20:03.600
大家一直不管在那個硬體的優化

00:20:03.600 --> 00:20:06.320
還有在模型的這個精簡化

00:20:06.320 --> 00:20:07.920
都越做越好嘛

00:20:07.920 --> 00:20:08.960
所以你可以看看

00:20:08.960 --> 00:20:11.280
其實這一樣世界有這種

00:20:11.280 --> 00:20:13.440
變大縮小變大縮小這樣

00:20:13.440 --> 00:20:16.080
新的應用出來一定要用很大的模型

00:20:16.080 --> 00:20:18.080
那過一陣子大家就有一些方法說

00:20:18.080 --> 00:20:20.240
這個模型其實沒有那麼多

00:20:20.240 --> 00:20:21.120
效能過正

00:20:21.120 --> 00:20:22.960
這裡很多運算是浪費的

00:20:22.960 --> 00:20:24.640
我們可不可以縮小一下

00:20:24.640 --> 00:20:26.400
改一下那麼convolution的kernel

00:20:26.400 --> 00:20:28.480
改一下這個model的幾層

00:20:28.480 --> 00:20:30.080
然後讓它比較有效率

00:20:30.080 --> 00:20:32.240
所以這個應用因為是新的

00:20:32.240 --> 00:20:33.840
所以他現在要做

00:20:33.840 --> 00:20:36.000
其實要做influence也很困難

00:20:36.000 --> 00:20:38.480
所以你要全GDP一定要在serve上面跑

00:20:39.040 --> 00:20:41.440
那那個你看開始有各種不同的

00:20:41.440 --> 00:20:43.200
LAMA APACA這些

00:20:43.200 --> 00:20:45.040
不同大小的模型出來

00:20:45.040 --> 00:20:48.080
那他們就會想辦法在研究方面

00:20:48.080 --> 00:20:51.760
把這些模型一樣的功能的模型把它縮小

00:20:51.760 --> 00:20:54.400
其實我記得在上個月就已經看到

00:20:54.400 --> 00:20:57.680
蠻多人是把這種語言模型放在手機上面

00:20:57.680 --> 00:20:59.120
三星的手機上

00:20:59.120 --> 00:21:00.240
是啦

00:21:00.240 --> 00:21:00.880
沒有錯

00:21:00.880 --> 00:21:02.560
因為你那個模型

00:21:02.560 --> 00:21:04.480
就是說我們這個東西還是運算

00:21:04.480 --> 00:21:06.160
運算就是軟硬協作

00:21:06.160 --> 00:21:07.040
對

00:21:07.040 --> 00:21:08.160
那軟硬協作就是

00:21:08.160 --> 00:21:10.080
如果硬體的速度比較慢

00:21:10.080 --> 00:21:12.080
那軟體可以動的速度比較快

00:21:12.080 --> 00:21:14.320
所以一定會有人做這個事情

00:21:14.320 --> 00:21:16.160
所以這兩個東西都優化嘛

00:21:16.160 --> 00:21:16.960
硬體變快

00:21:16.960 --> 00:21:17.360
對

00:21:17.360 --> 00:21:17.760
對不對

00:21:17.760 --> 00:21:19.520
然後那個模型變小

00:21:19.520 --> 00:21:20.640
那這兩個一起做

00:21:20.640 --> 00:21:22.960
它的速度達成率會比較快

00:21:22.960 --> 00:21:25.120
所以目前你覺得在Edge這邊

00:21:25.120 --> 00:21:26.880
未來最主要的應用會是什麼

00:21:26.880 --> 00:21:28.960
其實Edge很多應用啦

00:21:28.960 --> 00:21:30.240
就是非常非常多啦

00:21:30.240 --> 00:21:33.280
就是例如說我們現在在這個Podcast用的麥克風

00:21:33.280 --> 00:21:35.280
它其實也可以有Edge應用對吧

00:21:35.280 --> 00:21:35.920
對

00:21:35.920 --> 00:21:37.840
那你要過於雜音

00:21:37.840 --> 00:21:39.280
你要做Echo cancellation

00:21:39.280 --> 00:21:42.800
然後你先要用指向性的去處理這個事情

00:21:42.800 --> 00:21:45.920
那你可能可以假設我不要花那麼多錢

00:21:45.920 --> 00:21:47.280
在麥克風上面嘛

00:21:47.280 --> 00:21:47.600
對不對

00:21:47.600 --> 00:21:49.920
我可以花一些錢在處理器上面

00:21:49.920 --> 00:21:52.080
然後就可以取消掉例如說

00:21:52.080 --> 00:21:53.440
隔壁的人在講話的聲音

00:21:53.440 --> 00:21:55.360
那低音這都可以做嘛

00:21:55.360 --> 00:21:56.240
那這很清楚的

00:21:56.240 --> 00:21:58.400
那我覺得這也是很環保的事情

00:21:58.400 --> 00:21:59.600
就是我那個

00:21:59.600 --> 00:22:01.360
你看麥克風越做越小

00:22:01.360 --> 00:22:04.080
那但是它的那個拼音資格越來越好

00:22:04.080 --> 00:22:06.000
我可以用運算方法

00:22:06.000 --> 00:22:07.200
處理物理的問題

00:22:07.200 --> 00:22:07.840
對不對

00:22:07.840 --> 00:22:09.360
那相機也是一樣嘛

00:22:09.360 --> 00:22:09.760
對不對

00:22:09.760 --> 00:22:13.360
相機以前不是背一個大鏡頭在那邊拍

00:22:13.360 --> 00:22:15.920
那現在為什麼小小的鏡頭可以一樣

00:22:15.920 --> 00:22:17.920
那我們叫做運算照相學

00:22:17.920 --> 00:22:19.760
Computational Photography

00:22:19.760 --> 00:22:21.680
它就是用運算的方法

00:22:21.680 --> 00:22:23.920
把一些訊息補起來

00:22:23.920 --> 00:22:24.480
對吧

00:22:24.480 --> 00:22:27.200
就是例如說簡單有美肌這種東西

00:22:27.200 --> 00:22:29.520
還有搞景深這種東西

00:22:29.520 --> 00:22:31.040
晚上可以拍照

00:22:31.040 --> 00:22:33.120
晚上拍照你就一次拍很多張

00:22:33.120 --> 00:22:34.480
那想辦法合在一起

00:22:34.480 --> 00:22:36.720
就可以模擬一個大鏡頭的行為

00:22:36.720 --> 00:22:38.640
所以這些東西都是一樣

00:22:38.640 --> 00:22:41.200
那個一樣我剛剛講有軟硬協作的事情

00:22:41.200 --> 00:22:44.000
那我們可能很習慣的去看

00:22:44.000 --> 00:22:46.080
這種所謂純運算的問題

00:22:46.080 --> 00:22:49.280
但是這些其實我們身邊很多不同的小的應用

00:22:49.280 --> 00:22:51.040
就像剛剛舉例這個麥克風

00:22:51.040 --> 00:22:52.400
大家比較不會去想到

00:22:52.400 --> 00:22:54.800
那這邊會有很多運算的需求進去

00:22:54.800 --> 00:22:56.880
像你們在開發這種東西的時候

00:22:56.880 --> 00:22:59.760
你們會直接需要去設想

00:22:59.760 --> 00:23:02.000
它的應用場景可能是什麼嗎

00:23:02.000 --> 00:23:04.160
還是你們只是像是

00:23:04.160 --> 00:23:06.400
就是這個平台你們要拿去拿去用都可以

00:23:06.400 --> 00:23:08.400
其實你會有一些設想

00:23:08.400 --> 00:23:11.040
但是我覺得這個跟你創業一樣

00:23:11.040 --> 00:23:12.240
我不知道你們這邊

00:23:12.240 --> 00:23:13.520
一開始想要做的事情

00:23:13.520 --> 00:23:15.600
跟後面做的事情是不太一樣

00:23:15.600 --> 00:23:16.240
理解的意思

00:23:16.240 --> 00:23:16.960
就不斷的pivot這樣子

00:23:16.960 --> 00:23:19.680
就不知道到底什麼時候有市場就轉過去

00:23:19.680 --> 00:23:20.320
對不對

00:23:20.320 --> 00:23:23.120
有時候那看這個市場你接不接得到

00:23:23.120 --> 00:23:25.120
你一開始總有一個設想

00:23:25.120 --> 00:23:27.360
但是我覺得例如說你的市場

00:23:27.360 --> 00:23:29.200
你的聽眾跟你的客人

00:23:29.200 --> 00:23:31.360
可能常常會surprise你對不對

00:23:31.360 --> 00:23:32.880
那有一種是好的surprise

00:23:32.880 --> 00:23:34.480
有一種不好的surprise

00:23:34.480 --> 00:23:37.040
那好的surprise就可以變成你

00:23:37.040 --> 00:23:39.600
新的那個開發的下一個目標

00:23:39.600 --> 00:23:40.640
這是很正常

00:23:40.640 --> 00:23:42.640
你們現在有看到任何的surprise嗎

00:23:42.640 --> 00:23:44.640
很多我是不能講的啦

00:23:44.640 --> 00:23:45.840
因為現在DA啦

00:23:45.840 --> 00:23:47.360
就是有一些各種不同的應用

00:23:47.360 --> 00:23:52.720
但是我覺得我們現在做的這個AI的處理器

00:23:52.720 --> 00:23:54.720
它是一個我們叫細製材

00:23:54.720 --> 00:23:57.120
就是說我們做了一個那個

00:23:57.120 --> 00:23:58.960
我們做一個IP嘛

00:23:58.960 --> 00:23:59.920
IP 對

00:23:59.920 --> 00:24:02.640
那我們再拿去交給這個

00:24:02.640 --> 00:24:04.080
IT設計公司

00:24:04.080 --> 00:24:05.680
它放到它的SoC

00:24:05.680 --> 00:24:07.200
那它再去Tape out

00:24:07.200 --> 00:24:10.560
所以我們客人大部分會做這種SoC的應用

00:24:10.560 --> 00:24:11.280
對

00:24:11.280 --> 00:24:12.560
我這邊可以請教一下嗎

00:24:12.560 --> 00:24:13.040
對 好

00:24:13.040 --> 00:24:13.520
我比較好奇

00:24:13.520 --> 00:24:15.280
因為你們就寫是細製材嘛

00:24:15.280 --> 00:24:17.520
但我業界可能比較不熟悉啦

00:24:17.520 --> 00:24:19.680
那一般我們講叫細製材的

00:24:19.680 --> 00:24:21.440
通常是已經有Tape out過的

00:24:21.440 --> 00:24:23.120
已經驗證過設計的

00:24:23.120 --> 00:24:26.000
對 這個是可能名詞看看怎麼定義

00:24:26.000 --> 00:24:27.280
一般來說

00:24:27.280 --> 00:24:29.680
有的人叫做hard IP

00:24:29.760 --> 00:24:32.960
就是說你真的對於跟著製程比較緊的

00:24:32.960 --> 00:24:36.800
但是我們沒有跟製程那麼緊

00:24:36.800 --> 00:24:37.440
了解

00:24:37.440 --> 00:24:39.680
大部分的製程都可以跟著跑

00:24:39.680 --> 00:24:40.240
了解

00:24:40.240 --> 00:24:43.040
所以有限定在怎麼樣的製程之下嗎

00:24:43.040 --> 00:24:45.680
還是說它只是應該說它就是一個演算的方法

00:24:45.680 --> 00:24:46.800
一般CMOS就可以

00:24:46.800 --> 00:24:48.880
並沒有特別的挑剔啦

00:24:48.880 --> 00:24:50.080
沒有特別的挑剔

00:24:50.080 --> 00:24:51.280
了解

00:24:51.280 --> 00:24:53.200
因為市場上在談的IP

00:24:53.200 --> 00:24:56.000
通常都是這種已經在晶圓廠上架販賣

00:24:56.000 --> 00:24:58.400
上售人已經可供驗證過的那種

00:24:58.400 --> 00:25:00.080
所以有些狀況是這樣

00:25:00.080 --> 00:25:03.200
你做這個有點像是你做一個Library

00:25:03.200 --> 00:25:04.160
是

00:25:04.160 --> 00:25:06.880
這個Library必須要有確定用

00:25:06.880 --> 00:25:07.760
是

00:25:07.760 --> 00:25:09.920
所以我就說那我花一點錢去

00:25:09.920 --> 00:25:11.680
放在晶片裡面去Tape out

00:25:11.680 --> 00:25:12.640
做個Test chip

00:25:12.640 --> 00:25:14.240
跟人家講這真的會動

00:25:14.240 --> 00:25:17.280
所以那一個東西比較像是一個

00:25:17.280 --> 00:25:19.360
說服客戶的一個市場手段

00:25:19.360 --> 00:25:20.240
是

00:25:20.240 --> 00:25:21.600
業務手段

00:25:21.600 --> 00:25:23.200
它並不是一個必須的

00:25:23.200 --> 00:25:25.920
因為你到最後還是在販賣你的電路設計

00:25:25.920 --> 00:25:27.200
對

00:25:27.200 --> 00:25:28.800
那客人說你這個東西

00:25:28.800 --> 00:25:30.640
到底能不能用我怎麼會知道

00:25:30.640 --> 00:25:32.800
那你就看你等一下怎麼證明給他

00:25:32.800 --> 00:25:33.680
主要是這樣

00:25:33.680 --> 00:25:34.080
OK

00:25:34.080 --> 00:25:35.920
反正我可以簡單理解的是說

00:25:35.920 --> 00:25:38.080
我們這東西其實現在的狀況就是說

00:25:38.080 --> 00:25:40.240
我們就提供給IC設計的這些廠家

00:25:40.240 --> 00:25:42.480
那他就是把我們這個東西包進去

00:25:42.480 --> 00:25:43.200
對

00:25:43.200 --> 00:25:44.240
對我們未來來說

00:25:44.240 --> 00:25:45.360
就我不知道市快一點

00:25:45.360 --> 00:25:46.000
我們先講一下

00:25:46.000 --> 00:25:47.120
就是IP的收費模式

00:25:47.120 --> 00:25:49.040
通常就是譬如說你白客是白Pix

00:25:49.040 --> 00:25:50.080
或是白Waver

00:25:50.080 --> 00:25:51.120
對

00:25:51.120 --> 00:25:52.480
應該就是大家類似這樣的模式

00:25:52.480 --> 00:25:53.440
差不多

00:25:53.440 --> 00:25:54.800
了解

00:25:54.800 --> 00:25:56.720
所以我們像我們這樣應用的話

00:25:56.720 --> 00:25:57.680
因為是在Edge端

00:25:57.680 --> 00:25:59.680
我們會是應用在3C產品裡面嗎

00:25:59.680 --> 00:26:00.640
有沒有想法

00:26:00.640 --> 00:26:02.080
對這個是好問題

00:26:02.080 --> 00:26:05.280
我覺得像我們目前還沒有需要

00:26:05.280 --> 00:26:07.600
當我們有客戶開始在TayPal

00:26:07.600 --> 00:26:10.160
這個東西因為我們今年才宣布

00:26:10.160 --> 00:26:10.720
是

00:26:10.720 --> 00:26:12.960
但是現在有客戶開始在TayPal

00:26:12.960 --> 00:26:16.240
那我們通常因為客戶保密協定的原因

00:26:16.240 --> 00:26:19.440
我們也不能把假客戶的晶片拿去給客戶看

00:26:19.440 --> 00:26:20.400
是

00:26:20.400 --> 00:26:22.880
那所以我們當然也有可能考慮自己去TayPal

00:26:22.880 --> 00:26:26.080
但目前並沒有這個很大的需求

00:26:26.080 --> 00:26:29.280
就是主要原因是我的晶片是很低耗能的

00:26:29.280 --> 00:26:31.440
相對也是比較低算力的

00:26:31.440 --> 00:26:31.840
是

00:26:31.840 --> 00:26:34.640
但是它的耗能的效率是好的

00:26:34.640 --> 00:26:35.200
了解

00:26:35.200 --> 00:26:36.080
你慢沒有關係

00:26:36.080 --> 00:26:38.640
但是你用的能量跟你那個能量比

00:26:38.640 --> 00:26:39.760
它是好的就可以

00:26:39.760 --> 00:26:40.400
那個叫什麼

00:26:40.400 --> 00:26:43.040
耗能除以那個運算能力那個指標

00:26:43.040 --> 00:26:44.240
對對對對

00:26:44.240 --> 00:26:45.600
我忽然忘記叫什麼

00:26:45.600 --> 00:26:47.280
那叫做Perf per Watt

00:26:47.280 --> 00:26:48.080
是是是

00:26:48.080 --> 00:26:49.440
Performance per Watt

00:26:49.440 --> 00:26:50.880
你看我們的Performance per Watt

00:26:50.880 --> 00:26:52.320
相對是非常高的

00:26:52.320 --> 00:26:55.040
所以因為這個原因就沒有太多這種

00:26:55.040 --> 00:26:57.760
像你講的那個TayPal的Request

00:26:57.760 --> 00:27:00.160
大家不會說你做個晶片我才相信

00:27:00.160 --> 00:27:02.320
目前就是它模擬它就覺得

00:27:02.320 --> 00:27:04.320
夠快然後夠輕就可以了

00:27:04.320 --> 00:27:07.760
所以實務上我們並不是說拿去做傳統的Edge

00:27:07.760 --> 00:27:10.160
例如說我們想RoleCom啊

00:27:10.160 --> 00:27:10.960
LibraCore啊

00:27:10.960 --> 00:27:13.360
放在手機上面你覺得是Edge

00:27:13.360 --> 00:27:16.560
我們是放在這個手機的周邊

00:27:16.560 --> 00:27:17.360
了解了解

00:27:17.360 --> 00:27:19.120
例如說手機各種不同感應器

00:27:19.120 --> 00:27:21.440
或者例如說它的攝影機什麼這些東西

00:27:21.440 --> 00:27:23.120
或是你的Laptop

00:27:23.120 --> 00:27:24.480
有其他不同的設備

00:27:24.480 --> 00:27:26.400
它是Edge裡面的Edge

00:27:26.400 --> 00:27:27.200
理解理解

00:27:27.200 --> 00:27:29.360
所以我們都通常是講Edge of the Edge

00:27:29.360 --> 00:27:30.240
叫Far Edge

00:27:30.240 --> 00:27:32.480
它需要很低很低的算力對不對

00:27:32.480 --> 00:27:35.680
那它其實可以造成很大的綜效

00:27:35.680 --> 00:27:38.720
我剛剛舉過這個麥克風這個例子對不對

00:27:38.720 --> 00:27:39.760
那麥克風這個

00:27:39.760 --> 00:27:41.760
如果說我在麥克風裡面放個AI

00:27:41.760 --> 00:27:43.360
剛剛那種AI可以理解

00:27:43.360 --> 00:27:45.760
這個傳統就叫做Cocktail

00:27:45.760 --> 00:27:48.400
Cocktail Problem就是五個人在講話

00:27:48.400 --> 00:27:51.600
那你怎麼樣把這五個人的聲音分開來

00:27:51.600 --> 00:27:54.240
那如果你有一個小的AI在裡面算

00:27:54.240 --> 00:27:56.000
那算出來的聲音就是一個人的

00:27:56.000 --> 00:27:59.200
那你直接把這個音源插到你的Mixer

00:27:59.200 --> 00:27:59.760
對不對

00:27:59.760 --> 00:28:00.080
是

00:28:00.080 --> 00:28:01.120
什麼事都不用做

00:28:01.120 --> 00:28:02.240
對吧

00:28:02.240 --> 00:28:03.360
也不用三支麥克風了

00:28:03.360 --> 00:28:04.000
就一直就好

00:28:04.000 --> 00:28:04.640
對對對可以

00:28:04.640 --> 00:28:06.080
但另外一個可能性是說

00:28:06.080 --> 00:28:08.000
好那我什麼都不要算

00:28:08.000 --> 00:28:10.320
我就是直接丟進去Mixer

00:28:10.320 --> 00:28:13.280
然後在Mixer那個Edge做一些運算

00:28:13.280 --> 00:28:14.720
那這個就有缺點就是說

00:28:14.720 --> 00:28:16.640
那你這個Mixer要複雜一點

00:28:16.640 --> 00:28:19.440
這個Mixer可能要跟麥克風做溝通

00:28:19.440 --> 00:28:21.280
所以你就要一個新的介面出來對吧

00:28:21.280 --> 00:28:22.720
所以這些都是不同的

00:28:22.720 --> 00:28:24.400
你在做系統設計的時候

00:28:24.400 --> 00:28:25.520
也有不同的考量

00:28:25.520 --> 00:28:26.800
我可不可以給你一個

00:28:26.800 --> 00:28:28.320
音質很純淨的麥克風

00:28:28.320 --> 00:28:30.240
這樣就好了對吧

00:28:30.240 --> 00:28:31.680
還是我給你一大堆資料

00:28:31.680 --> 00:28:33.680
丟到Mixer叫你去算

00:28:33.680 --> 00:28:36.000
那那個手機上面可以有一樣的例子啊

00:28:36.000 --> 00:28:37.520
它的那個鏡頭上面

00:28:37.520 --> 00:28:40.080
搞不好鏡頭上面要做一個自動對焦

00:28:40.080 --> 00:28:42.560
那它是不是要做人臉辨識啊

00:28:42.560 --> 00:28:45.200
臉要清楚啊其他模糊沒關係

00:28:45.200 --> 00:28:47.280
那所以這個鏡頭要做自動對焦

00:28:47.280 --> 00:28:48.400
要做人臉辨識

00:28:48.400 --> 00:28:50.160
它現在是要把那一個

00:28:50.240 --> 00:28:53.680
它看到的東西丟到手機的處理器

00:28:53.680 --> 00:28:55.440
然後那條線很長嘛

00:28:55.440 --> 00:28:58.080
你從那個晶片的角度那條線很長

00:28:58.080 --> 00:29:00.320
你要丟記憶體過去很昂貴

00:29:00.320 --> 00:29:02.400
那你那個相機一打開就發現

00:29:02.400 --> 00:29:03.440
手機是熱的

00:29:03.440 --> 00:29:04.560
對不對

00:29:04.560 --> 00:29:07.680
那你如果把那個整個運算放在前面

00:29:07.680 --> 00:29:08.960
那手機就不會熱啦

00:29:08.960 --> 00:29:10.080
所以我有點好奇

00:29:10.080 --> 00:29:11.760
這個的差距在哪邊

00:29:11.760 --> 00:29:12.880
差距在說

00:29:12.880 --> 00:29:15.760
我越前面算需要的資料量越小

00:29:15.760 --> 00:29:17.120
還是像你剛剛講的

00:29:17.120 --> 00:29:19.280
就是我只要丟到後面去

00:29:19.280 --> 00:29:20.560
因為我就要丟東西嘛

00:29:20.560 --> 00:29:21.840
然後我就要傳輸啊

00:29:21.840 --> 00:29:23.280
記憶體什麼的就要多

00:29:23.280 --> 00:29:24.320
然後就是

00:29:24.320 --> 00:29:26.240
是因為前面要的資料量小

00:29:26.240 --> 00:29:28.720
還是因為我要傳輸它很耗能

00:29:28.720 --> 00:29:29.680
就是好處是大

00:29:29.680 --> 00:29:31.200
所以其實好問題

00:29:31.200 --> 00:29:33.200
兩個都有可能啦

00:29:33.200 --> 00:29:36.400
那其實你耗能大

00:29:36.400 --> 00:29:38.000
傳輸速度慢

00:29:38.000 --> 00:29:39.920
跟資料量大

00:29:39.920 --> 00:29:42.080
這些問題到最後看起來是很類似

00:29:42.080 --> 00:29:44.240
也就是資料傳輸不順嘛

00:29:44.240 --> 00:29:45.600
對不對

00:29:45.600 --> 00:29:46.960
這應該跟記憶體的那個

00:29:46.960 --> 00:29:48.400
存取架構應該有關係

00:29:48.400 --> 00:29:49.360
對對對都有

00:29:49.360 --> 00:29:50.640
什麼逢牛慢架構

00:29:50.640 --> 00:29:51.920
逢諾伊門啦

00:29:51.920 --> 00:29:53.040
對對對

00:29:53.040 --> 00:29:54.480
所以其實就是逢諾伊門

00:29:54.480 --> 00:29:55.440
就是一個處理器

00:29:55.440 --> 00:29:56.000
一個BUS

00:29:56.000 --> 00:29:58.000
下面有一大堆記憶體這種東西

00:29:58.000 --> 00:30:00.720
就是說那BUS其實有可以好多個

00:30:00.720 --> 00:30:03.600
就是近的可以有一個Near Side BUS

00:30:03.600 --> 00:30:05.360
遠的可以有一個遠的BUS

00:30:05.360 --> 00:30:08.160
那近的一定是比較方便嘛

00:30:08.160 --> 00:30:08.640
是

00:30:08.640 --> 00:30:10.320
那所以記憶體架構來說

00:30:10.320 --> 00:30:11.920
對處理器是很重要的事情

00:30:11.920 --> 00:30:14.880
我舉一個比較生活化的例子

00:30:14.880 --> 00:30:16.560
我剛剛進來你們這邊

00:30:16.560 --> 00:30:18.880
謝謝你們請我喝了一瓶可樂

00:30:18.880 --> 00:30:22.720
但是可樂可能去樓下7-11拿的

00:30:22.720 --> 00:30:24.400
或是去Costco買的對不對

00:30:24.400 --> 00:30:25.920
那我今天來

00:30:25.920 --> 00:30:27.120
你說要喝什麼

00:30:27.120 --> 00:30:28.400
我就說我要可樂

00:30:28.400 --> 00:30:29.360
那你就說好沒關係

00:30:29.360 --> 00:30:30.640
我去7-11幫你買一瓶

00:30:30.640 --> 00:30:31.840
很慢嘛

00:30:31.840 --> 00:30:33.040
對不對

00:30:33.040 --> 00:30:34.480
所以你放一些在這邊

00:30:34.480 --> 00:30:36.640
那這有點像很近的記憶體

00:30:36.640 --> 00:30:37.440
很快就可以拿到

00:30:37.440 --> 00:30:40.080
但你的缺點是你要買一個定向針來騙

00:30:40.080 --> 00:30:41.120
對

00:30:41.120 --> 00:30:43.360
所以所有的運算都會有這種

00:30:43.360 --> 00:30:44.400
記憶體的

00:30:44.400 --> 00:30:46.480
遠近一端存取的問題

00:30:46.480 --> 00:30:47.040
對

00:30:47.040 --> 00:30:48.400
近的話就快

00:30:48.400 --> 00:30:50.320
但近的話會有一些cost

00:30:50.320 --> 00:30:52.720
那到最後你就是看要怎麼安排這些運算

00:30:52.720 --> 00:30:54.720
讓它比較有效率啦

00:30:54.720 --> 00:30:56.240
例如說剛剛舉的例子

00:30:56.240 --> 00:30:59.360
如果說我的攝影機要做對焦的事情

00:30:59.360 --> 00:31:00.160
對不對

00:31:00.160 --> 00:31:01.920
那我可能近端

00:31:01.920 --> 00:31:03.920
如果都完全沒有看到人臉

00:31:03.920 --> 00:31:04.320
對

00:31:04.320 --> 00:31:05.600
那我搞不好有一個功能

00:31:05.600 --> 00:31:06.880
就是說沒有看到人臉

00:31:06.880 --> 00:31:09.440
我就完全不要開景窗對不對

00:31:09.440 --> 00:31:11.680
就不要讓它動對不對

00:31:11.680 --> 00:31:14.480
那這樣子是不是整體的省電又會更好

00:31:14.480 --> 00:31:15.360
對不對

00:31:15.360 --> 00:31:17.600
所以大概就是有這些不同的

00:31:17.600 --> 00:31:20.320
一樣我覺得把它當作一個系統在看

00:31:20.320 --> 00:31:22.960
那我們怎麼樣用最遠端的Edge

00:31:22.960 --> 00:31:24.000
近端的Edge

00:31:24.000 --> 00:31:26.160
還有這種雲端這些不同東西

00:31:26.160 --> 00:31:28.960
組合出一個最有效率的運算

00:31:28.960 --> 00:31:30.080
通常都是這樣子

00:31:30.080 --> 00:31:30.720
所以其實

00:31:30.720 --> 00:31:31.520
優化結構

00:31:31.520 --> 00:31:32.400
這樣就合理吧

00:31:32.400 --> 00:31:32.720
對不對

00:31:32.720 --> 00:31:34.400
因為這樣就等於說

00:31:34.400 --> 00:31:35.200
因為你一開始會說

00:31:35.200 --> 00:31:37.600
它的算力並不是到非常非常強

00:31:37.600 --> 00:31:40.400
可是一開始我聽起來說算力不是很強

00:31:40.400 --> 00:31:42.880
所以可能就是不會用在像手機

00:31:42.880 --> 00:31:45.760
或者是電腦這麼複雜的這個硬體上面

00:31:45.760 --> 00:31:46.960
可是它聽起來不是

00:31:46.960 --> 00:31:48.560
反而是你越複雜的

00:31:48.560 --> 00:31:51.440
如果你有辦法越把這些計算到

00:31:51.440 --> 00:31:52.160
第一開始

00:31:52.160 --> 00:31:54.000
就最早接收到那個裝置

00:31:54.000 --> 00:31:55.440
然後你可以讓這整個

00:31:55.440 --> 00:31:57.200
就算不是這個整體效能提升好了

00:31:57.200 --> 00:31:58.560
至少電池可以放大一點

00:31:58.560 --> 00:31:59.600
就電量就變多了這樣子

00:31:59.600 --> 00:32:00.160
對啊

00:32:00.160 --> 00:32:02.320
所以其實這個需不需要在

00:32:02.320 --> 00:32:03.680
最遠端做運算

00:32:03.680 --> 00:32:07.120
其實可以用一些量表去分析

00:32:07.120 --> 00:32:08.720
例如說我如果說

00:32:08.720 --> 00:32:10.960
它可以得到的效率非常好

00:32:10.960 --> 00:32:12.640
那我們可能就會做

00:32:12.640 --> 00:32:14.720
如果說它增加了硬體的成本

00:32:14.720 --> 00:32:15.920
不會增加很多

00:32:15.920 --> 00:32:18.560
那甚至可以省其他地方的成本

00:32:18.560 --> 00:32:19.840
那我可能也會去做

00:32:19.840 --> 00:32:20.320
對不對

00:32:20.320 --> 00:32:22.320
有時候也有我們叫

00:32:22.320 --> 00:32:23.760
Duty cycle的事情

00:32:23.760 --> 00:32:24.640
Duty cycle就是說

00:32:24.640 --> 00:32:26.720
假設我的手機

00:32:26.720 --> 00:32:28.560
上面那個攝影機偶爾要對個角

00:32:28.560 --> 00:32:30.480
那不一定會想要放在上面

00:32:30.480 --> 00:32:32.720
因為你手機不是整天在拍照

00:32:32.720 --> 00:32:33.840
但是你如果有一個

00:32:33.840 --> 00:32:35.760
例如說監控攝影機在上面

00:32:35.760 --> 00:32:37.280
整天都是在拍照

00:32:37.280 --> 00:32:38.480
那你就放在最前面

00:32:38.480 --> 00:32:40.800
因為它整天在拍

00:32:40.800 --> 00:32:43.040
那它的結果一直被後面用

00:32:43.040 --> 00:32:45.360
所以後面的大的處理器

00:32:45.360 --> 00:32:46.560
就可以省很多力氣

00:32:46.560 --> 00:32:47.600
對不對

00:32:47.600 --> 00:32:49.360
所以你看它前面

00:32:49.360 --> 00:32:51.600
那一個小處理器要花能量

00:32:51.600 --> 00:32:52.720
但是它花的能量

00:32:52.720 --> 00:32:54.240
可以讓後面省很多

00:32:54.240 --> 00:32:57.120
那這整個系統算起來是平衡的

00:32:57.120 --> 00:32:58.240
它就有道理去做

00:32:58.240 --> 00:32:59.520
對啊

00:32:59.520 --> 00:33:01.280
這個大家的算法是一致的嗎

00:33:01.280 --> 00:33:02.400
有個公用的算法還是

00:33:02.400 --> 00:33:03.840
就是各家自己評估

00:33:03.840 --> 00:33:05.680
這個跟應用是很有關係的啦

00:33:05.680 --> 00:33:06.960
然後也不好說

00:33:06.960 --> 00:33:07.840
通常我們在做

00:33:07.840 --> 00:33:09.440
這個就是叫做

00:33:10.080 --> 00:33:11.040
系統架構設計

00:33:11.040 --> 00:33:12.800
那系統架構設計

00:33:12.800 --> 00:33:13.840
聽起來是很抽象

00:33:13.840 --> 00:33:16.320
那就是軟硬體的架構師

00:33:16.320 --> 00:33:18.880
我以前在NVIDIA就是做這種

00:33:18.880 --> 00:33:20.480
叫做3D Graphics Architect

00:33:20.480 --> 00:33:21.520
就是在做架構

00:33:21.520 --> 00:33:23.440
所以架構就是

00:33:23.440 --> 00:33:24.560
不會軟體也不會硬體

00:33:24.560 --> 00:33:26.720
謙虛了啦

00:33:26.720 --> 00:33:27.360
都要懂

00:33:27.360 --> 00:33:28.960
都懂一些啦

00:33:28.960 --> 00:33:30.400
那怎麼講就是說

00:33:30.400 --> 00:33:32.160
因為像NVIDIA這種公司

00:33:32.160 --> 00:33:33.520
它有很多軟體的人

00:33:33.520 --> 00:33:35.520
那軟體有時候是

00:33:35.520 --> 00:33:37.600
跟硬體一起合作

00:33:37.600 --> 00:33:39.680
找出比較好的解決辦法

00:33:40.080 --> 00:33:41.280
那有時候軟體是

00:33:41.280 --> 00:33:43.680
幫硬體處理這個迭代問題

00:33:43.680 --> 00:33:45.840
那個處理迭代問題

00:33:45.840 --> 00:33:47.120
說難聽一點就是

00:33:47.120 --> 00:33:47.680
插屁股

00:33:47.680 --> 00:33:48.960
這麼講

00:33:48.960 --> 00:33:50.320
硬體有bug嘛

00:33:50.320 --> 00:33:52.480
那你把硬體bug修好

00:33:52.480 --> 00:33:54.160
然後再回來找台積電

00:33:54.160 --> 00:33:55.360
然後再修好

00:33:55.360 --> 00:33:56.720
然後再推出市場

00:33:56.720 --> 00:33:57.760
半年至少對吧

00:33:57.760 --> 00:33:59.920
對那這半年怎麼辦

00:33:59.920 --> 00:34:00.720
被罵翻了嗎

00:34:00.720 --> 00:34:02.480
那我可不可以軟體改一改

00:34:02.480 --> 00:34:04.400
就workaround的做法

00:34:04.400 --> 00:34:05.520
對的workaround

00:34:05.520 --> 00:34:06.720
事不宗一不原已嘛

00:34:08.000 --> 00:34:09.680
我們有suboptimal mode

00:34:09.680 --> 00:34:11.440
也就是說當機了

00:34:11.440 --> 00:34:12.640
那driver就重開嘛

00:34:12.640 --> 00:34:15.280
自動重開機這樣子

00:34:15.280 --> 00:34:17.280
對自動重開機絕對是一個

00:34:17.280 --> 00:34:18.400
必須要重開的

00:34:18.400 --> 00:34:19.920
BnB一定要可以的

00:34:19.920 --> 00:34:21.120
不管遇到什麼問題

00:34:21.120 --> 00:34:21.840
就我們工作人員說

00:34:21.840 --> 00:34:22.320
我也不知道

00:34:22.320 --> 00:34:22.880
不然我重開就好了

00:34:22.880 --> 00:34:23.600
他就重開機啊

00:34:23.600 --> 00:34:24.880
重開就好了這樣

00:34:24.880 --> 00:34:25.680
對啊我開車

00:34:25.680 --> 00:34:27.200
是他開到一半他都會重開嘛

00:34:27.200 --> 00:34:29.280
對那他這個產品

00:34:29.280 --> 00:34:30.480
能動的產品一定有bug

00:34:30.480 --> 00:34:32.880
但是我們叫做

00:34:32.880 --> 00:34:34.320
你要mitigate the bug

00:34:34.320 --> 00:34:34.640
對不對

00:34:34.640 --> 00:34:35.680
你不能讓使用者

00:34:35.680 --> 00:34:37.040
或是你的客人

00:34:37.040 --> 00:34:38.160
受到這個bug

00:34:38.160 --> 00:34:38.640
是

00:34:38.640 --> 00:34:40.080
對所以你怎麼處理

00:34:40.080 --> 00:34:41.520
有各種不同處理辦法

00:34:41.520 --> 00:34:42.560
了解了解

00:34:42.560 --> 00:34:44.400
那像你們前陣子發表這個

00:34:44.400 --> 00:34:45.600
Edge AI加速器

00:34:45.600 --> 00:34:46.320
對

00:34:46.320 --> 00:34:47.360
所以它這個東西

00:34:47.360 --> 00:34:48.240
跟剛剛講的東西

00:34:48.240 --> 00:34:49.600
它大概是扮演什麼樣的角色

00:34:49.600 --> 00:34:51.120
你們對它有什麼樣的期待

00:34:51.120 --> 00:34:51.600
期待

00:34:51.600 --> 00:34:54.160
其實我們覺得

00:34:54.160 --> 00:34:56.240
你做一些事情

00:34:56.240 --> 00:34:57.600
像這一類的事情

00:34:57.600 --> 00:34:58.880
需要有一點意義

00:34:58.880 --> 00:34:59.920
意義的意思就是說

00:34:59.920 --> 00:35:01.920
不能說別人做事沒有意義

00:35:01.920 --> 00:35:02.960
就是我假設

00:35:02.960 --> 00:35:03.920
例如說我的身材

00:35:03.920 --> 00:35:05.440
我要去跑百米一定輸的嘛

00:35:05.440 --> 00:35:06.640
是

00:35:06.640 --> 00:35:07.680
所以我不會贏的地方

00:35:07.680 --> 00:35:08.560
我直接放棄

00:35:08.560 --> 00:35:11.760
我想在最高算力的處理器

00:35:11.760 --> 00:35:12.960
我是直接放棄

00:35:12.960 --> 00:35:16.080
對但是在這個中低算力

00:35:16.080 --> 00:35:17.920
例如說在手機上面

00:35:17.920 --> 00:35:20.640
它需要做的應用也很多樣

00:35:20.640 --> 00:35:23.200
所以它也需要很多軟體的資源

00:35:23.200 --> 00:35:24.720
那所以這幾個T的算力

00:35:24.720 --> 00:35:26.480
3T 5T 10T的算力

00:35:26.480 --> 00:35:28.880
我覺得也很擁擠

00:35:28.880 --> 00:35:29.520
很多人做

00:35:29.520 --> 00:35:32.320
那需要的投資也大

00:35:32.320 --> 00:35:33.520
可是我們這邊做的是

00:35:33.520 --> 00:35:36.080
比較像特定應用的處理器

00:35:36.880 --> 00:35:37.680
那這意思是這樣

00:35:37.680 --> 00:35:39.680
你看如果說有一個東西

00:35:39.680 --> 00:35:42.400
只會做三種AI模型

00:35:42.400 --> 00:35:44.160
你是不是可以把它設計得很有效率

00:35:44.160 --> 00:35:45.280
是

00:35:45.280 --> 00:35:46.000
對不對

00:35:46.000 --> 00:35:47.200
那edge of the edge

00:35:47.200 --> 00:35:49.360
你差不多就是黏在一個

00:35:49.360 --> 00:35:50.800
很特定的device上面

00:35:50.800 --> 00:35:52.160
你會做的東西不多

00:35:52.160 --> 00:35:52.960
對不對

00:35:52.960 --> 00:35:54.480
所以因此我們可以做的東西

00:35:54.480 --> 00:35:56.000
就非常有效率

00:35:56.000 --> 00:35:57.520
但是這個沒有很好做

00:35:57.520 --> 00:36:00.960
這個就是你要把軟體跟硬體的協作

00:36:00.960 --> 00:36:02.320
這個模式做得很好

00:36:02.320 --> 00:36:04.320
所以它其實會變得就很匿跡

00:36:04.320 --> 00:36:08.160
因為你要跟應用端會有非常強的連結

00:36:08.160 --> 00:36:10.720
它類似一點變形蟲

00:36:10.720 --> 00:36:12.000
mRNA那種感覺

00:36:12.000 --> 00:36:13.440
就是它雖然是niche

00:36:13.440 --> 00:36:16.640
但是你可以把它retarget到不同的應用去

00:36:16.640 --> 00:36:18.560
但如果retarget不用再改嗎

00:36:18.560 --> 00:36:19.200
它需要改

00:36:19.200 --> 00:36:20.240
但是它要改的

00:36:20.240 --> 00:36:21.200
就是有點像樂高

00:36:21.200 --> 00:36:22.400
對不對

00:36:22.400 --> 00:36:23.840
你要組一個星際大戰

00:36:23.840 --> 00:36:24.960
你就重新拆一拆

00:36:24.960 --> 00:36:26.960
可能會少一些零件重新弄一弄

00:36:26.960 --> 00:36:28.720
但是你的零件沒有差太多

00:36:28.720 --> 00:36:30.880
它是一個重組的過程

00:36:30.880 --> 00:36:32.640
它不是重新設計的過程

00:36:32.640 --> 00:36:33.520
我覺得蠻有趣的

00:36:33.520 --> 00:36:35.200
因為如果我們回去看

00:36:35.200 --> 00:36:36.800
剛剛講最高算力

00:36:36.800 --> 00:36:38.880
就以NVIDIA來說好了

00:36:38.880 --> 00:36:40.080
原本在做GPU

00:36:40.080 --> 00:36:41.360
後來發現說很多人發現說

00:36:41.360 --> 00:36:42.880
GPU可以平行運算很棒

00:36:42.880 --> 00:36:44.720
那我就來做一個GPGPU

00:36:44.720 --> 00:36:47.120
就是我全部都可以用

00:36:47.120 --> 00:36:48.160
可是你們現在反而是說

00:36:48.160 --> 00:36:50.160
可是這邊都是拼最高算力

00:36:50.160 --> 00:36:52.160
沒關係 我不要到general purpose

00:36:52.160 --> 00:36:54.240
我一樣先鎖定這幾個purpose好了

00:36:54.240 --> 00:36:56.720
所以就把它拉回來做比較

00:36:56.720 --> 00:36:58.400
就是這種特定的應用這樣子

00:36:58.400 --> 00:36:59.920
有點ASIC回來了對不對

00:36:59.920 --> 00:37:00.960
對

00:37:00.960 --> 00:37:03.040
剛剛不是講we are reincarnation嗎

00:37:03.040 --> 00:37:04.320
就是再生轉世

00:37:04.320 --> 00:37:04.960
對不對

00:37:04.960 --> 00:37:06.480
我記得我在讀研究所的時候

00:37:06.480 --> 00:37:07.280
就有一些同學說

00:37:07.280 --> 00:37:08.960
那GPU可以做很多事

00:37:08.960 --> 00:37:11.200
那我們那時候找不到很好的

00:37:11.200 --> 00:37:12.640
這個平行處理器

00:37:12.640 --> 00:37:15.280
那所以我們就hack GPU來做很多事

00:37:15.280 --> 00:37:16.800
然後後來說這個不錯

00:37:16.800 --> 00:37:19.200
我們就同學們一起註冊了這個網站

00:37:19.200 --> 00:37:20.960
叫GPGPU.org

00:37:20.960 --> 00:37:22.240
對

00:37:22.240 --> 00:37:23.680
那所以那時候做什麼

00:37:23.680 --> 00:37:26.080
就是你想GPU當初就是畫圖

00:37:26.080 --> 00:37:26.720
對

00:37:26.720 --> 00:37:27.600
那畫圖做什麼

00:37:27.600 --> 00:37:30.480
就是兩個什麼材質

00:37:30.480 --> 00:37:32.320
映射 texture mapping

00:37:32.320 --> 00:37:33.760
那兩張圖加起來

00:37:33.760 --> 00:37:34.240
對

00:37:34.240 --> 00:37:35.040
對不對

00:37:35.040 --> 00:37:38.400
那我們就GPGPU做很多事情說

00:37:38.400 --> 00:37:41.600
好這個你可以把這個東西拿來怎麼用

00:37:41.600 --> 00:37:43.680
那所以一張圖一個texture

00:37:43.680 --> 00:37:44.880
就是一個矩陣

00:37:44.880 --> 00:37:45.760
對不對

00:37:45.760 --> 00:37:47.760
那兩張圖加起來

00:37:47.760 --> 00:37:48.880
就是矩陣相加

00:37:48.880 --> 00:37:49.760
是

00:37:49.760 --> 00:37:51.120
對 所以我們以前做的

00:37:51.120 --> 00:37:54.560
GPGPU做的事情就是去hack GPU

00:37:54.560 --> 00:37:58.800
把那個數學運算換成GPU看得懂

00:37:58.800 --> 00:38:01.120
不要跟他說我要兩個矩陣相加

00:38:01.120 --> 00:38:04.000
你就說這兩個texture blend在一起

00:38:04.000 --> 00:38:05.920
做那個訊的這樣子

00:38:05.920 --> 00:38:06.880
你也不要跟他做

00:38:06.880 --> 00:38:08.480
我要做線性內差

00:38:08.480 --> 00:38:10.720
就說好我做那個半透明

00:38:10.720 --> 00:38:12.960
blending alpha blending

00:38:12.960 --> 00:38:14.080
就去騙他

00:38:14.080 --> 00:38:16.240
那出來的東西又是另外一張圖

00:38:16.240 --> 00:38:17.280
就你們是用

00:38:17.280 --> 00:38:19.520
把它轉成繪畫的語言在跟他溝通

00:38:19.520 --> 00:38:20.560
沒錯

00:38:20.560 --> 00:38:22.720
那所以後來我去NVIDIA的時候

00:38:22.720 --> 00:38:24.080
我們那時候就在說

00:38:24.080 --> 00:38:25.520
這個東西太麻煩了

00:38:25.520 --> 00:38:26.560
你要會數學

00:38:26.560 --> 00:38:27.040
對

00:38:27.040 --> 00:38:28.560
你要會搞這個

00:38:28.560 --> 00:38:29.120
你要懂那個

00:38:29.120 --> 00:38:30.160
OpenGL這些東西

00:38:30.160 --> 00:38:33.040
對 你要懂電腦繪圖的這個原理是什麼

00:38:33.040 --> 00:38:35.280
那這個有點太囉嗦了

00:38:35.280 --> 00:38:38.640
所以後來我們才在NVIDIA開始

00:38:38.640 --> 00:38:39.920
做這個CUDA

00:38:39.920 --> 00:38:43.280
CUDA就是說我們就bypass這個事情

00:38:43.280 --> 00:38:44.320
矩陣就矩陣

00:38:44.320 --> 00:38:45.440
那中間那一層

00:38:45.440 --> 00:38:47.760
把矩陣變圖這件事情

00:38:47.760 --> 00:38:49.360
可不可以閃掉

00:38:49.360 --> 00:38:51.600
那做這個東西需不需要一些硬體資源

00:38:51.600 --> 00:38:53.840
所以把這個東西合在一起做就是CUDA

00:38:53.840 --> 00:38:54.320
很酷

00:38:54.320 --> 00:38:57.040
所以一開始你們這個GPGPU.org

00:38:57.040 --> 00:38:59.120
那個時候就已經有GPGPU這個詞了嗎

00:38:59.120 --> 00:38:59.680
有

00:38:59.680 --> 00:39:01.760
其實GPU拿來做運算

00:39:01.760 --> 00:39:04.160
是先於CUDA這種事情

00:39:04.160 --> 00:39:06.480
那一開始會拿GPU來運算

00:39:06.480 --> 00:39:09.600
其實大部分都是懂得怎麼運用GPU

00:39:09.600 --> 00:39:10.640
來繪圖這一群

00:39:10.640 --> 00:39:11.840
那但是我要繪圖

00:39:11.840 --> 00:39:13.120
但是我也要做運算

00:39:13.120 --> 00:39:13.600
對

00:39:13.600 --> 00:39:16.720
但是那時候CPU不大給力

00:39:16.720 --> 00:39:18.000
怎麼快怎麼辦

00:39:18.000 --> 00:39:20.080
所以就是用GPU來做

00:39:20.080 --> 00:39:21.680
那當然還有很多東西要做

00:39:21.680 --> 00:39:24.000
那個把繪圖硬體拿來運算

00:39:24.000 --> 00:39:25.120
還有很多問題

00:39:25.120 --> 00:39:25.600
當時嘛

00:39:25.600 --> 00:39:27.200
這大概差不多20年了

00:39:27.440 --> 00:39:30.240
那最大的問題就是精準度的問題

00:39:30.240 --> 00:39:32.800
就是我們喜歡用浮點運算

00:39:32.800 --> 00:39:34.000
是

00:39:34.000 --> 00:39:36.160
就是地球到月球的距離

00:39:36.160 --> 00:39:38.000
要用公分可以表示嘛

00:39:38.000 --> 00:39:38.720
對不對

00:39:38.720 --> 00:39:41.760
但是那個GPU一開始就是8個bit嘛

00:39:41.760 --> 00:39:42.480
顏色嘛

00:39:42.480 --> 00:39:43.680
0到255嘛

00:39:43.680 --> 00:39:44.720
就這樣而已

00:39:44.720 --> 00:39:47.360
所以原來的數字精準度是不夠的

00:39:47.360 --> 00:39:51.760
所以後來我們還是得要在GPU裡面加這個浮點運算

00:39:51.760 --> 00:39:53.040
這也是某種程度

00:39:53.040 --> 00:39:55.200
為什麼NVIDIA的處理器那麼大

00:39:55.200 --> 00:39:58.560
因為其實我們的腦子沒那麼好

00:39:58.560 --> 00:40:01.440
就是說我在做很高數值的懲罰

00:40:01.440 --> 00:40:02.720
我們要算很久

00:40:02.720 --> 00:40:04.880
但是我們一看這是一瓶水

00:40:04.880 --> 00:40:06.080
這是可口可樂

00:40:06.080 --> 00:40:07.440
一看就知道了

00:40:07.440 --> 00:40:08.800
因為做這種事情

00:40:08.800 --> 00:40:11.840
本來就不需要很高數值精度的東西

00:40:11.840 --> 00:40:15.040
所以其實我們自己的處理器裡面就是

00:40:15.040 --> 00:40:17.520
8個bit、10個bit、16個bit都可以用

00:40:17.520 --> 00:40:19.760
其實不要浮點數了

00:40:19.760 --> 00:40:22.560
所以因此你這樣子又省很多電嘛

00:40:22.560 --> 00:40:25.360
這些事情就是特別的workflow

00:40:25.360 --> 00:40:27.120
可以讓你變有效率的

00:40:27.120 --> 00:40:28.240
其實我對於這個

00:40:28.240 --> 00:40:30.000
因為你也在NVIDIA工作過

00:40:30.000 --> 00:40:32.320
我們對於這個最高運算的這個霸主

00:40:32.320 --> 00:40:33.760
對

00:40:33.760 --> 00:40:35.200
你有什麼想法嗎

00:40:35.200 --> 00:40:37.680
就是我們現在CPU還有機會嗎

00:40:37.680 --> 00:40:39.120
因為Intel一直想要打進來

00:40:39.120 --> 00:40:40.080
他們還有機會嗎

00:40:40.080 --> 00:40:41.840
我們先講文化的問題啦

00:40:41.840 --> 00:40:45.040
你去這幾個公司繞一繞

00:40:45.040 --> 00:40:47.600
那你就大概可以決定你想去哪個公司工作

00:40:47.600 --> 00:40:48.240
真的

00:40:48.240 --> 00:40:50.080
我覺得就是有點可惜啦

00:40:50.080 --> 00:40:51.600
因為Intel我以前待過

00:40:51.600 --> 00:40:52.960
剛顧問啊什麼

00:40:52.960 --> 00:40:54.320
我做過一些project

00:40:54.320 --> 00:40:56.640
以前有一個在去那邊當實習生嘛

00:40:56.640 --> 00:40:58.640
那賺錢 賺旅費

00:40:58.640 --> 00:40:59.680
賺學費啊

00:40:59.680 --> 00:41:02.080
那我們那時候做一個project叫OpenCV

00:41:02.080 --> 00:41:04.480
OpenCV就是第一版的時候有那個

00:41:04.480 --> 00:41:06.560
人臉辮子還是用古代的方法

00:41:06.560 --> 00:41:07.760
那時候在Intel嘛

00:41:07.760 --> 00:41:08.720
我覺得還蠻progressive

00:41:08.720 --> 00:41:10.240
所以OpenCV是Intel做的

00:41:10.240 --> 00:41:12.400
對 但是那個比較像是

00:41:12.400 --> 00:41:14.400
裡面一些研究員就做做做啦

00:41:14.400 --> 00:41:16.960
因為在我念書的那個時候

00:41:16.960 --> 00:41:18.640
所有視覺都是用OpenCV啊

00:41:18.640 --> 00:41:21.280
你做那個什麼攝影機校正那些東西啊

00:41:21.280 --> 00:41:22.640
電視裡面有一些

00:41:22.640 --> 00:41:24.400
因為我研究所要做的那個project就是

00:41:24.400 --> 00:41:25.360
因為我是土木系的

00:41:25.360 --> 00:41:27.440
然後我們想要做那個無人工地

00:41:27.440 --> 00:41:29.120
所以就要做一個機器人

00:41:29.120 --> 00:41:30.080
自動去搬水管

00:41:30.080 --> 00:41:32.320
然後搬到那個位置這樣子

00:41:32.320 --> 00:41:33.520
你需要認水管嗎

00:41:33.520 --> 00:41:35.120
OpenCV認水管認不出來

00:41:35.120 --> 00:41:37.040
還好 因為我們有做一些mark

00:41:37.040 --> 00:41:38.160
OK OK

00:41:38.160 --> 00:41:40.080
所以你用那個什麼FIDUCIO啊

00:41:40.080 --> 00:41:41.360
對對對

00:41:41.360 --> 00:41:42.320
合理合理合理

00:41:42.320 --> 00:41:43.920
對對 因為edge detector

00:41:43.920 --> 00:41:45.040
對對對

00:41:45.040 --> 00:41:45.840
理解理解

00:41:45.840 --> 00:41:46.320
對啊

00:41:46.320 --> 00:41:48.400
所以Intel那個時候你說

00:41:48.400 --> 00:41:49.440
好 你們一開始做了這個

00:41:49.440 --> 00:41:51.280
但是那個文化又是怎麼樣呢

00:41:51.280 --> 00:41:54.080
我不大想越足代跑

00:41:54.080 --> 00:41:56.720
是comment別人的公司的狀況

00:41:56.720 --> 00:41:58.720
我剛剛講的是說你去看看

00:41:58.720 --> 00:42:01.760
然後看決定你自己會想去工作

00:42:01.760 --> 00:42:02.560
這個狀況

00:42:02.560 --> 00:42:05.120
會長期的決定這公司強不強

00:42:05.120 --> 00:42:07.920
就是如果大家都不想去那邊工作

00:42:07.920 --> 00:42:09.120
或是你認識同學們

00:42:09.120 --> 00:42:10.000
沒有人想去工作

00:42:10.000 --> 00:42:11.680
長期來他就不強

00:42:11.680 --> 00:42:13.360
但是這個要一點時間

00:42:13.360 --> 00:42:16.640
就人才的斷層不是馬上就來的

00:42:16.640 --> 00:42:17.440
他是開發嘛

00:42:17.440 --> 00:42:19.120
他不是例如說一個工廠

00:42:19.120 --> 00:42:20.320
沒有工人就停工

00:42:20.320 --> 00:42:21.200
不大一樣

00:42:21.200 --> 00:42:25.360
但我覺得假設最高算力的霸主要挑戰

00:42:25.360 --> 00:42:27.840
比較麻煩的是軟體需要很多時間

00:42:27.840 --> 00:42:28.720
當然也要錢

00:42:28.720 --> 00:42:29.760
但是需要時間

00:42:29.760 --> 00:42:31.040
時間大概就是說

00:42:31.040 --> 00:42:35.040
軟體這是一個很漫長的產品開發過程

00:42:35.040 --> 00:42:37.040
那像ENV這種公司

00:42:37.040 --> 00:42:39.600
它有很多人在寫工具

00:42:39.600 --> 00:42:42.400
在跟programmer做溝通

00:42:42.400 --> 00:42:43.680
Apple叫Evangelist

00:42:43.680 --> 00:42:46.400
那它這個就是叫做Developer Relations

00:42:46.400 --> 00:42:47.680
跟這些人做溝通

00:42:47.680 --> 00:42:49.920
那我以前也幫過這些嘛

00:42:49.920 --> 00:42:51.120
就是舉個例子

00:42:51.120 --> 00:42:52.800
我們有一個遊戲跑不快

00:42:52.800 --> 00:42:53.840
那是很重要

00:42:53.840 --> 00:42:55.840
你一賣Matchbox出來

00:42:55.840 --> 00:42:56.640
跑分很差

00:42:56.640 --> 00:42:58.560
就沒人要買這個繪圖卡了

00:42:58.560 --> 00:42:59.680
所以你怎麼辦呢

00:42:59.680 --> 00:43:02.160
你就是去找人家找這些寫遊戲的

00:43:02.160 --> 00:43:04.320
說我有一個新的那個API

00:43:04.320 --> 00:43:05.040
你要不要用

00:43:05.040 --> 00:43:06.800
人家說我是為什麼要用你的

00:43:06.800 --> 00:43:08.400
對 我不想特別寫給你啦

00:43:08.400 --> 00:43:09.680
我也要用AMD啦

00:43:09.680 --> 00:43:11.360
ATI的可以

00:43:11.360 --> 00:43:13.360
所以你要有點拜託他

00:43:13.360 --> 00:43:13.760
對不對

00:43:13.760 --> 00:43:15.360
你要有各種不同的方法

00:43:15.360 --> 00:43:17.040
讓它的應用

00:43:17.040 --> 00:43:19.600
可以跑在你最新的介面上面

00:43:19.600 --> 00:43:21.360
那這邊就有各種不同的手段

00:43:21.360 --> 00:43:22.800
對不對 威脅利誘

00:43:22.800 --> 00:43:23.440
不要講威脅

00:43:23.440 --> 00:43:24.240
可能沒有威脅啦

00:43:24.240 --> 00:43:24.800
我不知道

00:43:24.800 --> 00:43:25.840
這大概是

00:43:25.840 --> 00:43:26.480
對

00:43:26.480 --> 00:43:27.120
但是就是說

00:43:27.120 --> 00:43:28.400
例如說我們幫你寫程式

00:43:28.400 --> 00:43:29.280
也有可能啊

00:43:29.280 --> 00:43:30.960
我辦一些活動啊

00:43:30.960 --> 00:43:32.640
那那個請你會來啊

00:43:32.640 --> 00:43:33.920
然後來學習啊

00:43:33.920 --> 00:43:35.680
這些事情讓

00:43:35.680 --> 00:43:38.560
這一個處理器有很多開發者

00:43:38.560 --> 00:43:40.800
那開發者移動是很慢的

00:43:40.800 --> 00:43:43.280
這個Ecosystem好像建起來比較難

00:43:43.280 --> 00:43:45.040
對 我覺得主要是開發者

00:43:45.040 --> 00:43:46.880
那你就來看看說

00:43:46.880 --> 00:43:48.400
那其他也買不買得到

00:43:48.400 --> 00:43:50.480
類似的Domain的應用

00:43:50.480 --> 00:43:51.840
所以其他公司就更多

00:43:51.840 --> 00:43:53.280
這讓我想到就是

00:43:53.280 --> 00:43:54.480
就也是最近的啦

00:43:54.480 --> 00:43:55.440
因為我們在一開始

00:43:55.440 --> 00:43:56.960
在學Machine Learning的時候

00:43:56.960 --> 00:43:58.080
然後都會用一本教科書

00:43:58.080 --> 00:43:58.560
就是這個

00:43:58.560 --> 00:44:01.040
Introduction to Statistical Learning

00:44:01.040 --> 00:44:01.680
對

00:44:01.680 --> 00:44:02.800
就我一開始研究所的時候

00:44:02.800 --> 00:44:04.080
也是拿這本書

00:44:04.080 --> 00:44:05.760
然後它的範例是R

00:44:05.760 --> 00:44:07.200
因為在10年前

00:44:07.200 --> 00:44:07.920
大家都會說

00:44:07.920 --> 00:44:09.920
反正學術圈Machine Learning就是用R

00:44:09.920 --> 00:44:10.640
對

00:44:10.640 --> 00:44:13.680
可是這本書到了今年7月1號

00:44:13.680 --> 00:44:14.960
它出Python版

00:44:14.960 --> 00:44:15.760
對

00:44:15.760 --> 00:44:16.800
然後我就發現說

00:44:16.800 --> 00:44:17.520
有點慢

00:44:17.520 --> 00:44:18.720
怎麼撐這麼久

00:44:18.720 --> 00:44:22.720
明明出來以後你就發現說

00:44:22.720 --> 00:44:24.400
用R的人越來越少

00:44:24.400 --> 00:44:25.680
以前還會說什麼

00:44:25.680 --> 00:44:27.520
就是你比較偏工程的

00:44:27.520 --> 00:44:28.240
你會用Python

00:44:28.240 --> 00:44:29.680
可是你可能單純視覺化

00:44:29.680 --> 00:44:31.120
科學家們要用R嘛

00:44:31.120 --> 00:44:31.600
對不對

00:44:31.600 --> 00:44:32.960
你後來發現說沒有啊

00:44:32.960 --> 00:44:34.320
你看那些Google的人

00:44:34.320 --> 00:44:35.600
他們也全部都用Python啊

00:44:35.600 --> 00:44:36.640
對啊

00:44:36.640 --> 00:44:37.280
然後就發現說

00:44:37.280 --> 00:44:38.480
已經Python這麼久了

00:44:38.480 --> 00:44:39.760
結果這本教科書

00:44:39.760 --> 00:44:40.800
現在才開始出Python

00:44:40.800 --> 00:44:41.200
是啊

00:44:41.200 --> 00:44:41.840
對 就發現說

00:44:41.840 --> 00:44:43.200
真的像你剛剛講的

00:44:43.200 --> 00:44:45.600
這種軟體工程師的群

00:44:45.600 --> 00:44:46.640
你要換一個語言

00:44:46.640 --> 00:44:47.120
對他們來說

00:44:47.120 --> 00:44:48.400
真的就是換一個國家

00:44:48.400 --> 00:44:49.280
換一個什麼

00:44:49.280 --> 00:44:51.280
對 我覺得這是有趣啦

00:44:51.280 --> 00:44:53.280
而且不是一個人去換的

00:44:53.280 --> 00:44:55.120
我覺得你說會寫R

00:44:55.120 --> 00:44:56.160
可能會寫Python

00:44:56.160 --> 00:44:56.960
會寫C

00:44:56.960 --> 00:44:57.520
C++

00:44:57.520 --> 00:44:58.480
這Overlap是滿

00:44:58.480 --> 00:45:00.640
但是大家有自己喜歡

00:45:00.640 --> 00:45:02.320
跟手感的東西

00:45:02.320 --> 00:45:04.320
我是那個中年阿伯

00:45:04.320 --> 00:45:05.600
所以沒有Compiler

00:45:05.600 --> 00:45:06.640
沒有編譯器的東西

00:45:06.640 --> 00:45:07.440
我都不舒服

00:45:07.440 --> 00:45:10.320
沒有跟我講這是整數或是伏點數

00:45:10.320 --> 00:45:11.360
我有一點不舒服

00:45:11.760 --> 00:45:14.720
人有一個不同的喜歡跟慣性

00:45:14.720 --> 00:45:17.200
這個編輯器要按個R2才可以打字

00:45:17.200 --> 00:45:18.400
這我覺得很習慣

00:45:18.400 --> 00:45:21.040
對 每個人不一樣

00:45:21.040 --> 00:45:21.760
這個

00:45:21.760 --> 00:45:22.480
每個人不一樣

00:45:22.480 --> 00:45:24.880
所以我覺得這個沒有辦法啦

00:45:24.880 --> 00:45:27.200
那大家有喜好的原因以外

00:45:27.200 --> 00:45:30.080
我覺得是語言本身外圍的Community

00:45:30.080 --> 00:45:30.800
對不對

00:45:30.800 --> 00:45:32.800
例如說你有很多Framework可以用

00:45:32.800 --> 00:45:35.200
還有很多Framework的Framework

00:45:35.200 --> 00:45:36.320
架在這個上面

00:45:36.320 --> 00:45:37.600
那它就會越來越大

00:45:37.600 --> 00:45:39.920
所以這個其實是滿有趣的

00:45:39.920 --> 00:45:41.200
一直都有不同的校長

00:45:41.760 --> 00:45:42.480
了解了解

00:45:42.480 --> 00:45:44.240
那也有那種語言

00:45:44.240 --> 00:45:45.600
大家就一直都很討厭的

00:45:45.600 --> 00:45:47.440
像什麼

00:45:47.440 --> 00:45:48.080
不好說

00:45:48.080 --> 00:45:49.520
Pearl好了

00:45:49.520 --> 00:45:50.480
我應該選到Pearl

00:45:50.480 --> 00:45:52.480
我以前那個

00:45:52.480 --> 00:45:53.280
它有那個叫什麼

00:45:53.280 --> 00:45:54.320
Natural Expression

00:45:54.320 --> 00:45:55.600
好 那我們那個

00:45:55.600 --> 00:45:56.560
前輩就有跟我說

00:45:56.560 --> 00:45:59.120
這個Pearl真的是一個髒話版的語言

00:45:59.120 --> 00:46:01.040
說連用的字都一樣

00:46:01.040 --> 00:46:02.000
金泰傲啊

00:46:02.000 --> 00:46:03.360
那個圈圈叉叉

00:46:03.360 --> 00:46:04.880
那個語言用的符號

00:46:04.880 --> 00:46:06.560
跟它髒話很像這樣

00:46:06.560 --> 00:46:08.720
如果大家沒有聽過有人在講Pearl很棒

00:46:08.720 --> 00:46:09.600
就是

00:46:09.600 --> 00:46:10.480
只有說很習慣

00:46:10.480 --> 00:46:11.440
沒有說它很棒

00:46:11.440 --> 00:46:12.240
對

00:46:12.240 --> 00:46:14.560
有些東西你可以覺得好用

00:46:14.560 --> 00:46:15.600
但是不喜歡

00:46:15.600 --> 00:46:18.000
我覺得它有點像是這種東西

00:46:18.000 --> 00:46:18.960
對 -了解了解

00:46:18.960 --> 00:46:20.000
就Python也是啊

00:46:20.000 --> 00:46:22.240
對 大家都會說你一種東西有十幾種寫法

00:46:22.240 --> 00:46:23.120
到底是什麼意思

00:46:23.120 --> 00:46:24.640
這才是語言嘛

00:46:24.640 --> 00:46:26.560
要不然就是那個工具啦

00:46:26.560 --> 00:46:26.960
對不對

00:46:26.960 --> 00:46:28.560
你是這種派別的

00:46:28.560 --> 00:46:30.000
對 就是那個

00:46:30.000 --> 00:46:30.880
自由表述

00:46:30.880 --> 00:46:32.800
是啊 就一個鐵鎚就有一根棍子

00:46:32.800 --> 00:46:34.240
你就拿那個把手來敲

00:46:34.240 --> 00:46:35.680
沒什麼其他的選擇

00:46:35.680 --> 00:46:36.720
那就是工具

00:46:36.720 --> 00:46:40.080
那這種工具是可以改定義流程的

00:46:40.080 --> 00:46:41.520
但是它就比較不像語言

00:46:41.520 --> 00:46:42.000
對不對

00:46:42.000 --> 00:46:44.240
語言會有一種自由度

00:46:44.240 --> 00:46:46.400
在這自由度你就有一種創作感

00:46:46.400 --> 00:46:47.680
對不對

00:46:47.680 --> 00:46:49.520
你就不會覺得說我是工具人

00:46:49.520 --> 00:46:50.080
對啊

00:46:50.080 --> 00:46:51.040
還蠻誇張的

00:46:51.040 --> 00:46:53.360
我寫的時候怎麼都沒有想那麼多

00:46:53.360 --> 00:46:54.400
對

00:46:54.400 --> 00:46:55.200
會動就好了

00:46:55.200 --> 00:46:55.840
真的

00:46:55.840 --> 00:46:56.960
讓我動起來 拜託

00:46:56.960 --> 00:46:58.640
好 不會動

00:46:58.640 --> 00:46:59.600
可以哦

00:46:59.600 --> 00:47:00.560
你做一個馬農

00:47:00.560 --> 00:47:02.320
你總要覺得是自己做的東西

00:47:02.320 --> 00:47:03.600
是一個美感的東西

00:47:03.600 --> 00:47:04.080
對不對

00:47:04.080 --> 00:47:04.720
你總不能

00:47:04.720 --> 00:47:05.760
我還沒有到那個境界

00:47:05.760 --> 00:47:06.320
對

00:47:06.320 --> 00:47:07.680
你不想要就是覺得說

00:47:07.680 --> 00:47:08.960
這個是一個工具

00:47:08.960 --> 00:47:09.760
一一動一動

00:47:09.760 --> 00:47:10.960
那時候你就覺得

00:47:10.960 --> 00:47:12.800
自己比較像是在上工

00:47:12.800 --> 00:47:14.160
而不是在創作

00:47:14.160 --> 00:47:15.760
就這種東西交給H.H.P.就好了

00:47:15.760 --> 00:47:17.120
對

00:47:17.120 --> 00:47:18.400
這個太難了

00:47:18.400 --> 00:47:19.360
就沒有這種

00:47:19.360 --> 00:47:20.800
沒有你的個人風格在裡面

00:47:20.800 --> 00:47:21.120
是

00:47:21.120 --> 00:47:21.680
對嗎

00:47:21.680 --> 00:47:22.160
對不對

00:47:22.160 --> 00:47:24.640
我的Tabs要三個space

00:47:24.640 --> 00:47:25.920
跟你不一樣

00:47:25.920 --> 00:47:29.440
我覺得我們今天的訪問有點

00:47:29.440 --> 00:47:30.320
往太宅的方向

00:47:30.320 --> 00:47:30.960
太tech是不是

00:47:30.960 --> 00:47:32.240
不會

00:47:32.240 --> 00:47:32.800
不會

00:47:32.800 --> 00:47:34.960
所以可能聽眾可能會不下架

00:47:34.960 --> 00:47:36.480
我們聽眾很多竹科的

00:47:36.480 --> 00:47:37.280
真的

00:47:37.280 --> 00:47:38.080
很多城市的

00:47:38.400 --> 00:47:40.320
他們可能聽到這個題目會很生氣

00:47:40.320 --> 00:47:42.000
三個Tabs

00:47:42.000 --> 00:47:43.360
三個space

00:47:43.360 --> 00:47:44.160
什麼東西

00:47:44.160 --> 00:47:45.600
我給你解

00:47:45.600 --> 00:47:48.160
我現在的迷思我不會接受

00:47:48.160 --> 00:47:49.440
真的

00:47:49.440 --> 00:47:50.960
等一下出去就會跟我們工程師吵架

00:47:50.960 --> 00:47:52.720
有沒有搞錯

00:47:52.720 --> 00:47:54.320
其實我覺得這個滿好玩的

00:47:54.320 --> 00:47:56.080
工程師有自己的奇怪的事情

00:47:56.080 --> 00:47:58.880
像我之前設計一個NVIDIA處理器

00:47:58.880 --> 00:47:59.760
中間有一個buffer

00:47:59.760 --> 00:48:01.200
然後那個buffer

00:48:01.200 --> 00:48:02.320
要定義它多大

00:48:02.320 --> 00:48:04.080
我就寫了一個層次

00:48:04.080 --> 00:48:05.840
因為做太小會卡住

00:48:05.840 --> 00:48:07.040
做太大會很貴

00:48:07.600 --> 00:48:09.040
然後我記得那時候的數字

00:48:09.040 --> 00:48:10.160
好像一個奇怪的數字

00:48:10.160 --> 00:48:11.600
什麼376這種東西

00:48:11.600 --> 00:48:13.440
那我就說這太好了

00:48:13.440 --> 00:48:15.360
我就去present說這個buffer

00:48:15.360 --> 00:48:17.280
確切數字我不是很確定

00:48:17.280 --> 00:48:18.240
但是一個奇怪的數字

00:48:18.240 --> 00:48:20.160
像376這種數字

00:48:20.160 --> 00:48:21.520
結果那個下面的人

00:48:21.520 --> 00:48:22.880
聽我在講這個設計的人

00:48:22.880 --> 00:48:23.920
全部都覺得我的騙人

00:48:23.920 --> 00:48:24.960
為什麼

00:48:24.960 --> 00:48:26.160
一定是2的密次

00:48:26.160 --> 00:48:27.280
128+256

00:48:27.280 --> 00:48:28.800
對不對

00:48:28.800 --> 00:48:30.640
128+256我還可以接受

00:48:30.640 --> 00:48:31.520
對不對

00:48:31.520 --> 00:48:32.240
那是什麼東西

00:48:32.240 --> 00:48:32.880
這就不對

00:48:32.880 --> 00:48:34.480
好玩

00:48:34.480 --> 00:48:36.960
剛剛有提到一個東西

00:48:36.960 --> 00:48:38.240
我想再追問一下

00:48:38.240 --> 00:48:40.480
就是在這種ecosystem

00:48:40.480 --> 00:48:41.680
因為現在的霸主就是NVIDIA

00:48:41.680 --> 00:48:41.920
對不對

00:48:41.920 --> 00:48:43.520
它非常非常強的霸主

00:48:43.520 --> 00:48:46.160
你覺得它做了什麼樣的事情

00:48:46.160 --> 00:48:48.560
在維持它的這個競爭優勢

00:48:48.560 --> 00:48:49.360
不停的做

00:48:49.360 --> 00:48:50.080
就是不停的做

00:48:50.080 --> 00:48:51.120
就是不停的做

00:48:51.120 --> 00:48:53.600
那Intel為什麼失去了呢

00:48:53.600 --> 00:48:54.160
沒在做

00:48:54.160 --> 00:48:55.280
真的嗎

00:48:55.280 --> 00:48:56.160
對 其實我覺得

00:48:56.160 --> 00:48:58.080
其實如果你這樣子想

00:48:58.080 --> 00:48:59.360
簡單的來說就是

00:48:59.360 --> 00:49:01.120
software defined的事情

00:49:01.120 --> 00:49:02.480
比以前越來越嚴重

00:49:02.480 --> 00:49:04.480
你有那種像Google這種

00:49:04.480 --> 00:49:06.640
almost always software defined

00:49:06.640 --> 00:49:08.080
那你也有像Intel那個

00:49:08.080 --> 00:49:09.680
幾乎就是always defined

00:49:09.680 --> 00:49:11.600
然後我覺得

00:49:11.600 --> 00:49:13.600
你如果說你的大環境

00:49:13.600 --> 00:49:14.720
就是你的workload

00:49:14.720 --> 00:49:17.520
你的處理器在執行的東西

00:49:17.520 --> 00:49:20.240
如果跟著時代一直在變動

00:49:20.240 --> 00:49:23.280
那你就必須要投資很多在軟體上面

00:49:23.280 --> 00:49:24.000
是

00:49:24.000 --> 00:49:25.200
但是你的大環境

00:49:25.200 --> 00:49:27.600
譬如說你的指令集都叫X86

00:49:27.600 --> 00:49:30.080
30年都叫X86

00:49:30.080 --> 00:49:32.960
那你在上面的投資就變成option

00:49:32.960 --> 00:49:33.680
可有可無

00:49:33.680 --> 00:49:34.880
對不對

00:49:35.280 --> 00:49:38.000
但是你說從像NVIDIA這種處理器

00:49:38.000 --> 00:49:39.200
5年前的處理器

00:49:39.200 --> 00:49:40.320
跟5年後的處理器

00:49:40.320 --> 00:49:42.240
它都不是一樣的指令集

00:49:42.240 --> 00:49:43.680
所以你怎麼辦

00:49:43.680 --> 00:49:46.160
你一定有一個軟體層會去做翻譯

00:49:46.160 --> 00:49:47.600
對不對

00:49:47.600 --> 00:49:49.680
所以這個翻譯的結果就是

00:49:49.680 --> 00:49:51.200
你必須要一直維持這種

00:49:51.200 --> 00:49:53.760
譬如說各個不同處理器的相容性

00:49:53.760 --> 00:49:55.280
這些東西

00:49:55.280 --> 00:49:56.400
這次是很昂貴的

00:49:56.400 --> 00:49:59.520
所以你公司執行方向就會不大一樣

00:49:59.520 --> 00:50:00.880
所以那我覺得我們現在

00:50:00.880 --> 00:50:02.640
自己做的這個Edge處理器

00:50:02.640 --> 00:50:03.760
有點像是這樣

00:50:03.760 --> 00:50:05.680
就是說你看到以前

00:50:05.680 --> 00:50:07.440
你要做一個處理器很困難

00:50:07.440 --> 00:50:07.840
是

00:50:07.840 --> 00:50:08.240
為什麼

00:50:08.240 --> 00:50:09.440
因為有一個X86

00:50:09.440 --> 00:50:10.080
卡在哪裡

00:50:10.080 --> 00:50:12.560
你沒有任何理由要買其他的東西

00:50:12.560 --> 00:50:15.360
但是你看現在有各種不同的workflow

00:50:15.360 --> 00:50:16.400
不同的form factor

00:50:16.400 --> 00:50:17.760
要塞到不同的處理器

00:50:17.760 --> 00:50:20.720
那它如果說在這些地方

00:50:20.720 --> 00:50:23.360
大家開發的需求又沒有那麼強

00:50:23.360 --> 00:50:26.800
那我覺得你可以做一個特製的處理器去處理它

00:50:26.800 --> 00:50:29.600
你覺得這個東西它會再回來嗎

00:50:29.600 --> 00:50:30.800
因為到時候大家會不會又覺得說

00:50:30.800 --> 00:50:32.320
哇 我可能要做一個產品

00:50:32.320 --> 00:50:34.480
我要懂一大堆的指令集

00:50:34.480 --> 00:50:35.680
我不如就懂一個就好了

00:50:35.680 --> 00:50:37.680
對 所以這個我覺得就是有趣

00:50:37.680 --> 00:50:39.680
就是看你軟體硬體怎麼協作

00:50:39.680 --> 00:50:41.120
開發了這個東西

00:50:41.120 --> 00:50:42.320
其實你就想好

00:50:42.320 --> 00:50:44.800
那回到我剛剛講再生轉世的概念

00:50:44.800 --> 00:50:46.480
我們現在就先假設

00:50:46.480 --> 00:50:48.800
我有固定的錢可以花在一個地方

00:50:48.800 --> 00:50:50.240
例如說剛剛的例子

00:50:50.240 --> 00:50:51.120
我有一個攝影機

00:50:51.120 --> 00:50:53.120
攝影機上面有一個

00:50:53.120 --> 00:50:56.240
那個CCD旁邊有一個什麼傳輸的那些東西

00:50:56.240 --> 00:50:58.320
你就只能花固定的錢在身上

00:50:59.040 --> 00:51:03.200
那你原來花的錢只能買幾個電競體對不對

00:51:03.200 --> 00:51:05.120
現在搞不好可以買一個小處理器

00:51:05.120 --> 00:51:08.160
那這個到底你那個錢要拿去做什麼

00:51:08.160 --> 00:51:10.560
因為到最後你那邊錢都不花

00:51:10.560 --> 00:51:12.480
你到最後最貴的那個殼

00:51:12.480 --> 00:51:14.080
你贏不了別人對不對

00:51:14.080 --> 00:51:15.680
所以裡面塞一些運算好了

00:51:15.680 --> 00:51:16.880
塞一些運算要做什麼

00:51:16.880 --> 00:51:18.720
那因為那個電路微型的話

00:51:18.720 --> 00:51:19.600
你就有可能

00:51:19.600 --> 00:51:20.800
你知道這個

00:51:20.800 --> 00:51:22.800
原來這麼大的面積這個budget

00:51:22.800 --> 00:51:24.720
在那邊原來不是什麼東西

00:51:24.720 --> 00:51:26.560
那它有可能到一個點之後

00:51:26.560 --> 00:51:28.160
那那個其實可以塞個處理器

00:51:28.960 --> 00:51:29.520
對吧

00:51:29.520 --> 00:51:30.720
效能大幅提升

00:51:30.720 --> 00:51:32.320
對啊所以你看手機就一個例子

00:51:32.320 --> 00:51:35.920
你看它原來有一個耗電量的控制對不對

00:51:35.920 --> 00:51:37.760
那那個耗電量不大變的狀況

00:51:37.760 --> 00:51:38.880
或是變小的狀況

00:51:38.880 --> 00:51:40.800
我的那個摸的定律上

00:51:40.800 --> 00:51:42.800
你的處理器可以塞進去

00:51:42.800 --> 00:51:44.960
所以原來打打電話

00:51:44.960 --> 00:51:47.440
寄20個電話在裡面就了不起了

00:51:47.440 --> 00:51:48.880
寄50個電話

00:51:48.880 --> 00:51:50.080
寄128個電話

00:51:50.080 --> 00:51:52.640
到最後可以吃個彈吃蛇還不錯

00:51:52.640 --> 00:51:53.680
但是它的固定

00:51:53.680 --> 00:51:54.800
它的budget不大變的

00:51:54.800 --> 00:51:56.560
就是那個耗能啊

00:51:56.560 --> 00:51:58.720
跟那個它的花的錢

00:51:58.720 --> 00:52:00.880
不會動得那麼快

00:52:00.880 --> 00:52:03.280
但是你可以做的事情會增加

00:52:03.280 --> 00:52:05.760
所以我覺得這個是主要的關鍵

00:52:05.760 --> 00:52:08.320
因為我們技術在進步的時候

00:52:08.320 --> 00:52:10.320
它就會造成這種滿足偏移

00:52:10.320 --> 00:52:12.080
那你怎麼看這個摸的定律

00:52:12.080 --> 00:52:13.680
摸的定律有點像

00:52:13.680 --> 00:52:15.600
他們叫self-fulfilling prophecy

00:52:15.600 --> 00:52:16.240
對不對

00:52:16.240 --> 00:52:17.520
self-fulfilling prophecy

00:52:17.520 --> 00:52:20.400
就是例如說以色列人會建國這種事情

00:52:20.400 --> 00:52:23.520
我不說盛行對或不對

00:52:23.520 --> 00:52:24.960
我們先不討論這個事情

00:52:24.960 --> 00:52:27.120
但是你認為它會是對的

00:52:27.120 --> 00:52:29.680
大家就得要跟著那條線去做

00:52:29.680 --> 00:52:31.600
就有些人說台積電之所以那麼成功

00:52:31.600 --> 00:52:32.960
就是台積電一直相信

00:52:32.960 --> 00:52:36.000
但Intel其實很久以前就開始想要

00:52:36.000 --> 00:52:36.960
做不到啊

00:52:36.960 --> 00:52:38.960
做不到它就說不相信

00:52:38.960 --> 00:52:40.480
你覺得哪個是因哪個是果

00:52:40.480 --> 00:52:42.880
所以這是self-fulfilling prophecy

00:52:42.880 --> 00:52:45.360
就是說因為有這個預言

00:52:45.360 --> 00:52:46.480
這個預言就會成真

00:52:46.480 --> 00:52:48.000
沒有這個預言它就不會成真

00:52:48.000 --> 00:52:49.920
當初它搞不好講比較高

00:52:49.920 --> 00:52:50.800
搞不好也會成功

00:52:50.800 --> 00:52:52.720
因為它也是一個

00:52:52.720 --> 00:52:53.680
我們叫heuristic

00:52:53.680 --> 00:52:55.040
一個經驗法則

00:52:55.040 --> 00:52:57.280
如果經驗法則它那時候歪斜一下

00:52:57.280 --> 00:52:58.240
跳得比較快

00:52:58.240 --> 00:53:01.120
搞不好你小時候就有iPhone 12可以用

00:53:01.120 --> 00:53:04.160
我可以不要玩快死蛇好棒

00:53:04.160 --> 00:53:05.920
對啊

00:53:05.920 --> 00:53:07.600
然後可能這一代就全部沉淪了

00:53:07.600 --> 00:53:09.920
因為大陸的

00:53:09.920 --> 00:53:10.880
對啊 所以一樣

00:53:10.880 --> 00:53:11.920
我覺得它還是一個

00:53:11.920 --> 00:53:13.040
self-fulfilling prophecy

00:53:13.040 --> 00:53:15.120
大家知道有一個目標在哪

00:53:15.120 --> 00:53:17.120
然後如果沒有超越

00:53:17.120 --> 00:53:18.320
或達到那個目標

00:53:18.320 --> 00:53:20.960
很容易我會在產業上被淘汰

00:53:20.960 --> 00:53:22.880
所以你覺得這個東西都是

00:53:22.880 --> 00:53:24.480
只要有心都可以做到

00:53:24.480 --> 00:53:25.600
人定勝天的概念

00:53:25.600 --> 00:53:26.240
但不是啦

00:53:26.240 --> 00:53:28.400
物理上面會有一些問題

00:53:28.400 --> 00:53:30.880
所以現在台積電就做3D

00:53:30.880 --> 00:53:32.800
我2D不夠了我就轉3D

00:53:32.800 --> 00:53:34.000
對 但是3D

00:53:34.000 --> 00:53:35.680
我覺得也不只是

00:53:35.680 --> 00:53:36.960
device微型化而已

00:53:36.960 --> 00:53:39.280
你當然3D可以跌得比2D還多

00:53:39.280 --> 00:53:42.000
Core這些東西都有

00:53:42.000 --> 00:53:43.520
今天可能不是重點講這個

00:53:43.520 --> 00:53:45.840
但是我覺得其實我之前跟

00:53:45.840 --> 00:53:47.600
做IC設計的人討論這個事情

00:53:47.600 --> 00:53:49.120
為什麼要3D的RAM

00:53:49.120 --> 00:53:50.720
大家也知道可以塞比較多設備

00:53:51.360 --> 00:53:53.520
其實有另外一個重點

00:53:53.520 --> 00:53:55.520
就是說這個我們以前讀書有講

00:53:55.520 --> 00:53:57.600
叫做computational order

00:53:57.600 --> 00:53:58.160
這怎麼講

00:53:58.160 --> 00:54:00.320
面積是長乘以寬

00:54:00.320 --> 00:54:02.240
假設是正方形

00:54:02.240 --> 00:54:04.240
面積就是長乘以寬

00:54:04.240 --> 00:54:05.360
就是平方

00:54:05.360 --> 00:54:07.680
但是邊長是長加寬

00:54:07.680 --> 00:54:09.840
所以你兩倍的場寬

00:54:09.840 --> 00:54:11.200
會變成四倍的面積

00:54:11.200 --> 00:54:13.840
中間面積幹什麼

00:54:13.840 --> 00:54:14.880
塞運算

00:54:14.880 --> 00:54:16.320
邊邊的收藏幹什麼

00:54:16.320 --> 00:54:17.280
塞資料進來

00:54:17.280 --> 00:54:18.960
所以你去看

00:54:18.960 --> 00:54:20.480
假設NVIDIA你去看好

00:54:20.480 --> 00:54:23.520
它過去20年的那個運算速度

00:54:23.520 --> 00:54:25.040
跟記憶體的速度

00:54:25.040 --> 00:54:26.160
運算看起來就很像

00:54:26.160 --> 00:54:27.760
N平方的線一直上去

00:54:27.760 --> 00:54:29.280
但是那個記憶體的速度

00:54:29.280 --> 00:54:30.720
就像一條直線一樣長

00:54:30.720 --> 00:54:33.120
所以這個是最

00:54:33.120 --> 00:54:35.040
對 這個就是最基礎的問題

00:54:35.040 --> 00:54:37.360
就是說資料如果只能從旁邊進來

00:54:37.360 --> 00:54:38.480
變成兩倍的晶片

00:54:38.480 --> 00:54:39.920
它是兩倍的速度

00:54:39.920 --> 00:54:41.280
但是變兩倍的晶片

00:54:41.280 --> 00:54:42.240
會有四倍的運算

00:54:42.240 --> 00:54:42.800
那怎麼辦

00:54:42.800 --> 00:54:44.800
所以不往3D跑怎麼辦

00:54:44.800 --> 00:54:46.560
比較近啊

00:54:46.560 --> 00:54:47.200
不是不是

00:54:47.200 --> 00:54:47.920
他的意思是

00:54:47.920 --> 00:54:48.640
比較近 對

00:54:48.640 --> 00:54:49.600
對啊 比較近啊

00:54:49.600 --> 00:54:50.560
而且可以有

00:54:50.560 --> 00:54:52.160
就是同時間可以傳的比較多

00:54:52.160 --> 00:54:53.200
它其實是背在上面

00:54:53.200 --> 00:54:54.960
那個其實就是我們之前提過那個

00:54:54.960 --> 00:54:56.000
Memory Wall

00:54:56.000 --> 00:54:57.440
就是你再怎麼算再怎麼快

00:54:57.440 --> 00:54:58.720
你就是會卡在

00:54:58.720 --> 00:54:59.840
Memory的速度

00:54:59.840 --> 00:55:00.560
但是你看

00:55:00.560 --> 00:55:02.160
我如果邊長變兩倍

00:55:02.160 --> 00:55:04.000
它就是一個叫N一個叫N平方

00:55:04.000 --> 00:55:05.360
你還是差一個N

00:55:05.360 --> 00:55:05.760
對

00:55:05.760 --> 00:55:06.800
但是我變立體了

00:55:06.800 --> 00:55:07.600
對啊

00:55:07.600 --> 00:55:09.120
立體的一樣的問題就是

00:55:09.120 --> 00:55:10.960
面積跟體積的問題

00:55:10.960 --> 00:55:11.440
對

00:55:11.440 --> 00:55:12.640
可是我至少變面積了

00:55:12.640 --> 00:55:14.000
一個N平方一個N三方

00:55:14.000 --> 00:55:15.120
對 還是差一個N

00:55:15.120 --> 00:55:15.600
對

00:55:15.600 --> 00:55:17.040
但是最少是說

00:55:17.040 --> 00:55:19.120
它在實際上的比例沒有差那麼多

00:55:19.600 --> 00:55:20.240
對吧

00:55:20.240 --> 00:55:21.360
因為它一個是N三方

00:55:21.360 --> 00:55:22.800
假設我是1000N三方

00:55:22.800 --> 00:55:23.920
對不對

00:55:23.920 --> 00:55:25.920
真的嗎 面積不是一樣嗎

00:55:25.920 --> 00:55:26.960
比例都是一個維度啊

00:55:26.960 --> 00:55:27.680
比例都是N

00:55:27.680 --> 00:55:29.120
但是我如果一樣

00:55:29.120 --> 00:55:30.320
N平方是1000

00:55:30.320 --> 00:55:30.880
對

00:55:30.880 --> 00:55:32.640
然後那個N是多少

00:55:32.640 --> 00:55:34.240
一個平方一個是N

00:55:34.240 --> 00:55:34.560
對啊

00:55:34.560 --> 00:55:34.960
一個30

00:55:34.960 --> 00:55:35.760
少一個啦

00:55:35.760 --> 00:55:36.640
那好像30倍啊

00:55:36.640 --> 00:55:38.400
我說比例的話不是差不多嗎

00:55:38.400 --> 00:55:39.760
這個是因為你到最後

00:55:39.760 --> 00:55:40.960
假設我一樣

00:55:40.960 --> 00:55:43.040
要達到假設1000的算力好了

00:55:43.040 --> 00:55:43.760
對

00:55:43.760 --> 00:55:45.120
那面積是1000

00:55:45.120 --> 00:55:46.880
它的邊長是差不多30左右

00:55:46.880 --> 00:55:48.240
它的倍數是30倍

00:55:48.240 --> 00:55:49.600
1000除以30

00:55:49.600 --> 00:55:50.240
30倍

00:55:50.240 --> 00:55:51.680
然後如果是立體的

00:55:51.680 --> 00:55:52.480
一個是1000

00:55:52.480 --> 00:55:53.040
對

00:55:53.040 --> 00:55:55.440
是體積

00:55:55.440 --> 00:55:56.880
但是面積就是100

00:55:56.880 --> 00:55:57.520
100 對

00:55:57.520 --> 00:55:58.560
所以差10倍而已啊

00:55:58.560 --> 00:55:59.440
對

00:55:59.440 --> 00:56:01.120
問題變小了

00:56:01.120 --> 00:56:02.160
對

00:56:02.160 --> 00:56:04.080
所以在相同算力的情況下面

00:56:04.080 --> 00:56:05.840
我可以有更多的資料傳輸

00:56:05.840 --> 00:56:06.800
沒錯

00:56:06.800 --> 00:56:08.480
更短距離更多資料傳輸

00:56:08.480 --> 00:56:09.120
對

00:56:09.120 --> 00:56:11.280
而且你從隔壁可以搬的資料越多

00:56:11.280 --> 00:56:13.520
那如果資料等的時間少

00:56:13.520 --> 00:56:16.240
那處理器就比較不會叫20

00:56:16.240 --> 00:56:17.440
stop motion

00:56:17.440 --> 00:56:18.720
我們在運算裡面

00:56:18.720 --> 00:56:20.240
在這個狀況你看

00:56:20.240 --> 00:56:22.240
如果你的問題需要很多資料

00:56:22.240 --> 00:56:24.960
那我有n平方的算力在裡面等著

00:56:24.960 --> 00:56:26.960
外面只有n的資料進來

00:56:26.960 --> 00:56:28.160
它很容易二傻

00:56:28.160 --> 00:56:28.960
對

00:56:28.960 --> 00:56:30.880
所以現在大部分處理器

00:56:30.880 --> 00:56:32.400
都是在安排

00:56:32.400 --> 00:56:33.680
誰什麼時候要做什麼

00:56:33.680 --> 00:56:34.880
這是最大的問題

00:56:34.880 --> 00:56:36.320
這是最大的問題

00:56:36.320 --> 00:56:37.120
所以你看

00:56:37.120 --> 00:56:39.360
新的NVIDIA處理器不是搞一大顆嗎

00:56:39.360 --> 00:56:41.120
那很多連線嗎 幹嘛啦

00:56:41.120 --> 00:56:42.800
那remote DMA這些東西

00:56:42.800 --> 00:56:44.480
它是為了要處理資料問題

00:56:44.480 --> 00:56:47.040
所以像現在我們在講NVIDIA的

00:56:47.040 --> 00:56:48.080
大概幾個BIT

00:56:48.080 --> 00:56:50.000
其他都已經不只是單純的GPU

00:56:50.000 --> 00:56:51.040
GPU就是一點點

00:56:51.040 --> 00:56:52.800
其他有很多就是怎麼BIT怎麼BIT

00:56:52.800 --> 00:56:53.920
你覺得這個東西的會是

00:56:53.920 --> 00:56:55.040
未來都會長這個樣子嗎

00:56:55.040 --> 00:56:56.560
因為我怎麼BIT怎麼BIT

00:56:56.560 --> 00:56:57.920
其實就牽扯到剛剛的

00:56:57.920 --> 00:56:58.800
怎麼處理啊

00:56:58.800 --> 00:56:59.600
哪一個線啊

00:56:59.600 --> 00:57:00.960
或者是我的距離怎麼樣

00:57:00.960 --> 00:57:02.960
對啊 所以我覺得高速運算

00:57:02.960 --> 00:57:03.920
現在你看

00:57:03.920 --> 00:57:06.320
你一定要把資料的password

00:57:06.320 --> 00:57:07.360
弄到很短

00:57:07.360 --> 00:57:10.080
那要不然就是把問題切得很乾淨

00:57:10.080 --> 00:57:12.800
讓兩個處理器不要一起打架

00:57:12.800 --> 00:57:14.800
我要這個資料跟你資料分開

00:57:14.800 --> 00:57:15.920
所以你們現在做的比較像

00:57:15.920 --> 00:57:16.960
桌子的那個樣子

00:57:16.960 --> 00:57:21.040
對 但是我們的數量其實有點不一樣

00:57:21.040 --> 00:57:23.120
那我們大部分狀況來說

00:57:23.120 --> 00:57:24.400
我們自己的應用

00:57:24.400 --> 00:57:26.400
可以把模型縮到很小

00:57:26.400 --> 00:57:29.920
然後把運算也做得很特別的特用

00:57:29.920 --> 00:57:31.920
但這樣其實就是切得很乾淨的概念嗎

00:57:31.920 --> 00:57:33.520
對 一個也是切得很乾淨

00:57:33.520 --> 00:57:36.160
但主要其實我們的處理器有效率

00:57:36.160 --> 00:57:38.160
跟我們做的事情

00:57:38.160 --> 00:57:40.080
比較沒那麼多樣是有關係

00:57:40.080 --> 00:57:43.760
就我如果一個泛用型的機器

00:57:43.760 --> 00:57:45.600
它能做很多事情

00:57:45.600 --> 00:57:48.160
例如說會游泳的機器人

00:57:48.160 --> 00:57:49.440
也會跑步的機器人

00:57:49.440 --> 00:57:51.680
又會你知道搬貨的機器人

00:57:51.680 --> 00:57:52.880
他就什麼都要有

00:57:52.880 --> 00:57:56.000
但是我只是要一個會搬貨的機器人

00:57:56.000 --> 00:57:57.360
他就不用有浮嘛

00:57:57.360 --> 00:57:58.880
他不會游泳的關係

00:57:58.880 --> 00:58:00.400
所以你就可以省錢

00:58:00.400 --> 00:58:01.920
那在處理器的space

00:58:01.920 --> 00:58:03.520
這邊是特別的嚴重

00:58:03.520 --> 00:58:06.000
就是說有些是處理語音的

00:58:06.000 --> 00:58:07.680
有些是處理影像的

00:58:07.680 --> 00:58:09.440
那它拉進來的那個資料

00:58:09.440 --> 00:58:10.720
拉法是不一樣

00:58:10.720 --> 00:58:13.280
那你如果那個線就接了

00:58:13.280 --> 00:58:13.920
但是不用

00:58:13.920 --> 00:58:15.040
那是非常昂貴的

00:58:15.040 --> 00:58:16.000
了解

00:58:16.000 --> 00:58:17.600
那如果拉回來到Edge這邊

00:58:17.600 --> 00:58:19.920
你覺得目前在發展Edge

00:58:19.920 --> 00:58:21.040
不管我們講發展

00:58:21.040 --> 00:58:24.000
或者我們講進到終端的應用好了

00:58:24.000 --> 00:58:25.520
你覺得最大的瓶頸在哪裡

00:58:25.520 --> 00:58:29.440
我覺得定義規格是很大的瓶頸

00:58:29.440 --> 00:58:33.280
例如說你假設我們SoC講

00:58:33.280 --> 00:58:36.000
我們叫做SoC的公司

00:58:36.000 --> 00:58:38.240
他們要做一個晶片

00:58:38.240 --> 00:58:39.440
然後要做對

00:58:39.440 --> 00:58:40.480
其實是困難的

00:58:40.480 --> 00:58:42.640
就是寫那個規格

00:58:42.640 --> 00:58:43.360
什麼意思

00:58:43.360 --> 00:58:44.960
好 我舉個例子好了

00:58:44.960 --> 00:58:46.560
你們去買個車子好了

00:58:46.560 --> 00:58:48.160
這一台就是我要的

00:58:48.160 --> 00:58:49.840
可能大小剛好

00:58:49.840 --> 00:58:52.080
然後但是那個什麼性能剛好

00:58:52.080 --> 00:58:54.320
你就會有一種剛好的概念

00:58:54.320 --> 00:58:55.920
因為你心裡面有一個想法

00:58:55.920 --> 00:58:56.640
對不對

00:58:56.640 --> 00:58:58.240
但是你就看看

00:58:58.240 --> 00:59:00.400
有些車廠像什麼BMW好了

00:59:00.400 --> 00:59:01.600
出了二三十台車

00:59:01.600 --> 00:59:03.520
每一台都差10公分

00:59:03.520 --> 00:59:04.160
對不對

00:59:04.160 --> 00:59:06.000
因為你不知道到底要怎麼樣

00:59:06.000 --> 00:59:07.200
才是最適切的

00:59:07.200 --> 00:59:09.520
那你說好車子做三十台可能還好

00:59:09.520 --> 00:59:10.000
對不對

00:59:10.000 --> 00:59:11.520
晶片開三十顆你就破產

00:59:11.520 --> 00:59:12.240
是

00:59:12.240 --> 00:59:12.880
對不對

00:59:13.040 --> 00:59:15.280
所以你要把那個晶片做到很適切

00:59:15.280 --> 00:59:16.400
其實是很困難

00:59:16.400 --> 00:59:17.200
是非常困難

00:59:17.200 --> 00:59:18.800
就是你不能undershoot

00:59:18.800 --> 00:59:20.320
你最好不要overshoot太多

00:59:20.320 --> 00:59:22.560
undershoot就是做太慢

00:59:22.560 --> 00:59:23.520
一定下課

00:59:23.520 --> 00:59:24.720
undershoot就是沒有人要買

00:59:24.720 --> 00:59:26.000
overshoot就是

00:59:26.000 --> 00:59:26.480
浪費

00:59:26.480 --> 00:59:26.960
就是虧

00:59:26.960 --> 00:59:27.600
就賠錢

00:59:27.600 --> 00:59:28.000
虧

00:59:28.000 --> 00:59:29.200
而且搞不好太耗電

00:59:29.200 --> 00:59:31.520
對 所以這種剛好的這個

00:59:31.520 --> 00:59:33.840
其實大家會常常去對標

00:59:33.840 --> 00:59:35.520
就例如說我跟我競爭對手

00:59:35.520 --> 00:59:37.440
搞不好對標對清楚一點

00:59:37.440 --> 00:59:39.040
那就常常會有這種

00:59:39.040 --> 00:59:40.000
這一代我贏你

00:59:40.000 --> 00:59:40.800
下一代你贏我

00:59:40.800 --> 00:59:41.680
這種常常會有這種

00:59:41.680 --> 00:59:42.320
贏的什麼意思

00:59:42.320 --> 00:59:45.200
就例如說以前NVIDIA跟AMD

00:59:45.200 --> 00:59:47.280
那個Graphics部門叫ATI

00:59:47.280 --> 00:59:49.360
你在競爭的時候常常你也可以看

00:59:49.360 --> 00:59:50.480
有時候我比較有效率

00:59:50.480 --> 00:59:52.000
有時候你比較有效率

00:59:52.000 --> 00:59:53.520
那通常就是

00:59:53.520 --> 00:59:56.400
例如說兩代一個大的架構改變

00:59:56.400 --> 00:59:58.400
然後幾數年就是你改

00:59:58.400 --> 01:00:00.000
好數年就是我改

01:00:00.000 --> 01:00:02.400
那結果後來你的股票就跟著這樣子

01:00:02.400 --> 01:00:03.040
S型

01:00:03.040 --> 01:00:04.800
互相跳來跳去的

01:00:04.800 --> 01:00:05.760
今年我比較有效率

01:00:05.760 --> 01:00:06.560
我股票就上來

01:00:06.560 --> 01:00:07.520
你就下來

01:00:07.520 --> 01:00:08.080
這樣

01:00:08.080 --> 01:00:10.160
這個是常見的現象

01:00:10.160 --> 01:00:12.720
所以其實所有的IC產業

01:00:12.720 --> 01:00:14.560
我覺得問題

01:00:14.560 --> 01:00:16.800
當然是也有不同的人高見

01:00:16.800 --> 01:00:19.520
但我覺得最大問題是做到剛剛好

01:00:19.520 --> 01:00:21.120
那剛剛好是什麼意思

01:00:21.120 --> 01:00:21.920
蠻困難的

01:00:21.920 --> 01:00:24.560
為什麼是跟同業對標

01:00:24.560 --> 01:00:26.880
比較不會是直接去跟客服對標

01:00:26.880 --> 01:00:30.640
有時候不一定說跟同業對標

01:00:30.640 --> 01:00:32.000
是最正確的行為

01:00:32.000 --> 01:00:33.680
但是跟同業對標可能

01:00:33.680 --> 01:00:35.600
比較上面會比較容易一點

01:00:35.600 --> 01:00:38.800
有時候通常除非你做一些很特別的產品

01:00:38.800 --> 01:00:40.320
要不然你一定會有競品

01:00:40.320 --> 01:00:41.920
這有點像是說

01:00:41.920 --> 01:00:43.280
他們都幫你做好research了

01:00:43.280 --> 01:00:45.120
我們去抄答案的感覺嗎

01:00:45.120 --> 01:00:45.920
有一點點

01:00:45.920 --> 01:00:47.840
但是通常你也會

01:00:47.840 --> 01:00:49.840
你看其實你買大部分的產品

01:00:49.840 --> 01:00:51.760
你有沒有發現他們都有點對標

01:00:51.760 --> 01:00:55.200
例如說手機200塊美金做到什麼程度

01:00:55.200 --> 01:00:56.960
100塊美金做到什麼程度

01:00:56.960 --> 01:00:58.800
那100塊美金的手機

01:00:58.800 --> 01:01:00.560
基本上如果你的100塊美金

01:01:00.560 --> 01:01:02.080
跟我的100塊美金手機

01:01:02.080 --> 01:01:04.000
例如說我的做得比較差的話

01:01:04.000 --> 01:01:06.000
那我到最後只能賣59塊美金

01:01:06.000 --> 01:01:07.680
差不多這個意思

01:01:07.680 --> 01:01:09.440
雖然說我一樣搞不好是

01:01:09.440 --> 01:01:11.760
100塊美金的cost上去想

01:01:11.760 --> 01:01:15.280
所以對標有時候是因為商業手段

01:01:15.280 --> 01:01:16.320
對不對

01:01:16.320 --> 01:01:19.280
就是做架構一定會我們有叫做

01:01:19.280 --> 01:01:20.320
system constraint

01:01:20.320 --> 01:01:21.200
對不對

01:01:21.200 --> 01:01:23.360
然後你的cost跟你的power

01:01:23.360 --> 01:01:25.120
area這些都是constraint

01:01:25.120 --> 01:01:27.040
你要在constraint裡面最有效率

01:01:27.040 --> 01:01:28.320
就是要做取捨

01:01:28.320 --> 01:01:29.280
就是要tradeoff

01:01:29.280 --> 01:01:31.760
取捨就是最困難的事情

01:01:31.760 --> 01:01:32.720
對

01:01:32.720 --> 01:01:34.320
你到底要哪一個功能做快

01:01:34.320 --> 01:01:35.280
哪一個功能做慢

01:01:35.280 --> 01:01:36.080
很難

01:01:36.720 --> 01:01:38.240
這就是比較在策略的部分

01:01:38.240 --> 01:01:39.760
其實我們AI聊了很多

01:01:39.760 --> 01:01:40.560
我們再來聊一下

01:01:40.560 --> 01:01:41.680
英愛達其他的部分好了

01:01:41.680 --> 01:01:45.120
就是去年英愛達也有跟微軟Intel

01:01:45.120 --> 01:01:47.840
就是說要加速5G的數位轉型

01:01:47.840 --> 01:01:49.120
然後什麼智慧製造

01:01:49.120 --> 01:01:51.120
智慧製造這個詞也聽了好幾年了

01:01:51.120 --> 01:01:52.560
對

01:01:52.560 --> 01:01:53.520
就是要不要分享一下

01:01:53.520 --> 01:01:56.000
英愛達在智慧製造扮演什麼樣的角色

01:01:56.000 --> 01:01:57.840
然後裡面有沒有用到一些AI

01:01:57.840 --> 01:01:58.720
用到什麼東西

01:01:58.720 --> 01:01:59.200
好

01:01:59.200 --> 01:02:01.440
那個製造本來就要智慧化

01:02:01.440 --> 01:02:02.720
那為什麼

01:02:02.720 --> 01:02:04.320
你的定義是什麼

01:02:04.320 --> 01:02:04.880
好啦

01:02:04.880 --> 01:02:07.440
其實就是說穩定的製造

01:02:07.440 --> 01:02:09.520
這是一個重點對不對

01:02:09.520 --> 01:02:09.840
OK

01:02:09.840 --> 01:02:11.440
有效率的製造可以嗎

01:02:11.440 --> 01:02:14.400
例如說穩定的話

01:02:14.400 --> 01:02:15.920
為什麼有時候常常會說

01:02:15.920 --> 01:02:17.120
我們要少用幾個

01:02:17.120 --> 01:02:20.480
不是說我要多省錢

01:02:20.480 --> 01:02:23.200
因為製造很大的cost

01:02:23.200 --> 01:02:24.640
可能不是在人身上

01:02:24.640 --> 01:02:27.600
搞不好像ESG來的電會比較貴

01:02:27.600 --> 01:02:30.240
但是如果說我這一群人去

01:02:30.240 --> 01:02:31.440
過年去放假回來

01:02:31.440 --> 01:02:33.040
換另外一群人

01:02:33.040 --> 01:02:34.320
我產品不一樣

01:02:34.320 --> 01:02:35.360
生產出來不一樣

01:02:35.360 --> 01:02:36.320
品質不一樣

01:02:36.320 --> 01:02:37.680
那就不是穩定的製造

01:02:37.680 --> 01:02:42.000
所以把人的這個變因移除

01:02:42.000 --> 01:02:45.120
就是跟有穩定的製造有關係

01:02:45.120 --> 01:02:48.480
那之前不是有那個前輩在講什麼

01:02:48.480 --> 01:02:49.280
關燈工廠

01:02:49.280 --> 01:02:51.440
那關燈工廠是什麼

01:02:51.440 --> 01:02:52.400
看不到的工廠

01:02:52.400 --> 01:02:53.040
裡面透抽

01:02:53.040 --> 01:02:53.520
不是這樣

01:02:53.520 --> 01:02:55.200
是燈關起來

01:02:55.200 --> 01:02:55.920
還在做產品

01:02:55.920 --> 01:02:56.720
就是無人工廠

01:02:56.720 --> 01:02:57.600
就是無人工廠

01:02:57.600 --> 01:02:58.080
對

01:02:58.080 --> 01:02:59.040
那無人工廠其實

01:02:59.040 --> 01:03:00.720
我們講一個最粗淺的事情

01:03:00.720 --> 01:03:02.480
燈不用錢

01:03:02.480 --> 01:03:03.760
對啊燈不用開的嘛

01:03:03.760 --> 01:03:04.080
對不對

01:03:04.080 --> 01:03:05.280
連燈都不用裝了

01:03:05.280 --> 01:03:06.320
是不是很好

01:03:06.320 --> 01:03:07.280
那再來就是

01:03:07.280 --> 01:03:08.480
人也不用吹冷氣了嘛

01:03:08.480 --> 01:03:09.760
對不對

01:03:09.760 --> 01:03:12.320
你就裡面很熱很冷

01:03:12.320 --> 01:03:13.680
都可以生產

01:03:13.680 --> 01:03:15.360
這樣是不是也比較有效率

01:03:15.360 --> 01:03:17.760
所以大概就是穩定生產

01:03:17.760 --> 01:03:18.800
有效率生產

01:03:18.800 --> 01:03:21.280
這個就可以當作智慧製造

01:03:21.280 --> 01:03:22.560
因為我們現在不講設計

01:03:22.560 --> 01:03:23.600
我們純講製造

01:03:23.600 --> 01:03:25.600
但是回過頭來說

01:03:25.600 --> 01:03:27.600
智慧製造有時候有些mandate

01:03:27.600 --> 01:03:29.280
必須要跟設計有關係

01:03:29.280 --> 01:03:32.800
我就講一個很簡單的例子

01:03:33.440 --> 01:03:35.440
你們手機有用過那個什麼

01:03:35.440 --> 01:03:37.040
果凍套之類的

01:03:37.040 --> 01:03:37.920
軟軟的這種

01:03:37.920 --> 01:03:39.120
有矽膠套那種

01:03:39.120 --> 01:03:40.320
TPU

01:03:40.320 --> 01:03:41.840
那你說假設我一個產品

01:03:41.840 --> 01:03:44.720
是要把矽膠套套到手機上面去

01:03:44.720 --> 01:03:46.560
這很難生產

01:03:46.560 --> 01:03:47.360
對

01:03:47.360 --> 01:03:48.320
因為它是軟的

01:03:48.320 --> 01:03:48.880
對不對

01:03:48.880 --> 01:03:51.040
那那個硬的東西好組裝

01:03:51.040 --> 01:03:52.720
軟的東西難組裝

01:03:52.720 --> 01:03:54.240
如果真的有這個需求

01:03:54.240 --> 01:03:57.040
就等一下能搞個AI機械手臂

01:03:57.040 --> 01:03:58.960
正向式學習

01:03:58.960 --> 01:03:59.680
就不好搞

01:03:59.680 --> 01:04:02.800
所以其實你如果設計裡面

01:04:02.800 --> 01:04:05.520
有這些不好生產的元素進來

01:04:05.520 --> 01:04:07.120
你的生產效率就會下降

01:04:07.120 --> 01:04:10.560
所以設計跟生產是會有一個連動

01:04:10.560 --> 01:04:11.360
產生的設計

01:04:11.360 --> 01:04:12.160
產品的設計

01:04:12.160 --> 01:04:12.800
產品的設計

01:04:12.800 --> 01:04:14.480
產品的設計帶到產線的設計

01:04:14.480 --> 01:04:15.120
OK

01:04:15.120 --> 01:04:15.520
對

01:04:15.520 --> 01:04:17.520
所以智慧製造基本上

01:04:17.520 --> 01:04:18.880
就像我剛剛講的

01:04:18.880 --> 01:04:20.880
穩定跟有效率的事情

01:04:20.880 --> 01:04:23.680
那通常會有兩個面向

01:04:23.680 --> 01:04:26.720
一個叫做單點式的自動化

01:04:26.720 --> 01:04:27.680
或AI化

01:04:27.680 --> 01:04:29.680
我們一個例子就是

01:04:29.680 --> 01:04:30.560
例如說我們

01:04:30.560 --> 01:04:32.800
應該做全世界最多的主機板

01:04:32.800 --> 01:04:34.800
一年做大概400萬片左右

01:04:34.800 --> 01:04:37.200
那全世界大概有1600萬個伺服器

01:04:37.200 --> 01:04:38.800
一年需要這麼多主機板

01:04:38.800 --> 01:04:41.200
那主機板說難不難

01:04:41.200 --> 01:04:42.080
說簡單不簡單

01:04:42.080 --> 01:04:43.120
因為它很大片

01:04:43.120 --> 01:04:45.600
所以它其實零件定位也沒有那麼簡單

01:04:45.600 --> 01:04:46.880
因為它還是有一些公差

01:04:46.880 --> 01:04:48.560
然後還有完了以後

01:04:48.560 --> 01:04:49.680
你把零件裝上去之後

01:04:49.680 --> 01:04:50.560
到底是有沒有裝好

01:04:50.560 --> 01:04:52.480
你要用個OpenCV的東西去看

01:04:52.480 --> 01:04:54.000
但是OpenCV看

01:04:54.000 --> 01:04:56.080
你常常會把它當作是有問題的

01:04:56.080 --> 01:04:57.600
汗點汗壞了之類的

01:04:57.600 --> 01:04:58.560
其實沒壞

01:04:58.560 --> 01:05:00.560
但是汗席可能反光有點不夠

01:05:00.560 --> 01:05:02.080
對它那個照起來是

01:05:02.080 --> 01:05:04.320
我有看過人家那個AI剪的

01:05:04.320 --> 01:05:05.360
有點像那個叫什麼

01:05:05.360 --> 01:05:06.000
X光

01:05:06.000 --> 01:05:07.520
對不對黑白的嘛

01:05:07.520 --> 01:05:10.080
然後那個它凸起來跟扁平起來

01:05:10.080 --> 01:05:12.080
那個其實看起來好像一樣

01:05:12.080 --> 01:05:12.560
對

01:05:12.560 --> 01:05:14.080
對啊然後就深淺不一樣而已

01:05:14.080 --> 01:05:14.880
對

01:05:14.880 --> 01:05:17.280
所以你就不知道說它多深多淺

01:05:17.280 --> 01:05:18.800
差異多少是壞的

01:05:18.800 --> 01:05:19.200
對不對

01:05:19.200 --> 01:05:21.600
所以這個東西後面我們就會

01:05:21.600 --> 01:05:23.120
接一個AI來看

01:05:23.120 --> 01:05:26.000
那就會有一個東西叫止痛率

01:05:26.000 --> 01:05:26.880
止痛率就是說

01:05:27.360 --> 01:05:28.320
止痛率

01:05:28.320 --> 01:05:32.320
對那個直接通過產線的比率

01:05:32.320 --> 01:05:34.320
那其實大部分狀況就是說

01:05:34.320 --> 01:05:35.840
那你如果零件越多

01:05:35.840 --> 01:05:38.000
你看每一個有可能誤判的比率

01:05:38.000 --> 01:05:38.880
是個P之類的

01:05:38.880 --> 01:05:41.120
你就會P的N次方很高對不對

01:05:41.120 --> 01:05:44.960
所以你這個誤判如果小小的

01:05:44.960 --> 01:05:47.120
對一個小的產品還好

01:05:47.120 --> 01:05:49.760
對大的產品是非常非常麻煩

01:05:49.760 --> 01:05:51.200
那很多道理

01:05:51.200 --> 01:05:52.480
對因為裡面一兩個

01:05:52.480 --> 01:05:54.080
你覺得壞了它就要停下來

01:05:54.080 --> 01:05:55.840
所以我們就可以用AI

01:05:55.840 --> 01:05:57.280
來把這個事情處理好

01:05:57.280 --> 01:05:59.120
它止痛率我們導入AI之後

01:05:59.120 --> 01:06:00.880
就增加了蠻多的

01:06:00.880 --> 01:06:02.480
不能講仔細數字

01:06:02.480 --> 01:06:03.680
但是就是非常多

01:06:03.680 --> 01:06:04.400
所以主要是在

01:06:04.400 --> 01:06:05.040
多超一半

01:06:05.040 --> 01:06:07.520
增加檢測的正確性這一塊

01:06:07.520 --> 01:06:10.160
一樣是剛剛講的穩定生產這個產品

01:06:10.160 --> 01:06:10.640
對不對

01:06:10.640 --> 01:06:13.200
因為好的你也不想要讓它丟掉

01:06:13.200 --> 01:06:14.800
壞的你也不應該錯放

01:06:14.800 --> 01:06:15.280
對

01:06:15.280 --> 01:06:17.760
所以這個是單點的AI自動化

01:06:17.760 --> 01:06:19.360
但是整體的

01:06:19.360 --> 01:06:21.280
我們叫生產計畫排程

01:06:21.280 --> 01:06:22.560
這個其實是困難

01:06:23.360 --> 01:06:25.760
那這邊我們有一些effort

01:06:25.760 --> 01:06:27.200
那就是像數位轉型

01:06:27.200 --> 01:06:29.920
各個不同地方資料可以彙整在一起

01:06:29.920 --> 01:06:32.800
對這種事情就會比較有助益

01:06:32.800 --> 01:06:33.760
這是你們自己做

01:06:33.760 --> 01:06:35.760
還是你們有提供這樣的服務

01:06:35.760 --> 01:06:37.440
我們事實上是有的

01:06:37.440 --> 01:06:40.880
我們5G四位工廠是在桃園先試點

01:06:40.880 --> 01:06:42.720
那完之後我們現在其實是有一個

01:06:42.720 --> 01:06:44.080
新的事業部門

01:06:44.080 --> 01:06:47.520
在協助大家把5G導到他的工廠裡面

01:06:47.520 --> 01:06:50.480
為什麼要特別講5G

01:06:50.480 --> 01:06:52.400
就是跟我們手機5G一樣

01:06:52.400 --> 01:06:54.640
就一定要有這麼快的速度是不是

01:06:54.640 --> 01:06:55.440
還是怎麼樣

01:06:55.440 --> 01:06:55.920
對

01:06:55.920 --> 01:06:57.840
就是例如說我像剛剛講的

01:06:57.840 --> 01:06:59.200
如果說你要做AI

01:06:59.200 --> 01:07:00.720
那產線上面放一個

01:07:00.720 --> 01:07:02.000
例如說NVIDIA處理器

01:07:02.000 --> 01:07:03.920
可能不一定是適合的

01:07:03.920 --> 01:07:05.680
那你可能要放到樓上的機房

01:07:05.680 --> 01:07:08.400
那你要傳影像是不是

01:07:08.400 --> 01:07:09.360
檔案比較大

01:07:09.360 --> 01:07:11.760
那你Latency又不想太高

01:07:11.760 --> 01:07:13.680
你那個延遲如果太高

01:07:13.680 --> 01:07:16.240
就會變成產線等待時間大

01:07:16.240 --> 01:07:18.160
所以用5G的話

01:07:18.160 --> 01:07:20.720
在整體來說是一個核算的投資

01:07:21.680 --> 01:07:23.680
所以這會是像5G最主要的應用了嗎

01:07:23.680 --> 01:07:24.480
這是專網嗎

01:07:24.480 --> 01:07:25.440
對 這是專網

01:07:25.440 --> 01:07:28.800
專網就有點像你在你工廠

01:07:28.800 --> 01:07:31.920
自己架了一個自己的電信公司那種感覺

01:07:31.920 --> 01:07:34.480
那我們5G專網是用自己的伺服器

01:07:34.480 --> 01:07:36.960
搭配那個軟體弄起來

01:07:36.960 --> 01:07:38.000
你有點像是

01:07:38.000 --> 01:07:39.680
以前有人自己去買PC

01:07:39.680 --> 01:07:41.840
然後裝Windows這種感覺

01:07:41.840 --> 01:07:43.600
而不是說去什麼Acer

01:07:43.600 --> 01:07:45.040
去Dell買這樣子

01:07:45.040 --> 01:07:46.320
所以是分開做的

01:07:46.320 --> 01:07:47.760
所以我們是用自己的硬體

01:07:47.760 --> 01:07:50.800
再加上軟體來做的那個5G專網

01:07:50.800 --> 01:07:53.040
我們可以幫大家做這個事情

01:07:53.040 --> 01:07:55.200
那你覺得如果是一般的企業

01:07:55.200 --> 01:07:56.240
想要來開始說

01:07:56.240 --> 01:07:57.200
那我們也想要有

01:07:57.200 --> 01:07:58.560
就現在想要有很好的

01:07:58.560 --> 01:07:59.840
更穩定更有效率

01:07:59.840 --> 01:08:00.320
對

01:08:00.320 --> 01:08:02.080
如果一般的企業想要來導入

01:08:02.080 --> 01:08:03.920
就除了錢以外主要的瓶頸是什麼

01:08:03.920 --> 01:08:07.840
我覺得其實是應用場景的問題

01:08:07.840 --> 01:08:12.240
就是說你為什麼要某種程度5G的那個

01:08:12.240 --> 01:08:14.480
低延遲還有高貸款

01:08:14.480 --> 01:08:18.080
可能還有你需要的是無線這個功能

01:08:18.080 --> 01:08:19.920
像我們前一陣子可能

01:08:19.920 --> 01:08:21.200
跟中美貿易有關係

01:08:21.200 --> 01:08:23.600
我們那個產線移動很快

01:08:23.600 --> 01:08:24.960
你說我們很多伺服器

01:08:24.960 --> 01:08:26.400
現在去墨西哥生產

01:08:26.400 --> 01:08:27.200
墨西哥

01:08:27.200 --> 01:08:29.440
對 新聞上面有寫可以講

01:08:29.440 --> 01:08:32.160
但是你看這個產線的移動

01:08:32.160 --> 01:08:34.400
你如果要做的比較敏捷

01:08:34.400 --> 01:08:37.280
最好是不要那麼多線

01:08:37.280 --> 01:08:40.160
那最好是對於工廠的要求低一點

01:08:40.160 --> 01:08:41.760
例如說我們可能

01:08:41.760 --> 01:08:44.240
想要多塞一條生產線好了

01:08:44.240 --> 01:08:45.520
那如果原來你有一個什麼

01:08:45.520 --> 01:08:47.520
自動搬移機器人

01:08:47.520 --> 01:08:49.360
那你可能就沒辦法做這個事情

01:08:49.360 --> 01:08:49.920
對不對

01:08:49.920 --> 01:08:51.520
因為所有的都架得好好的

01:08:51.520 --> 01:08:52.400
但太大台了

01:08:52.400 --> 01:08:53.600
那所以可不可以

01:08:53.600 --> 01:08:55.280
零件的時候丟個推車一個人推

01:08:55.280 --> 01:08:56.320
搞不好也可以

01:08:56.320 --> 01:08:58.640
那所以你如果說有這種

01:08:58.640 --> 01:09:02.160
敏捷的要去調整產線的需求

01:09:02.160 --> 01:09:04.720
那你就不大能夠去接線了

01:09:04.720 --> 01:09:07.280
那Wi-Fi大部分因為太Noisy

01:09:07.280 --> 01:09:10.480
所以很多狀況用起來穩定度也差一點

01:09:10.480 --> 01:09:12.880
所以5G不只是速度快而已

01:09:12.880 --> 01:09:15.120
還有這種為了要可以

01:09:15.120 --> 01:09:16.080
可行性這樣

01:09:16.080 --> 01:09:18.000
對 那所以你如果說工廠想要

01:09:18.000 --> 01:09:19.280
移動的速度快一點

01:09:19.280 --> 01:09:20.880
我覺得這是一個優點

01:09:20.880 --> 01:09:21.840
對

01:09:21.840 --> 01:09:24.160
但是一樣是跟你的應用情形是有關係

01:09:24.160 --> 01:09:25.920
那以整個智慧製造來說

01:09:25.920 --> 01:09:27.600
還有哪些瓶頸嗎

01:09:27.600 --> 01:09:31.520
智慧製造我覺得計畫是最困難

01:09:31.520 --> 01:09:33.600
像我剛剛講單點的事情

01:09:33.600 --> 01:09:35.040
我覺得其實是困難

01:09:35.040 --> 01:09:35.920
單點其實是困難

01:09:35.920 --> 01:09:36.880
單點困難

01:09:36.880 --> 01:09:38.000
單點困難就是說

01:09:38.000 --> 01:09:39.760
我做個AI丟到客人那邊

01:09:39.760 --> 01:09:41.280
還要跟客人要資料

01:09:41.280 --> 01:09:43.360
這是智慧製造AI最麻煩的事情

01:09:43.360 --> 01:09:45.040
你說客戶不想給資料嗎

01:09:45.040 --> 01:09:45.760
我覺得

01:09:45.760 --> 01:09:47.280
就算有Local training都不行

01:09:47.280 --> 01:09:49.440
沒有沒有 我覺得客戶的資料問題

01:09:49.440 --> 01:09:51.120
並不是他想不想給的問題

01:09:51.120 --> 01:09:52.640
那資料根本就串不出來嗎

01:09:52.640 --> 01:09:54.560
對 像剛剛講資料治理的事情

01:09:54.560 --> 01:09:56.320
就是說能不能標記

01:09:56.320 --> 01:09:57.760
能不能好好的去儲存

01:09:57.760 --> 01:10:00.560
能不能真的把它變成一個好的

01:10:00.560 --> 01:10:02.320
一個benchmark來訓練你

01:10:02.320 --> 01:10:04.320
這個東西真的是困難

01:10:04.320 --> 01:10:07.120
對 我光是叫你把你家的所有

01:10:07.120 --> 01:10:09.200
例如說你女兒的照片全部給我

01:10:09.200 --> 01:10:10.800
我要訓練一個她的模型

01:10:10.800 --> 01:10:12.560
都要找一陣子 對不對

01:10:12.560 --> 01:10:14.320
那是你重視的資料

01:10:14.320 --> 01:10:17.040
但是我們都還很難整理得很好

01:10:17.040 --> 01:10:18.480
這其實也不是Privacy的問題

01:10:18.480 --> 01:10:20.560
而是怎麼樣數位化的問題

01:10:20.560 --> 01:10:21.440
對 這個數位化

01:10:21.440 --> 01:10:24.400
你說我每天產線產生那麼多照片

01:10:24.400 --> 01:10:26.240
你有沒有budget可以存它

01:10:26.240 --> 01:10:27.760
這些問題都非常多的

01:10:27.760 --> 01:10:29.680
不只是Privacy而已

01:10:29.680 --> 01:10:31.280
資料定義 保存

01:10:31.280 --> 01:10:33.840
就是整個整體資料治理的問題很大

01:10:33.840 --> 01:10:36.560
所以是用舊的那些協定會不會

01:10:36.560 --> 01:10:39.520
它的能夠處理或能夠儲存的資料

01:10:39.520 --> 01:10:40.720
精度是有問題的

01:10:40.720 --> 01:10:45.280
對 這個可能跟模型的轉換率是有關係

01:10:45.280 --> 01:10:48.320
因為你用舊的資料訓練完

01:10:48.320 --> 01:10:50.400
去新的場景不能用

01:10:50.400 --> 01:10:52.720
這些東西都很常見

01:10:52.720 --> 01:10:55.440
所以現在做大模型做技術模型

01:10:55.440 --> 01:10:57.280
我們再製造一件S王這邊去做

01:10:57.280 --> 01:10:58.480
就是最好都不要訓練

01:10:58.480 --> 01:10:59.440
調一下就好

01:10:59.440 --> 01:11:00.160
可以了嗎

01:11:00.160 --> 01:11:01.120
差不多

01:11:01.120 --> 01:11:02.080
這意思是這樣

01:11:02.080 --> 01:11:04.400
你看 例如說我們現在在這邊聊天

01:11:04.400 --> 01:11:05.280
有一個Mixer對不對

01:11:05.280 --> 01:11:05.600
對

01:11:05.600 --> 01:11:06.560
它有大小聲

01:11:06.560 --> 01:11:07.120
對

01:11:07.120 --> 01:11:09.120
它大小聲裡面控制很多東西

01:11:09.120 --> 01:11:11.360
它可能也有那個等化器這些東西

01:11:11.360 --> 01:11:14.960
它不是說只是真的純粹去動一個電容

01:11:14.960 --> 01:11:16.560
以前可能純粹是

01:11:16.560 --> 01:11:17.280
現在不是

01:11:17.280 --> 01:11:20.480
所以你要做的事情是做出一個介面

01:11:20.480 --> 01:11:21.600
有點像這個Mixer一樣

01:11:21.600 --> 01:11:23.520
好幾根東西搬一搬

01:11:23.520 --> 01:11:24.560
你就可以用了

01:11:24.560 --> 01:11:26.720
所以如果要丟到工廠

01:11:26.720 --> 01:11:28.800
要可以用的東西

01:11:28.800 --> 01:11:30.880
最好它就是幾個旋鈕轉一轉

01:11:30.880 --> 01:11:31.840
那就可以上口

01:11:31.840 --> 01:11:34.880
但AI的問題是AI有很多很多旋鈕

01:11:34.880 --> 01:11:36.720
我們那個模型裡面很多資料

01:11:36.720 --> 01:11:38.480
每個資料都是個旋鈕

01:11:38.480 --> 01:11:39.680
那個weight一改

01:11:39.680 --> 01:11:40.560
然後幾成

01:11:40.560 --> 01:11:41.120
對

01:11:41.120 --> 01:11:43.680
所以要做的事情是把這麼多這麼多

01:11:43.680 --> 01:11:45.520
可能幾個billion的參數

01:11:45.520 --> 01:11:46.720
幾個million的參數

01:11:46.720 --> 01:11:48.960
縮減到例如說三五個參數

01:11:48.960 --> 01:11:50.960
變成一個面板上面旋鈕

01:11:50.960 --> 01:11:52.000
讓它可以用

01:11:52.000 --> 01:11:55.040
這是AI在智慧製造我覺得最大的問題

01:11:55.040 --> 01:11:57.600
但在Domain有一些特定的應用的場域

01:11:57.600 --> 01:11:58.720
我覺得是可以做到

01:11:58.720 --> 01:12:00.160
我們也在做這種事情

01:12:00.160 --> 01:12:00.960
對

01:12:00.960 --> 01:12:02.160
但做到底來說

01:12:02.160 --> 01:12:03.840
還是生產計劃最難

01:12:03.840 --> 01:12:05.920
到最後我覺得是這種

01:12:05.920 --> 01:12:08.000
例如說你像前一陣子不是

01:12:08.000 --> 01:12:10.160
有惡物戰爭又有疫情

01:12:10.160 --> 01:12:10.640
對

01:12:10.640 --> 01:12:12.000
那缺料

01:12:12.000 --> 01:12:13.600
要不然就是料太多

01:12:13.600 --> 01:12:15.840
然後完了之後又一路接到那個

01:12:15.840 --> 01:12:16.880
財務問題

01:12:16.880 --> 01:12:18.560
Financial cost可能會增加

01:12:18.560 --> 01:12:20.160
我覺得這一串的問題比較困難

01:12:20.160 --> 01:12:21.200
可是

01:12:21.200 --> 01:12:23.440
就如果你們今天想要去做這個生意

01:12:23.440 --> 01:12:25.920
要到這些資料有點太敏感了對不對

01:12:25.920 --> 01:12:26.480
不會

01:12:26.480 --> 01:12:29.760
我覺得其實是像供應鏈的資料

01:12:29.760 --> 01:12:31.360
其實的確是敏感

01:12:31.360 --> 01:12:35.120
就是說很難有機會說大家互相共享資料

01:12:35.120 --> 01:12:38.080
但是在自己跟自己客戶的需求端

01:12:38.080 --> 01:12:39.520
事實上是必要的

01:12:39.520 --> 01:12:41.520
就你必須要有自己的資料

01:12:41.520 --> 01:12:42.640
你要知道說

01:12:42.640 --> 01:12:44.160
你什麼時候可以deliver

01:12:44.160 --> 01:12:45.200
然後你要deliver

01:12:45.200 --> 01:12:46.800
那promise要做清楚

01:12:46.800 --> 01:12:47.920
我今天要交貨

01:12:47.920 --> 01:12:49.200
我今天就要交貨

01:12:49.200 --> 01:12:51.360
但是你又要想要just in time

01:12:51.360 --> 01:12:53.840
像Toyota講just in time

01:12:53.840 --> 01:12:56.080
所以我說也不客氣

01:12:56.080 --> 01:12:58.560
just in time就是零件不在我公司

01:12:58.560 --> 01:12:59.360
我就不付錢

01:12:59.360 --> 01:13:01.120
這就叫just in time

01:13:01.120 --> 01:13:03.280
對所以你有沒有辦法真的是做到這個事情

01:13:03.280 --> 01:13:05.280
然後結果壓榨你的供應商

01:13:05.280 --> 01:13:06.640
這也不大對

01:13:06.640 --> 01:13:07.040
對不對

01:13:07.040 --> 01:13:08.000
雖然你不要運進來

01:13:08.000 --> 01:13:10.080
我今天要用趕快運進來給我

01:13:10.080 --> 01:13:12.640
這其實供應商的那個財務狀況

01:13:12.640 --> 01:13:14.080
可能會因此出問題

01:13:14.080 --> 01:13:16.400
所以我覺得這一整串的事情

01:13:16.400 --> 01:13:17.920
其實是非常難做的

01:13:17.920 --> 01:13:19.600
供應鏈管理是非常難做的

01:13:19.600 --> 01:13:21.840
所以就是對你們來說

01:13:21.840 --> 01:13:23.920
在做智慧製造這一塊

01:13:23.920 --> 01:13:26.800
看起來第一步最容易下手的對象

01:13:26.800 --> 01:13:28.320
還是自己的供應鏈

01:13:28.320 --> 01:13:29.280
是啦是啦是啦

01:13:29.280 --> 01:13:30.320
一定的一定的

01:13:30.320 --> 01:13:33.440
那個智慧製造要產品化並沒有很容易

01:13:33.440 --> 01:13:34.080
對

01:13:34.080 --> 01:13:35.200
你可以當consultant

01:13:35.200 --> 01:13:36.480
那你可以賣機器

01:13:36.480 --> 01:13:39.120
做overall planning整個生產的規劃

01:13:39.120 --> 01:13:40.800
其實已經有很多公司在做了

01:13:40.800 --> 01:13:42.720
像西門子這種東西

01:13:42.720 --> 01:13:44.960
那我們也有一個部門在

01:13:44.960 --> 01:13:47.760
有點像幫大家導入這種西門子類的產品

01:13:47.760 --> 01:13:49.120
我們有自己的

01:13:49.120 --> 01:13:51.200
這個叫做那個MIS

01:13:51.200 --> 01:13:54.160
就是Manufacturing Information System

01:13:54.160 --> 01:13:56.560
我們也有開發了一些

01:13:56.560 --> 01:13:58.560
泛用的這種排程系統

01:13:58.560 --> 01:14:01.920
那這些都已經有一些客人拿來用了

01:14:01.920 --> 01:14:05.680
就是讓他們的生產排程是比較有效率這樣子

01:14:05.680 --> 01:14:06.240
對

01:14:06.240 --> 01:14:07.520
我覺得好

01:14:07.520 --> 01:14:08.480
今天學到非常多

01:14:08.480 --> 01:14:09.680
我最後還是有個問題

01:14:09.680 --> 01:14:10.640
其實非常好奇

01:14:10.640 --> 01:14:11.040
好

01:14:11.040 --> 01:14:13.440
就是聽起來你做的事情太多了吧

01:14:13.440 --> 01:14:14.720
還好啦

01:14:14.720 --> 01:14:15.520
懂太多了

01:14:15.520 --> 01:14:16.080
對啊

01:14:16.080 --> 01:14:17.760
你要怎麼樣去分配每個角色的時間

01:14:17.760 --> 01:14:19.040
然後你還有自己的生活

01:14:19.040 --> 01:14:21.040
這個時間到底是怎麼樣去分配的

01:14:21.040 --> 01:14:22.320
你會怎麼樣決定

01:14:22.320 --> 01:14:25.920
我覺得生活就會去做一個分界

01:14:25.920 --> 01:14:28.480
但是它會互相leak

01:14:28.480 --> 01:14:29.680
leak的意思是說

01:14:29.680 --> 01:14:31.920
你有時候回家做點工作的事情

01:14:31.920 --> 01:14:34.000
有工作做點家裡的事情

01:14:34.000 --> 01:14:35.520
比如說在工作的時候

01:14:35.520 --> 01:14:37.600
老婆叫我去找個彎去買個吃的

01:14:37.600 --> 01:14:38.400
我還是會去買

01:14:38.400 --> 01:14:39.040
對啊

01:14:39.040 --> 01:14:43.360
這種事情不會說把它界線弄得那麼死

01:14:43.360 --> 01:14:46.400
但是我覺得這個你能不能變的

01:14:46.400 --> 01:14:48.560
就是你一天就這麼多時間

01:14:48.560 --> 01:14:50.400
所以大概就是說

01:14:50.400 --> 01:14:52.400
這個時間可以做多少事情

01:14:52.400 --> 01:14:54.720
那其他的東西就是想辦法delegate

01:14:54.720 --> 01:14:56.560
就是拿給別人做

01:14:56.560 --> 01:15:00.160
或是從我做變成我在追蹤的項目

01:15:00.160 --> 01:15:02.880
我覺得大概就是這樣子安排而已

01:15:02.880 --> 01:15:05.520
那因為你的時間是固定的對不對

01:15:05.520 --> 01:15:07.840
那我們人生是在跑馬拉松的

01:15:07.840 --> 01:15:09.600
又不是在短跑的對不對

01:15:09.600 --> 01:15:12.080
那短跑的時候是什麼研究所的時候

01:15:12.080 --> 01:15:14.000
寫論文就一個禮拜不睡覺那種

01:15:14.000 --> 01:15:16.400
後來就是去海邊追風三天

01:15:16.400 --> 01:15:18.480
以前會做這種事情現在不會了

01:15:18.480 --> 01:15:20.880
現在就是固定的case去做

01:15:20.880 --> 01:15:24.320
那所以分配我覺得也算簡單

01:15:24.320 --> 01:15:27.760
就是一個很大的to do list

01:15:27.760 --> 01:15:29.760
然後一直排序這樣就可以

01:15:29.760 --> 01:15:31.920
所以你是全部的東西一起排嗎

01:15:31.920 --> 01:15:34.000
因為你可能有不管是

01:15:34.000 --> 01:15:35.760
就是上課的身份

01:15:35.760 --> 01:15:36.960
然後各個東西

01:15:36.960 --> 01:15:38.000
你全部一起排

01:15:38.000 --> 01:15:40.160
那會不會有個東西都沒有排到

01:15:40.160 --> 01:15:42.640
有可能 這個也叫starvation對不對

01:15:42.640 --> 01:15:44.400
我記得我們以前一個老師

01:15:44.400 --> 01:15:45.600
他得了Turing award

01:15:45.600 --> 01:15:48.160
他以前做這個IBM的處理器

01:15:48.160 --> 01:15:49.760
就有那種排程

01:15:49.760 --> 01:15:52.480
結果大學生的程式

01:15:52.480 --> 01:15:54.560
那台電腦10年都沒排到

01:15:54.560 --> 01:15:55.760
有可能這樣

01:15:55.760 --> 01:15:57.920
那有些事情就會變成不重要了

01:15:57.920 --> 01:15:59.520
如果他一直沒被排上去

01:15:59.520 --> 01:16:00.880
那就是不重要

01:16:00.880 --> 01:16:03.680
那我覺得還是我們叫做北極星

01:16:03.680 --> 01:16:04.960
定位要清楚

01:16:04.960 --> 01:16:06.240
我覺得做這些project

01:16:06.240 --> 01:16:08.800
都有一些一定要做的事情

01:16:08.800 --> 01:16:10.960
那有點像Paul Graham講的

01:16:10.960 --> 01:16:13.680
就是你要創業就創業三四

01:16:13.680 --> 01:16:14.560
你聽過嗎

01:16:14.560 --> 01:16:15.520
創業三四

01:16:15.520 --> 01:16:16.480
只能做三件事

01:16:16.480 --> 01:16:17.520
Paul Graham有說過這句話

01:16:17.520 --> 01:16:18.000
有有有

01:16:18.000 --> 01:16:19.440
他是Paul Graham的粉絲

01:16:19.440 --> 01:16:20.000
真的嗎

01:16:20.000 --> 01:16:20.720
可能太老了

01:16:20.720 --> 01:16:21.280
真的嗎

01:16:21.280 --> 01:16:22.720
他不是有finger嗎

01:16:22.720 --> 01:16:23.520
你可以finger他

01:16:23.520 --> 01:16:24.640
不只finger是另外一個人

01:16:24.640 --> 01:16:26.720
反正他有一個text based的blog

01:16:26.720 --> 01:16:28.240
他說寫code

01:16:28.240 --> 01:16:29.200
talk to users

01:16:29.200 --> 01:16:30.720
寫code跟使用者對談

01:16:30.720 --> 01:16:32.640
最後就是運動

01:16:32.640 --> 01:16:33.280
真的嗎

01:16:33.280 --> 01:16:33.840
對

01:16:33.840 --> 01:16:34.560
OK

01:16:34.560 --> 01:16:36.800
我覺得talk to users這個沒問題

01:16:36.800 --> 01:16:38.400
畢竟這個是YC的理念

01:16:38.400 --> 01:16:39.440
talk to users

01:16:39.440 --> 01:16:40.960
Paul Graham講運動

01:16:40.960 --> 01:16:43.120
寫code他沒有說talk to VC

01:16:43.120 --> 01:16:44.320
他都不care

01:16:44.320 --> 01:16:45.600
運動就是你的well being

01:16:45.600 --> 01:16:46.640
他一天到晚穿涼鞋的

01:16:46.640 --> 01:16:48.960
看起來不太像是有在運動

01:16:48.960 --> 01:16:50.240
但人生是這樣

01:16:50.240 --> 01:16:51.600
就是運動是必要的

01:16:51.600 --> 01:16:54.000
尤其可能各位比較年輕的人

01:16:54.000 --> 01:16:55.520
我已經步入中年了

01:16:55.520 --> 01:16:56.400
所以能運動嗎

01:16:56.400 --> 01:16:57.120
動啊動啊

01:16:57.120 --> 01:16:58.080
心肺是有用的

01:16:58.080 --> 01:16:59.040
你做有氧

01:16:59.040 --> 01:17:01.680
對 不管就跑步 騎車什麼的

01:17:01.680 --> 01:17:03.520
所以我覺得大概是這樣

01:17:03.520 --> 01:17:04.800
就是6公里

01:17:04.800 --> 01:17:06.160
然後什麼問題就解決

01:17:06.160 --> 01:17:07.440
真的

01:17:07.440 --> 01:17:10.160
有時候總有一些遇到煩躁的事情

01:17:10.160 --> 01:17:12.560
我同意

01:17:12.560 --> 01:17:14.560
真的啦

01:17:14.560 --> 01:17:15.520
騎車

01:17:15.520 --> 01:17:16.080
跑步也有

01:17:16.080 --> 01:17:16.880
我都跑那個啊

01:17:16.880 --> 01:17:18.320
士林那個離那個河堤不是很近

01:17:18.320 --> 01:17:19.520
對啊

01:17:19.520 --> 01:17:21.600
一個風貴嘴

01:17:21.600 --> 01:17:22.800
什麼問題都解決

01:17:22.800 --> 01:17:23.600
真的

01:17:23.600 --> 01:17:24.480
差不多是這樣

01:17:24.480 --> 01:17:25.840
真的什麼都不會想

01:17:25.840 --> 01:17:27.200
你沒有辦法想因為很喘

01:17:27.200 --> 01:17:28.560
對啊

01:17:28.560 --> 01:17:30.000
我做重訓

01:17:30.000 --> 01:17:31.120
我不知道有沒有這種有氧

01:17:31.120 --> 01:17:32.720
有都有啊

01:17:32.720 --> 01:17:33.360
對啊

01:17:33.360 --> 01:17:36.080
我覺得維持身心的平衡

01:17:36.080 --> 01:17:39.040
就是差不多就可以做比較

01:17:39.040 --> 01:17:40.720
不會太誇張的決定

01:17:40.720 --> 01:17:42.640
通常比較誇張的決定

01:17:42.640 --> 01:17:44.160
比較rush decision

01:17:44.160 --> 01:17:45.920
就是不會馬上去做

01:17:45.920 --> 01:17:47.200
那我也很好奇

01:17:47.200 --> 01:17:49.280
就是你怎麼決定什麼東西要delicate

01:17:49.280 --> 01:17:51.440
這蠻簡單的

01:17:51.440 --> 01:17:52.880
能delicate就delicate

01:17:52.880 --> 01:17:54.640
有錢真好

01:17:54.640 --> 01:17:56.640
不是有錢

01:17:56.640 --> 01:17:57.760
不是 這不是這個意思

01:17:57.760 --> 01:17:59.600
就是說你的責任在增加

01:17:59.600 --> 01:18:02.160
你要讓你的工作有效率

01:18:02.160 --> 01:18:03.760
你就是要想辦法delicate

01:18:03.760 --> 01:18:06.400
那如果你的工作內容是穩定的

01:18:06.400 --> 01:18:09.200
你就不需要想新的事情去delicate

01:18:09.200 --> 01:18:11.040
這跟你們寫Codeway Refactor一樣

01:18:11.040 --> 01:18:11.920
為什麼要refactor

01:18:11.920 --> 01:18:13.200
就是要做新的功能

01:18:13.200 --> 01:18:13.680
對

01:18:13.680 --> 01:18:16.160
為什麼要想新的這種代理人制度

01:18:16.160 --> 01:18:18.720
要把事情往其他地方推

01:18:18.720 --> 01:18:20.480
那就是因為你要做新的事情

01:18:20.480 --> 01:18:23.040
對 所以我覺得大部分都是這樣做

01:18:23.040 --> 01:18:25.440
假設我們維持20%的capacity

01:18:25.440 --> 01:18:26.640
是準備新的事情

01:18:26.640 --> 01:18:27.120
對

01:18:27.120 --> 01:18:28.960
那那個新的事情出來的時候

01:18:28.960 --> 01:18:30.640
你可能八成的workload

01:18:30.640 --> 01:18:32.160
八成的工作負擔

01:18:32.160 --> 01:18:33.760
可能就會變成100%

01:18:33.760 --> 01:18:34.800
可能會變120%

01:18:34.800 --> 01:18:35.200
對

01:18:35.200 --> 01:18:36.160
那你就要想辦法

01:18:36.160 --> 01:18:38.160
把原來八成的workload再往下降

01:18:38.160 --> 01:18:39.520
你才有辦法接新的事情

01:18:39.520 --> 01:18:41.600
所以你是有新的東西的時候

01:18:41.600 --> 01:18:44.080
你才會想說那我舊的要哪些要delicate

01:18:44.080 --> 01:18:45.760
還是你一直都會想說

01:18:45.760 --> 01:18:46.960
我什麼東西可以delicate

01:18:46.960 --> 01:18:48.640
這跟我們什麼時候refactor code

01:18:48.640 --> 01:18:49.520
是同一件問題

01:18:49.520 --> 01:18:49.760
對不對

01:18:49.760 --> 01:18:50.560
同的時候

01:18:50.560 --> 01:18:52.240
好像先重新Code

01:18:52.240 --> 01:18:54.000
那個程式要重新改寫

01:18:54.000 --> 01:18:55.680
才來放新的功能

01:18:55.680 --> 01:18:56.960
或是我先放功能

01:18:56.960 --> 01:18:57.600
先放進來

01:18:57.600 --> 01:18:59.200
結果Code壞掉要重改

01:18:59.200 --> 01:19:01.600
我覺得這個問題沒有很好的答案

01:19:01.600 --> 01:19:04.400
就是我覺得比較簡單的就是說

01:19:04.400 --> 01:19:07.120
維持一個capacity是可以空下來

01:19:07.120 --> 01:19:09.360
要不然完全沒辦法塞新的事情

01:19:09.360 --> 01:19:10.880
你自己怎麼樣去定義這個

01:19:10.880 --> 01:19:11.920
空下來的capacity

01:19:11.920 --> 01:19:14.080
就看那個會議被塞多滿

01:19:14.080 --> 01:19:15.600
差不多只能這樣子

01:19:15.600 --> 01:19:18.800
所以是不是你可能一大堆會的時候

01:19:18.800 --> 01:19:20.640
你就要求我一個禮拜

01:19:20.640 --> 01:19:22.560
至少要有一個整天是沒有會的

01:19:22.560 --> 01:19:27.200
就是說在你的工作表現的狀況不變之下

01:19:27.200 --> 01:19:28.560
你要想辦法

01:19:28.560 --> 01:19:31.600
最好是你的資源不要改變之下

01:19:31.600 --> 01:19:33.840
想辦法降低你開會

01:19:33.840 --> 01:19:36.880
或是增加你可以自己工作的時間

01:19:36.880 --> 01:19:39.040
就用這個原則去處理就好

01:19:39.040 --> 01:19:42.320
我總要有例如說我要閱讀一些東西

01:19:42.320 --> 01:19:43.360
我要寫一些東西

01:19:43.360 --> 01:19:44.880
人才會進步

01:19:44.880 --> 01:19:46.160
那如果我沒辦法創造

01:19:46.160 --> 01:19:47.360
我都是在做管理的話

01:19:47.360 --> 01:19:48.560
人是不會進步

01:19:48.560 --> 01:19:49.520
這樣就可以了

01:19:49.520 --> 01:19:51.280
那所以用這個原則去做就好

01:19:51.280 --> 01:19:53.440
就那個事情太多了

01:19:53.440 --> 01:19:55.680
那就把它放一些出去

01:19:55.680 --> 01:19:57.920
大家也才比較有成長的空間

01:19:57.920 --> 01:19:59.920
了解了解

01:19:59.920 --> 01:20:02.080
今天真的非常感謝陳副總來上節目

01:20:02.080 --> 01:20:05.120
有一個最後這個非常的收穫良多

01:20:05.120 --> 01:20:06.320
不敢不敢 謝謝

01:20:06.320 --> 01:20:07.360
我馬上待會出去就跟他們說

01:20:07.360 --> 01:20:08.640
這些工作全部都給你們做了

01:20:08.640 --> 01:20:10.720
不要找我問了

01:20:10.720 --> 01:20:13.280
但是我還是要講這個叫accountable

01:20:13.280 --> 01:20:15.360
到最後你還是負責

01:20:15.360 --> 01:20:17.680
所以你怎麼在負責狀況下

01:20:17.680 --> 01:20:20.080
把這件事情這個delegation做好

01:20:20.080 --> 01:20:22.080
其實是有一點學問

01:20:22.080 --> 01:20:24.400
好 沒問題

01:20:24.400 --> 01:20:26.640
希望未來還有機會邀副總上節目

01:20:26.640 --> 01:20:27.360
來跟我們分享一下

01:20:27.360 --> 01:20:28.720
可能在剛剛那個

01:20:28.720 --> 01:20:30.480
AI加速器的表現

01:20:30.480 --> 01:20:31.920
或者客戶如果有開始提到

01:20:31.920 --> 01:20:32.720
我們可以來提一下

01:20:32.720 --> 01:20:34.160
中間有沒有什麼有趣的事情這樣子

01:20:34.160 --> 01:20:35.520
好

01:20:35.520 --> 01:20:37.040
那有任何的問題或支持

01:20:37.040 --> 01:20:37.840
都可以在Apple Podcast

01:20:37.840 --> 01:20:38.800
或YouTube留言

01:20:38.800 --> 01:20:40.000
有業務合作需求

01:20:40.000 --> 01:20:42.160
請參考資訊欄下方的合作信箱

01:20:42.160 --> 01:20:42.800
再次感謝副總

01:20:42.800 --> 01:20:43.440
我們下週再見

01:20:43.440 --> 01:20:44.000
拜拜

01:20:44.000 --> 01:20:44.640
好 謝謝各位

01:20:44.640 --> 01:20:45.600
拜拜

01:20:45.600 --> 01:20:46.640
謝謝

