歡迎收聽乾爹發狗糧時間
Yeah
今天的乾爹是台中最大醫療規模的中國醫藥大學
他們的藥學系教授林文興教授
同時也是益生菌臨床研究計畫的主持人
他前陣子就有來跟我們分享益生菌的一些奧妙
跟這個強盜的一些東西
他們醫藥團隊所開發的CMU995益生菌
獲得了很多的國際專利
包含了抗幽門桿菌感染
保肝排毒的專利
還有一些抗過敏的專利等等
相當厲害啊
那上次節目過後啊
不管是GF、SKY
還有我們的Pox製作人
其實也都有持續在購買
他們所開發的這個益生菌系列
所以今天林教授來當我們的乾爹
我們就非常的樂意做這個產品的分享
那如果沒有去聽上一集的朋友啊
我們還是可以來科普一下益生菌對人體的重要性
上次教授就有提到說
其實萬病的支援就在強盜
那我們強盜有非常多的細菌
裡面有好的有不好的
那當壞菌比較多的時候
身體還有強盜就比較容易去產生全身的發炎反應
那最嚴重就像癌症的發生嘛
在台灣大腸癌就是國人發生率第一名的癌症
那如果想要保持強盜健康
其實就不外乎多喝水、多吃水果、多運動
可是對於比較忙碌或者是做喜相
就是習慣久坐的上班族來說
就如果你要去多吃蔬菜水果啊
或者是健康菜盒吃多了
可能就是稍微的比較不方便
那可能就會有像便祕、胃食道逆流
脹氣、消化不良等等困擾
這種時候你就可以去考慮補充益生菌
為強盜去增添更多的好菌
也幫助強盜打擊壞菌
那這樣子也可以調整體質
還有增加我們的免疫力
教授之前有說過
我們在家要判斷自己的強盜是不是健康
他就會跟你講你有沒有大便啊
形狀啊、頻率啊對不對
你換菌很多你就放屁大便都會很臭啊
容易便祕啊
甚至會脹氣啊
反正重點就是你壞菌太多啦
所以你要補一些好菌
那這個就是對你的這個
強盜的健康非常有益就對了
那益生菌它是活的
雖然品種很多啊
功效也都不一樣
算是一種非常複雜
專業性非常高的保健食品
那這個CMU995它的益生菌
最大的特色啊
就是它的菌種是篩選自
台灣健康的寶寶還有母乳
又有多國的國際專利
那經過人體臨床研究的證實
它可以強烈吸附在強盜還有泌尿道
也可以快速去打擊壞菌
降低細菌還有病毒的感染
也幫助去排除毒素啊抑制發炎
那教授也有去開發其他抗過敏的菌種
還有幫助入睡的像母乳益生菌
那不同情況
它就有不同的產品去搭配
是 當然大家都知道我有在健身嘛
所以其實我自己很少吃澱粉啦
當然這個跟健身其實不一定有關係啦
對
健身不是就是吃蛋白這樣子嗎
對 少吃澱粉是怕胖啊
稍微有點容易胖
你少吃飯你就會多吃肉嘛
這個應該蠻明確的吧
對 所以對這個腸道的傷害就比較大
所以其實我蠻多人有買的啦
反正我買了就是自己吃嘛
那藍色包裝吃了一陣子
就家人的症也是沒那麼臭啦
對 那我自己本身腸胃應該算健康啦
所以我就是幾天吃一包
當作照顧腸道囉
那當然我自己也是有買一些
黃色的這個包裝的益生菌給我小孩子吃啦
那是抗過敏的對不對
對 因為我們家都有過敏啦
對 那我想說就是
買來給這個小孩子吃吃看
不然他每天一直那邊打噴嚏很煩
對 那他其實蠻挑食的啦
就我的小孩蠻挑食的
那他也經常便祕啦
所以就蠻擔心的
所以我們就買了一個來吃吃看啦
那目前看起來還算
欸 有點效果
喔 真的喔
效果像怎麼樣
就是比較正常的大便
喔 真的喔
對 那當然我相信有其他因素啦
那我們不能說這都是這個
至少過敏調整比值
就是還是可以觀察啦
至少是往好的方向發展
那乾爹也有說明說
欸 這個益生菌畢竟不是藥物
不可以馬上立即過敏
那但是藥物本身是無法改變體質的嘛
那益生菌就至少讓你體內的好菌變多
那大約是需要三到六個月的時間去改善
那至於口感的部分
就是淡淡的甜味啦
所以那個大人吃應該沒問題啦
重點是小孩子好不好
那你的小孩OK
OK啊 他甜的都OK
OK OK
小孩子最喜歡吃甜的啦
不過我覺得他們很專業的是
這個益生菌的確就是要低溫配送啦
那個太高溫他們會死掉
所以你不要配溫開水餒
記得要配冷開水喔
就是冷水或常溫水
那上次教授有提到
在選擇益生菌的時候
除了合適的菌種以外
你這個含菌量的多寡
這也是一個重要的因素
所以他們每一包的含菌數高達650億
其實大家可以去比較一下啦
就是每一包650億的菌數
其實這個濃度算是蠻高的
那乾爹有跟我們說
他們是絕對不添加任何的香料啊
糖啊等等添加物
所以他們的益生菌幼兒也可以放心吃
都還算很安全
那客人的回購率也都是高達90%以上
代表說他的滿意度都還是相當不錯的
最後還是有個小小建議
因為益生菌就活的嘛
他們對人體的功效就是因人而異的
所以有任何的問題
都可以撥打他們的電話
0800-678-995
或者是我們放在資訊欄的LINE官網
你都可以去免費的資詢他們專業團隊
最後再次感謝乾爹林教授
幫我們保護我們的腸胃健康
也讓我們吃多一點的牛肉乾
耶 謝謝乾爹
歡迎收聽財報狗Podcast
我是主持人威宇
在我旁邊的是財報狗投資者林家SKY
哈囉大家好
今天是達人聊產業的單元
在這個單元裡
我們會邀請在各個產業裡面的人
跟我們分享這個產業的概況啊
未來的趨勢
之前有一集
我們邀請到了台大的李宏義教授
跟我們很深度的在聊一下
雲端的大型語言模型
這些東西都是在雲端嘛
今天我們要來聊一下是Edge端
這邊的技術
今天邀請到來賓
他們最近推出了AI加速器
幫助Edge端的推進
我們就是在Facebook上面看到了Poll文
我忘記是看到誰分享
我就說 欸 等一下
所以已經有這個東西了嗎
就是Edge端相關的晶片技術
然後我覺得很有趣
我就想說邀請他來上節目
跟我們好好聊一聊
今天我們邀請到的
是英業大的資深副總經理
及數位長陳文威超先生
大家好 主持人好
各位聽眾好
我們稍微看了一下你的那個經歷
一開始我只是看到那個貼文
然後我就想說 欸 這很有趣
我想要就看有沒有機會聊一下
然後看一下你的經歷發現說
哇 你做的事情超級多的
對
這個感覺你現在
主要的工作大概是像什麼樣子
就是有可能有些聽眾還不熟悉
可以請你先稍微介紹一下嗎
好 我覺得步入中年
你做的事情就累積的越來越多啦
所以我覺得也還好啦 沒什麼
那我現在是英業大的數位長
那我管理有兩個中心
算是我幫忙創辦的
一個是AI中心
大概2018年成立的
然後再來就一個數位中心
大概是2020年成立的
那這兩個中心主要就是做
集團AI的技術
那還有那個數位轉型
這方面的一些工作
那除此之外我還有
自己有一個新創公司
叫新品Skywatch
那那個當初跟英業達結緣
也是這個Skywatch
跟那個英業達有一個投資的關係
那後來我們因為本來就有
這個雲端AI的技術
那我們再來一起協助
這個方面的開發
那最後就是我還有一個
客座教授的身份
在台大職工
那我覺得這些工作
合在一起是同一個
對不對 我覺得就是說
有時候大家會說
你是不是有三個工作
其實這三個工作
如果它是衝突的
我覺得它就是三個工作
如果它是同步的
我覺得就是人家說有一個人
戴好幾個帽子
我覺得這一個帽子
可能顏色比較多了一點
大概是這樣而已
了解了解
你剛有提到說
你在英業達有兩個中心
AI中心跟數位中心
對
可以稍微解釋一下說
這兩個中心他們的
主要任務是什麼
其實AI這邊就是比較
是技術性的事情
那數位這邊就是比較是
跟集團合作
還有這個我們叫做
數位轉型
關於比較資料方面的一些事情
那我想AI就需要資料
那所以這兩個中心
有點互補的在執行
那其實常常大家就也一起合作
所以我覺得
這邊的界線並沒有很清楚
其實這個東西我滿好奇
大家在講所謂的數位轉型
對
就是這個東西到底在幹嘛
然後你覺得主要的瓶頸在哪裡
就是before after
到底是什麼東西
對 這有趣的事情
這樣子我們就這麼講
其實沖向的名詞很多人講
那實際上落地
可能有人搞不大清楚在做什麼
那我覺得是這樣
我一開始也不知道他在幹什麼
那很好的
那它是一個framework
所以基本上做什麼
例如說
我覺得公司要做數位轉型
跟公司要做AI
跟例如說公司要漲營收
我覺得這些東西都是抽象的事情
那你做一個可能
所謂高階主管好了
你要做的事情
就是要把抽象的事情實體化
對 那我們在做數位轉型
最重要的事情就是
我們要把這些資料資料規格
我們叫資料治理這種事情把它做好
我簡單來講
例如說今天我們的公司的營收是
假設100萬美金好了
那你就把它轉成
例如說3000萬台幣
3000萬多一點
對不對
但是你可能轉換那個美金
跟台幣的方法不同
有的是當日的匯率
有的是可能你跟我學出來最好的匯率
有的是三旬
那所以光是這個
錢這件事情其實就要定義清楚
美金跟台幣怎麼轉
所以這只是一個大家可以理解
很簡單的例子
但這件事情就沒有很簡單
所以我們在講
如果我要做AI的話我需要資料
但是資料如果是亂七八糟的
它沒有一個清楚定義的時候
你不能信任它的時候
它做出來AI就不大能夠被信任
所以我們從比較
不要講商業目的來講
我們講收集資料的話
我覺得最重要的就是
這個資料定義的事情
所以這是所謂數位轉型在做的就是說
我們到底需要哪些資料
這些資料應該要長什麼樣子
被保存在哪裡
整個Pipeline應該長什麼樣子
對啊
有人說這個叫做
那個資料下水道
就是做了沒有什麼功勞的感覺
很多人會覺得你很煩
就是大家那個
整天要資料也不知道做什麼
所以我們一定要有個目的性
就是把應用跟資料接在一起
不要把那個下水道
接到沒有人住的地方
我想這是一個很清楚的一個命令
不能說就是為了收資料而資料
那像這種AI中心
因為AI的確也是你們產品的一部分
所以我很好奇說所謂的AI中心
你們是在做產品上面的開發
還是在做像內部效率的改善
我覺得這個東西比較有彈性
並不一定是一個一或二的事情
那我覺得我們這邊算是
簡單來說叫做功能性組織
對不對
那那個一般的
例如說像Apple這種產品公司
它就是幾乎都是功能性組織
你有這個軟體部門
你有做這個Product Design
你有做這些Technology
你有做那種做Business
那我們如果說回到這種
我們比較是商業性的公司
它有時候可能就會以這個業務導向
弄成不同的叫BU
那所以台灣很多公司
你就聽到有BGI BU這樣子
那所以我們這邊公司當然就有這種事業處
那我們也有這種跟事業比較獨立的部門
像我們這個就是功能性組織
所以你們這邊就是有點像是說
哪邊會需要你們協助
你們就會去協助這樣子嗎
基本上是這樣子
對 所以這個就是例如說
我想有時候你有不同的事業體
那每個事業體可能都做一點點AI
那它好不好維持
那它會不會有時候
那個事業體的這個部門很忙
那另外一個事業體很閒
也有這種可能性
所以如果把這些相關的人放在一起
這種功能性組織
它有時候可以發揮不錯的綜效
大家也可以互相學習
像現在這個AI中心大概多少人
我們的AI數位大概是40幾個吧
我好像覺得是蠻多的
不多不少
就算大
對 那我想是這樣子
看裡面的人的組成啦
在某種角度是多
在某種角度又是少
例如說我們前幾天在辦一個
內部的AI day的活動
那就把過去兩年做的題目整理一下
大概就將近20個題目
那所以其實以這個人的量
他產生的那個專利跟那個論文
跟這些專案
其實量體是不小
對
因為你在主要一開始的任務
其實是在做發明研究
是
那我們定義發明研究就是
各位讀過書就知道
就是不是寫論文
就是寫專利嘛
開發系統
那當然開發系統之後
就會有這些不同的應用出來
但是如果說做研究的話
就是這個角度出發
那所以以這樣子來說
我們以研究為出發
然後開始再往各個不同的
那個應用去開發或deploy
覺得這個目前算是有一個
逐步的成果啦
對
像剛剛這樣聽起來
在做研究這邊就比較偏向於說
各種產品上的專利嗎
是嗎
就是你們會協助比方說
像最近很多AI什麼在協助做人資啊
面試啊 履歷啊 薪水管理啊
或者是各種什麼會議紀錄啊
你們會去做這個東西嗎
有啊 其實我不知道誰先開始啦
但是三四年前我有給的talk就有講
我們有一些AI可以預測
誰什麼時候會離職啊
對
那那個這個AI蠻好玩的
過一陣子我也聽到各種不同的公司在講這件事情
所以我就不講說是誰先開始的
那正好大家都做類似的事情
那那個我覺得這些東西都可做啦
那我們做研究
其實就是做這些關鍵發明嘛
那它真的拿去應用
不一定是跟這些研究有關係啦
有時候是例如說
研究可以拿去做一些應用
有時候應用會需求一些清楚的研究
所以這個有點像
不一定是機身代理
不一定是單身機
NVIDIA一開始它是在做代工嘛
筆電啊 伺服器啊
這種智慧裝置的代工
也算是
對 就是是怎麼樣的一個機緣會開始說
那我們要來投入AI上面的研究
因為它已經更偏向於某種的設計啊
或者是你說的這種系統架構啊
這種東西
對 所以這個問題其實很好
就是說大家說代工
那因為它的很大的營收看起來是代工
但是人家為什麼要讓你代工嘛
一定不是說
例如說勞工便宜啊
我們在台灣或者在我們不同的地方
不一定我們可以取得最便宜的勞工嘛
品質最好也不一定
對不對
這些當然都是生產要素啦
對不對
但是生產要素裡面還有一些就是
根據設計驅動
對不對
造成你最有效率的一個產品
對不對
所以那個代工生產這件事情
很多我們其實是跟我們客戶一起去研究出來的
那研究出來之後
那我覺得可能某種程度來說就是
客戶想要跟你合作
大概也不希望你太綁死他
所以有時候我們就會交換一些我們的設計
那他可能也需要把這個設計
也可以交給其他工廠做
但是一開始他可能就會有跟我們有一些
agreement說那這是你設計的
那我們先在你這邊生產
所以它不是一個純粹代工行為
代工行為的話
價值通常做不大上去
現在的這種我們講的代工廠
都會像這個樣子嗎
就是其實自己都有技術
他們是ODM
對 我們也很講ODM
那但是我覺得這個有的時候
代工有的ODM有的品牌
我覺得大概大家都在做產品
那只是大家的貢獻狀況不一樣
你如果說代工的話
比較會專注在那個生產效率
而不是在設計的有效性
對 -了解了解
就是今年AI server
一直是一個很大的一個主題
大家都在講這個
是啊是啊
我們節目講了好幾集的AI server
可是我覺得你們現在
就我們這些看到的東西特別一個
我覺得有缺點
就是在edge端
對 所以我也蠻好奇
就是先講這個好了
就是在伺服器端跟edge端這兩塊
你目前是怎麼看
不管是現在的狀態
或者是未來的發展
其實我覺得我們小時候有那個什麼
client server
然後又叫分散式處理
然後還有雲端啊什麼的
其實我覺得有趣啦
這個你有不同的技術
那到最後有一個時間點可以放到哪裡
那個技術就會造成這種移動啦
那以前我們有一個老師
就是這個叫做再生轉世
wheel of reincarnation
就一樣的技術
可能過一陣子會再繞出來繞出來
client server過一陣子就純雲端
純雲端過一陣子又有client server的狀況
這個看起來是蠻清楚的
所以你看你們現在手機很強嘛
可以做很多事情
那你不會說都雲端
那個我在這邊玩我的game
那所有的rendering
所有的運算都在雲端
大概不會這樣子
因為你的手機有一定的能力嘛
所以本來就有這種誤補的狀況啦
那那個我覺得在server這邊
可能最主要它會上來一個很大狀況
是因為AI的那個訓練跟推論
它的不對稱性
它這不對稱性並沒有被消彌的狀況
可以解釋一下這個所謂的不對稱性是什麼嗎
對 就是要學很久
要學很久但用起來很快
就例如說我要訓練一個AI
要花很多資料很多力氣很多能量
然後那個搞不好有些ESG的議題
然後這些事情
所以你要花很多力氣去訓練
那但真的是去推論
就是拿這個用好的模型
訓練好的模型來用
需要運算它很快
所以這個不對稱性
讓你不但能夠說
我有一個小小的伺服器在家裡
我小小的脾氣在家裡
就去訓練然後就可以用
因為尤其現在大的語言模型
是
那你需要很多平行的運算
你需要很多分散式的那個記憶體架構
你需要很多高速的那個聯網
這個伺服器中間要聯網
那記憶體可以互相access
你才有辦法訓練一個大模型
所以你這種事情在edge端做
當然是會有困難
嗯 就很貴啦
edge端要裝這個可能不知道多少錢
也有可能就是完全沒有效率
所以不大可能會贏
對
這是現況嘛 對不對
現況是這樣子
那又是什麼原因會讓你們說
還是想要去做edge這邊的開發呢
所以這個就是剛剛講的嘛
就是說其實假設我訓練完了
我拿到前端來應用
其實是蠻有可能的
看不同的應用嘛
是
所以其實你就看現在的手機的相機
不是很聰明嗎
可以認真的連啊這些事情
其實在當初訓練花很多力氣嘛
那現在實際來應用是很快的
所以在edge端要做推論
基本上就是蠻合理的
尤其有一些privacy的原因啊
你在這邊照相片
然後他的臉是誰的
你不一定想要丟到cloud大家看嘛
那有時候可能沒有聯網
你沒有辦法接上去用
你可能在本地端要去應用
所以本來edge就有它的很大的應用的市場
對 所以這個不用自己
本來就有這個市場
那主要就是說這兩個的不對稱性
在例如說我們現在習慣影像的應用
好像都ok了嘛
但是你要知道前幾年
做影像辨識這個事情
是
他還是得要用很昂貴的
桌上的處理器才可以執行
對不對
是
那在這幾年來
大家一直不管在那個硬體的優化
還有在模型的這個精簡化
都越做越好嘛
所以你可以看看
其實這一樣世界有這種
變大縮小變大縮小這樣
新的應用出來一定要用很大的模型
那過一陣子大家就有一些方法說
這個模型其實沒有那麼多
效能過正
這裡很多運算是浪費的
我們可不可以縮小一下
改一下那麼convolution的kernel
改一下這個model的幾層
然後讓它比較有效率
所以這個應用因為是新的
所以他現在要做
其實要做influence也很困難
所以你要全GDP一定要在serve上面跑
那那個你看開始有各種不同的
LAMA APACA這些
不同大小的模型出來
那他們就會想辦法在研究方面
把這些模型一樣的功能的模型把它縮小
其實我記得在上個月就已經看到
蠻多人是把這種語言模型放在手機上面
三星的手機上
是啦
沒有錯
因為你那個模型
就是說我們這個東西還是運算
運算就是軟硬協作
對
那軟硬協作就是
如果硬體的速度比較慢
那軟體可以動的速度比較快
所以一定會有人做這個事情
所以這兩個東西都優化嘛
硬體變快
對
對不對
然後那個模型變小
那這兩個一起做
它的速度達成率會比較快
所以目前你覺得在Edge這邊
未來最主要的應用會是什麼
其實Edge很多應用啦
就是非常非常多啦
就是例如說我們現在在這個Podcast用的麥克風
它其實也可以有Edge應用對吧
對
那你要過於雜音
你要做Echo cancellation
然後你先要用指向性的去處理這個事情
那你可能可以假設我不要花那麼多錢
在麥克風上面嘛
對不對
我可以花一些錢在處理器上面
然後就可以取消掉例如說
隔壁的人在講話的聲音
那低音這都可以做嘛
那這很清楚的
那我覺得這也是很環保的事情
就是我那個
你看麥克風越做越小
那但是它的那個拼音資格越來越好
我可以用運算方法
處理物理的問題
對不對
那相機也是一樣嘛
對不對
相機以前不是背一個大鏡頭在那邊拍
那現在為什麼小小的鏡頭可以一樣
那我們叫做運算照相學
Computational Photography
它就是用運算的方法
把一些訊息補起來
對吧
就是例如說簡單有美肌這種東西
還有搞景深這種東西
晚上可以拍照
晚上拍照你就一次拍很多張
那想辦法合在一起
就可以模擬一個大鏡頭的行為
所以這些東西都是一樣
那個一樣我剛剛講有軟硬協作的事情
那我們可能很習慣的去看
這種所謂純運算的問題
但是這些其實我們身邊很多不同的小的應用
就像剛剛舉例這個麥克風
大家比較不會去想到
那這邊會有很多運算的需求進去
像你們在開發這種東西的時候
你們會直接需要去設想
它的應用場景可能是什麼嗎
還是你們只是像是
就是這個平台你們要拿去拿去用都可以
其實你會有一些設想
但是我覺得這個跟你創業一樣
我不知道你們這邊
一開始想要做的事情
跟後面做的事情是不太一樣
理解的意思
就不斷的pivot這樣子
就不知道到底什麼時候有市場就轉過去
對不對
有時候那看這個市場你接不接得到
你一開始總有一個設想
但是我覺得例如說你的市場
你的聽眾跟你的客人
可能常常會surprise你對不對
那有一種是好的surprise
有一種不好的surprise
那好的surprise就可以變成你
新的那個開發的下一個目標
這是很正常
你們現在有看到任何的surprise嗎
很多我是不能講的啦
因為現在DA啦
就是有一些各種不同的應用
但是我覺得我們現在做的這個AI的處理器
它是一個我們叫細製材
就是說我們做了一個那個
我們做一個IP嘛
IP 對
那我們再拿去交給這個
IT設計公司
它放到它的SoC
那它再去Tape out
所以我們客人大部分會做這種SoC的應用
對
我這邊可以請教一下嗎
對 好
我比較好奇
因為你們就寫是細製材嘛
但我業界可能比較不熟悉啦
那一般我們講叫細製材的
通常是已經有Tape out過的
已經驗證過設計的
對 這個是可能名詞看看怎麼定義
一般來說
有的人叫做hard IP
就是說你真的對於跟著製程比較緊的
但是我們沒有跟製程那麼緊
了解
大部分的製程都可以跟著跑
了解
所以有限定在怎麼樣的製程之下嗎
還是說它只是應該說它就是一個演算的方法
一般CMOS就可以
並沒有特別的挑剔啦
沒有特別的挑剔
了解
因為市場上在談的IP
通常都是這種已經在晶圓廠上架販賣
上售人已經可供驗證過的那種
所以有些狀況是這樣
你做這個有點像是你做一個Library
是
這個Library必須要有確定用
是
所以我就說那我花一點錢去
放在晶片裡面去Tape out
做個Test chip
跟人家講這真的會動
所以那一個東西比較像是一個
說服客戶的一個市場手段
是
業務手段
它並不是一個必須的
因為你到最後還是在販賣你的電路設計
對
那客人說你這個東西
到底能不能用我怎麼會知道
那你就看你等一下怎麼證明給他
主要是這樣
OK
反正我可以簡單理解的是說
我們這東西其實現在的狀況就是說
我們就提供給IC設計的這些廠家
那他就是把我們這個東西包進去
對
對我們未來來說
就我不知道市快一點
我們先講一下
就是IP的收費模式
通常就是譬如說你白客是白Pix
或是白Waver
對
應該就是大家類似這樣的模式
差不多
了解
所以我們像我們這樣應用的話
因為是在Edge端
我們會是應用在3C產品裡面嗎
有沒有想法
對這個是好問題
我覺得像我們目前還沒有需要
當我們有客戶開始在TayPal
這個東西因為我們今年才宣布
是
但是現在有客戶開始在TayPal
那我們通常因為客戶保密協定的原因
我們也不能把假客戶的晶片拿去給客戶看
是
那所以我們當然也有可能考慮自己去TayPal
但目前並沒有這個很大的需求
就是主要原因是我的晶片是很低耗能的
相對也是比較低算力的
是
但是它的耗能的效率是好的
了解
你慢沒有關係
但是你用的能量跟你那個能量比
它是好的就可以
那個叫什麼
耗能除以那個運算能力那個指標
對對對對
我忽然忘記叫什麼
那叫做Perf per Watt
是是是
Performance per Watt
你看我們的Performance per Watt
相對是非常高的
所以因為這個原因就沒有太多這種
像你講的那個TayPal的Request
大家不會說你做個晶片我才相信
目前就是它模擬它就覺得
夠快然後夠輕就可以了
所以實務上我們並不是說拿去做傳統的Edge
例如說我們想RoleCom啊
LibraCore啊
放在手機上面你覺得是Edge
我們是放在這個手機的周邊
了解了解
例如說手機各種不同感應器
或者例如說它的攝影機什麼這些東西
或是你的Laptop
有其他不同的設備
它是Edge裡面的Edge
理解理解
所以我們都通常是講Edge of the Edge
叫Far Edge
它需要很低很低的算力對不對
那它其實可以造成很大的綜效
我剛剛舉過這個麥克風這個例子對不對
那麥克風這個
如果說我在麥克風裡面放個AI
剛剛那種AI可以理解
這個傳統就叫做Cocktail
Cocktail Problem就是五個人在講話
那你怎麼樣把這五個人的聲音分開來
那如果你有一個小的AI在裡面算
那算出來的聲音就是一個人的
那你直接把這個音源插到你的Mixer
對不對
是
什麼事都不用做
對吧
也不用三支麥克風了
就一直就好
對對對可以
但另外一個可能性是說
好那我什麼都不要算
我就是直接丟進去Mixer
然後在Mixer那個Edge做一些運算
那這個就有缺點就是說
那你這個Mixer要複雜一點
這個Mixer可能要跟麥克風做溝通
所以你就要一個新的介面出來對吧
所以這些都是不同的
你在做系統設計的時候
也有不同的考量
我可不可以給你一個
音質很純淨的麥克風
這樣就好了對吧
還是我給你一大堆資料
丟到Mixer叫你去算
那那個手機上面可以有一樣的例子啊
它的那個鏡頭上面
搞不好鏡頭上面要做一個自動對焦
那它是不是要做人臉辨識啊
臉要清楚啊其他模糊沒關係
那所以這個鏡頭要做自動對焦
要做人臉辨識
它現在是要把那一個
它看到的東西丟到手機的處理器
然後那條線很長嘛
你從那個晶片的角度那條線很長
你要丟記憶體過去很昂貴
那你那個相機一打開就發現
手機是熱的
對不對
那你如果把那個整個運算放在前面
那手機就不會熱啦
所以我有點好奇
這個的差距在哪邊
差距在說
我越前面算需要的資料量越小
還是像你剛剛講的
就是我只要丟到後面去
因為我就要丟東西嘛
然後我就要傳輸啊
記憶體什麼的就要多
然後就是
是因為前面要的資料量小
還是因為我要傳輸它很耗能
就是好處是大
所以其實好問題
兩個都有可能啦
那其實你耗能大
傳輸速度慢
跟資料量大
這些問題到最後看起來是很類似
也就是資料傳輸不順嘛
對不對
這應該跟記憶體的那個
存取架構應該有關係
對對對都有
什麼逢牛慢架構
逢諾伊門啦
對對對
所以其實就是逢諾伊門
就是一個處理器
一個BUS
下面有一大堆記憶體這種東西
就是說那BUS其實有可以好多個
就是近的可以有一個Near Side BUS
遠的可以有一個遠的BUS
那近的一定是比較方便嘛
是
那所以記憶體架構來說
對處理器是很重要的事情
我舉一個比較生活化的例子
我剛剛進來你們這邊
謝謝你們請我喝了一瓶可樂
但是可樂可能去樓下7-11拿的
或是去Costco買的對不對
那我今天來
你說要喝什麼
我就說我要可樂
那你就說好沒關係
我去7-11幫你買一瓶
很慢嘛
對不對
所以你放一些在這邊
那這有點像很近的記憶體
很快就可以拿到
但你的缺點是你要買一個定向針來騙
對
所以所有的運算都會有這種
記憶體的
遠近一端存取的問題
對
近的話就快
但近的話會有一些cost
那到最後你就是看要怎麼安排這些運算
讓它比較有效率啦
例如說剛剛舉的例子
如果說我的攝影機要做對焦的事情
對不對
那我可能近端
如果都完全沒有看到人臉
對
那我搞不好有一個功能
就是說沒有看到人臉
我就完全不要開景窗對不對
就不要讓它動對不對
那這樣子是不是整體的省電又會更好
對不對
所以大概就是有這些不同的
一樣我覺得把它當作一個系統在看
那我們怎麼樣用最遠端的Edge
近端的Edge
還有這種雲端這些不同東西
組合出一個最有效率的運算
通常都是這樣子
所以其實
優化結構
這樣就合理吧
對不對
因為這樣就等於說
因為你一開始會說
它的算力並不是到非常非常強
可是一開始我聽起來說算力不是很強
所以可能就是不會用在像手機
或者是電腦這麼複雜的這個硬體上面
可是它聽起來不是
反而是你越複雜的
如果你有辦法越把這些計算到
第一開始
就最早接收到那個裝置
然後你可以讓這整個
就算不是這個整體效能提升好了
至少電池可以放大一點
就電量就變多了這樣子
對啊
所以其實這個需不需要在
最遠端做運算
其實可以用一些量表去分析
例如說我如果說
它可以得到的效率非常好
那我們可能就會做
如果說它增加了硬體的成本
不會增加很多
那甚至可以省其他地方的成本
那我可能也會去做
對不對
有時候也有我們叫
Duty cycle的事情
Duty cycle就是說
假設我的手機
上面那個攝影機偶爾要對個角
那不一定會想要放在上面
因為你手機不是整天在拍照
但是你如果有一個
例如說監控攝影機在上面
整天都是在拍照
那你就放在最前面
因為它整天在拍
那它的結果一直被後面用
所以後面的大的處理器
就可以省很多力氣
對不對
所以你看它前面
那一個小處理器要花能量
但是它花的能量
可以讓後面省很多
那這整個系統算起來是平衡的
它就有道理去做
對啊
這個大家的算法是一致的嗎
有個公用的算法還是
就是各家自己評估
這個跟應用是很有關係的啦
然後也不好說
通常我們在做
這個就是叫做
系統架構設計
那系統架構設計
聽起來是很抽象
那就是軟硬體的架構師
我以前在NVIDIA就是做這種
叫做3D Graphics Architect
就是在做架構
所以架構就是
不會軟體也不會硬體
謙虛了啦
都要懂
都懂一些啦
那怎麼講就是說
因為像NVIDIA這種公司
它有很多軟體的人
那軟體有時候是
跟硬體一起合作
找出比較好的解決辦法
那有時候軟體是
幫硬體處理這個迭代問題
那個處理迭代問題
說難聽一點就是
插屁股
這麼講
硬體有bug嘛
那你把硬體bug修好
然後再回來找台積電
然後再修好
然後再推出市場
半年至少對吧
對那這半年怎麼辦
被罵翻了嗎
那我可不可以軟體改一改
就workaround的做法
對的workaround
事不宗一不原已嘛
我們有suboptimal mode
也就是說當機了
那driver就重開嘛
自動重開機這樣子
對自動重開機絕對是一個
必須要重開的
BnB一定要可以的
不管遇到什麼問題
就我們工作人員說
我也不知道
不然我重開就好了
他就重開機啊
重開就好了這樣
對啊我開車
是他開到一半他都會重開嘛
對那他這個產品
能動的產品一定有bug
但是我們叫做
你要mitigate the bug
對不對
你不能讓使用者
或是你的客人
受到這個bug
是
對所以你怎麼處理
有各種不同處理辦法
了解了解
那像你們前陣子發表這個
Edge AI加速器
對
所以它這個東西
跟剛剛講的東西
它大概是扮演什麼樣的角色
你們對它有什麼樣的期待
期待
其實我們覺得
你做一些事情
像這一類的事情
需要有一點意義
意義的意思就是說
不能說別人做事沒有意義
就是我假設
例如說我的身材
我要去跑百米一定輸的嘛
是
所以我不會贏的地方
我直接放棄
我想在最高算力的處理器
我是直接放棄
對但是在這個中低算力
例如說在手機上面
它需要做的應用也很多樣
所以它也需要很多軟體的資源
那所以這幾個T的算力
3T 5T 10T的算力
我覺得也很擁擠
很多人做
那需要的投資也大
可是我們這邊做的是
比較像特定應用的處理器
那這意思是這樣
你看如果說有一個東西
只會做三種AI模型
你是不是可以把它設計得很有效率
是
對不對
那edge of the edge
你差不多就是黏在一個
很特定的device上面
你會做的東西不多
對不對
所以因此我們可以做的東西
就非常有效率
但是這個沒有很好做
這個就是你要把軟體跟硬體的協作
這個模式做得很好
所以它其實會變得就很匿跡
因為你要跟應用端會有非常強的連結
它類似一點變形蟲
mRNA那種感覺
就是它雖然是niche
但是你可以把它retarget到不同的應用去
但如果retarget不用再改嗎
它需要改
但是它要改的
就是有點像樂高
對不對
你要組一個星際大戰
你就重新拆一拆
可能會少一些零件重新弄一弄
但是你的零件沒有差太多
它是一個重組的過程
它不是重新設計的過程
我覺得蠻有趣的
因為如果我們回去看
剛剛講最高算力
就以NVIDIA來說好了
原本在做GPU
後來發現說很多人發現說
GPU可以平行運算很棒
那我就來做一個GPGPU
就是我全部都可以用
可是你們現在反而是說
可是這邊都是拼最高算力
沒關係 我不要到general purpose
我一樣先鎖定這幾個purpose好了
所以就把它拉回來做比較
就是這種特定的應用這樣子
有點ASIC回來了對不對
對
剛剛不是講we are reincarnation嗎
就是再生轉世
對不對
我記得我在讀研究所的時候
就有一些同學說
那GPU可以做很多事
那我們那時候找不到很好的
這個平行處理器
那所以我們就hack GPU來做很多事
然後後來說這個不錯
我們就同學們一起註冊了這個網站
叫GPGPU.org
對
那所以那時候做什麼
就是你想GPU當初就是畫圖
對
那畫圖做什麼
就是兩個什麼材質
映射 texture mapping
那兩張圖加起來
對
對不對
那我們就GPGPU做很多事情說
好這個你可以把這個東西拿來怎麼用
那所以一張圖一個texture
就是一個矩陣
對不對
那兩張圖加起來
就是矩陣相加
是
對 所以我們以前做的
GPGPU做的事情就是去hack GPU
把那個數學運算換成GPU看得懂
不要跟他說我要兩個矩陣相加
你就說這兩個texture blend在一起
做那個訊的這樣子
你也不要跟他做
我要做線性內差
就說好我做那個半透明
blending alpha blending
就去騙他
那出來的東西又是另外一張圖
就你們是用
把它轉成繪畫的語言在跟他溝通
沒錯
那所以後來我去NVIDIA的時候
我們那時候就在說
這個東西太麻煩了
你要會數學
對
你要會搞這個
你要懂那個
OpenGL這些東西
對 你要懂電腦繪圖的這個原理是什麼
那這個有點太囉嗦了
所以後來我們才在NVIDIA開始
做這個CUDA
CUDA就是說我們就bypass這個事情
矩陣就矩陣
那中間那一層
把矩陣變圖這件事情
可不可以閃掉
那做這個東西需不需要一些硬體資源
所以把這個東西合在一起做就是CUDA
很酷
所以一開始你們這個GPGPU.org
那個時候就已經有GPGPU這個詞了嗎
有
其實GPU拿來做運算
是先於CUDA這種事情
那一開始會拿GPU來運算
其實大部分都是懂得怎麼運用GPU
來繪圖這一群
那但是我要繪圖
但是我也要做運算
對
但是那時候CPU不大給力
怎麼快怎麼辦
所以就是用GPU來做
那當然還有很多東西要做
那個把繪圖硬體拿來運算
還有很多問題
當時嘛
這大概差不多20年了
那最大的問題就是精準度的問題
就是我們喜歡用浮點運算
是
就是地球到月球的距離
要用公分可以表示嘛
對不對
但是那個GPU一開始就是8個bit嘛
顏色嘛
0到255嘛
就這樣而已
所以原來的數字精準度是不夠的
所以後來我們還是得要在GPU裡面加這個浮點運算
這也是某種程度
為什麼NVIDIA的處理器那麼大
因為其實我們的腦子沒那麼好
就是說我在做很高數值的懲罰
我們要算很久
但是我們一看這是一瓶水
這是可口可樂
一看就知道了
因為做這種事情
本來就不需要很高數值精度的東西
所以其實我們自己的處理器裡面就是
8個bit、10個bit、16個bit都可以用
其實不要浮點數了
所以因此你這樣子又省很多電嘛
這些事情就是特別的workflow
可以讓你變有效率的
其實我對於這個
因為你也在NVIDIA工作過
我們對於這個最高運算的這個霸主
對
你有什麼想法嗎
就是我們現在CPU還有機會嗎
因為Intel一直想要打進來
他們還有機會嗎
我們先講文化的問題啦
你去這幾個公司繞一繞
那你就大概可以決定你想去哪個公司工作
真的
我覺得就是有點可惜啦
因為Intel我以前待過
剛顧問啊什麼
我做過一些project
以前有一個在去那邊當實習生嘛
那賺錢 賺旅費
賺學費啊
那我們那時候做一個project叫OpenCV
OpenCV就是第一版的時候有那個
人臉辮子還是用古代的方法
那時候在Intel嘛
我覺得還蠻progressive
所以OpenCV是Intel做的
對 但是那個比較像是
裡面一些研究員就做做做啦
因為在我念書的那個時候
所有視覺都是用OpenCV啊
你做那個什麼攝影機校正那些東西啊
電視裡面有一些
因為我研究所要做的那個project就是
因為我是土木系的
然後我們想要做那個無人工地
所以就要做一個機器人
自動去搬水管
然後搬到那個位置這樣子
你需要認水管嗎
OpenCV認水管認不出來
還好 因為我們有做一些mark
OK OK
所以你用那個什麼FIDUCIO啊
對對對
合理合理合理
對對 因為edge detector
對對對
理解理解
對啊
所以Intel那個時候你說
好 你們一開始做了這個
但是那個文化又是怎麼樣呢
我不大想越足代跑
是comment別人的公司的狀況
我剛剛講的是說你去看看
然後看決定你自己會想去工作
這個狀況
會長期的決定這公司強不強
就是如果大家都不想去那邊工作
或是你認識同學們
沒有人想去工作
長期來他就不強
但是這個要一點時間
就人才的斷層不是馬上就來的
他是開發嘛
他不是例如說一個工廠
沒有工人就停工
不大一樣
但我覺得假設最高算力的霸主要挑戰
比較麻煩的是軟體需要很多時間
當然也要錢
但是需要時間
時間大概就是說
軟體這是一個很漫長的產品開發過程
那像ENV這種公司
它有很多人在寫工具
在跟programmer做溝通
Apple叫Evangelist
那它這個就是叫做Developer Relations
跟這些人做溝通
那我以前也幫過這些嘛
就是舉個例子
我們有一個遊戲跑不快
那是很重要
你一賣Matchbox出來
跑分很差
就沒人要買這個繪圖卡了
所以你怎麼辦呢
你就是去找人家找這些寫遊戲的
說我有一個新的那個API
你要不要用
人家說我是為什麼要用你的
對 我不想特別寫給你啦
我也要用AMD啦
ATI的可以
所以你要有點拜託他
對不對
你要有各種不同的方法
讓它的應用
可以跑在你最新的介面上面
那這邊就有各種不同的手段
對不對 威脅利誘
不要講威脅
可能沒有威脅啦
我不知道
這大概是
對
但是就是說
例如說我們幫你寫程式
也有可能啊
我辦一些活動啊
那那個請你會來啊
然後來學習啊
這些事情讓
這一個處理器有很多開發者
那開發者移動是很慢的
這個Ecosystem好像建起來比較難
對 我覺得主要是開發者
那你就來看看說
那其他也買不買得到
類似的Domain的應用
所以其他公司就更多
這讓我想到就是
就也是最近的啦
因為我們在一開始
在學Machine Learning的時候
然後都會用一本教科書
就是這個
Introduction to Statistical Learning
對
就我一開始研究所的時候
也是拿這本書
然後它的範例是R
因為在10年前
大家都會說
反正學術圈Machine Learning就是用R
對
可是這本書到了今年7月1號
它出Python版
對
然後我就發現說
有點慢
怎麼撐這麼久
明明出來以後你就發現說
用R的人越來越少
以前還會說什麼
就是你比較偏工程的
你會用Python
可是你可能單純視覺化
科學家們要用R嘛
對不對
你後來發現說沒有啊
你看那些Google的人
他們也全部都用Python啊
對啊
然後就發現說
已經Python這麼久了
結果這本教科書
現在才開始出Python
是啊
對 就發現說
真的像你剛剛講的
這種軟體工程師的群
你要換一個語言
對他們來說
真的就是換一個國家
換一個什麼
對 我覺得這是有趣啦
而且不是一個人去換的
我覺得你說會寫R
可能會寫Python
會寫C
C++
這Overlap是滿
但是大家有自己喜歡
跟手感的東西
我是那個中年阿伯
所以沒有Compiler
沒有編譯器的東西
我都不舒服
沒有跟我講這是整數或是伏點數
我有一點不舒服
人有一個不同的喜歡跟慣性
這個編輯器要按個R2才可以打字
這我覺得很習慣
對 每個人不一樣
這個
每個人不一樣
所以我覺得這個沒有辦法啦
那大家有喜好的原因以外
我覺得是語言本身外圍的Community
對不對
例如說你有很多Framework可以用
還有很多Framework的Framework
架在這個上面
那它就會越來越大
所以這個其實是滿有趣的
一直都有不同的校長
了解了解
那也有那種語言
大家就一直都很討厭的
像什麼
不好說
Pearl好了
我應該選到Pearl
我以前那個
它有那個叫什麼
Natural Expression
好 那我們那個
前輩就有跟我說
這個Pearl真的是一個髒話版的語言
說連用的字都一樣
金泰傲啊
那個圈圈叉叉
那個語言用的符號
跟它髒話很像這樣
如果大家沒有聽過有人在講Pearl很棒
就是
只有說很習慣
沒有說它很棒
對
有些東西你可以覺得好用
但是不喜歡
我覺得它有點像是這種東西
對 -了解了解
就Python也是啊
對 大家都會說你一種東西有十幾種寫法
到底是什麼意思
這才是語言嘛
要不然就是那個工具啦
對不對
你是這種派別的
對 就是那個
自由表述
是啊 就一個鐵鎚就有一根棍子
你就拿那個把手來敲
沒什麼其他的選擇
那就是工具
那這種工具是可以改定義流程的
但是它就比較不像語言
對不對
語言會有一種自由度
在這自由度你就有一種創作感
對不對
你就不會覺得說我是工具人
對啊
還蠻誇張的
我寫的時候怎麼都沒有想那麼多
對
會動就好了
真的
讓我動起來 拜託
好 不會動
可以哦
你做一個馬農
你總要覺得是自己做的東西
是一個美感的東西
對不對
你總不能
我還沒有到那個境界
對
你不想要就是覺得說
這個是一個工具
一一動一動
那時候你就覺得
自己比較像是在上工
而不是在創作
就這種東西交給H.H.P.就好了
對
這個太難了
就沒有這種
沒有你的個人風格在裡面
是
對嗎
對不對
我的Tabs要三個space
跟你不一樣
我覺得我們今天的訪問有點
往太宅的方向
太tech是不是
不會
不會
所以可能聽眾可能會不下架
我們聽眾很多竹科的
真的
很多城市的
他們可能聽到這個題目會很生氣
三個Tabs
三個space
什麼東西
我給你解
我現在的迷思我不會接受
真的
等一下出去就會跟我們工程師吵架
有沒有搞錯
其實我覺得這個滿好玩的
工程師有自己的奇怪的事情
像我之前設計一個NVIDIA處理器
中間有一個buffer
然後那個buffer
要定義它多大
我就寫了一個層次
因為做太小會卡住
做太大會很貴
然後我記得那時候的數字
好像一個奇怪的數字
什麼376這種東西
那我就說這太好了
我就去present說這個buffer
確切數字我不是很確定
但是一個奇怪的數字
像376這種數字
結果那個下面的人
聽我在講這個設計的人
全部都覺得我的騙人
為什麼
一定是2的密次
128+256
對不對
128+256我還可以接受
對不對
那是什麼東西
這就不對
好玩
剛剛有提到一個東西
我想再追問一下
就是在這種ecosystem
因為現在的霸主就是NVIDIA
對不對
它非常非常強的霸主
你覺得它做了什麼樣的事情
在維持它的這個競爭優勢
不停的做
就是不停的做
就是不停的做
那Intel為什麼失去了呢
沒在做
真的嗎
對 其實我覺得
其實如果你這樣子想
簡單的來說就是
software defined的事情
比以前越來越嚴重
你有那種像Google這種
almost always software defined
那你也有像Intel那個
幾乎就是always defined
然後我覺得
你如果說你的大環境
就是你的workload
你的處理器在執行的東西
如果跟著時代一直在變動
那你就必須要投資很多在軟體上面
是
但是你的大環境
譬如說你的指令集都叫X86
30年都叫X86
那你在上面的投資就變成option
可有可無
對不對
但是你說從像NVIDIA這種處理器
5年前的處理器
跟5年後的處理器
它都不是一樣的指令集
所以你怎麼辦
你一定有一個軟體層會去做翻譯
對不對
所以這個翻譯的結果就是
你必須要一直維持這種
譬如說各個不同處理器的相容性
這些東西
這次是很昂貴的
所以你公司執行方向就會不大一樣
所以那我覺得我們現在
自己做的這個Edge處理器
有點像是這樣
就是說你看到以前
你要做一個處理器很困難
是
為什麼
因為有一個X86
卡在哪裡
你沒有任何理由要買其他的東西
但是你看現在有各種不同的workflow
不同的form factor
要塞到不同的處理器
那它如果說在這些地方
大家開發的需求又沒有那麼強
那我覺得你可以做一個特製的處理器去處理它
你覺得這個東西它會再回來嗎
因為到時候大家會不會又覺得說
哇 我可能要做一個產品
我要懂一大堆的指令集
我不如就懂一個就好了
對 所以這個我覺得就是有趣
就是看你軟體硬體怎麼協作
開發了這個東西
其實你就想好
那回到我剛剛講再生轉世的概念
我們現在就先假設
我有固定的錢可以花在一個地方
例如說剛剛的例子
我有一個攝影機
攝影機上面有一個
那個CCD旁邊有一個什麼傳輸的那些東西
你就只能花固定的錢在身上
那你原來花的錢只能買幾個電競體對不對
現在搞不好可以買一個小處理器
那這個到底你那個錢要拿去做什麼
因為到最後你那邊錢都不花
你到最後最貴的那個殼
你贏不了別人對不對
所以裡面塞一些運算好了
塞一些運算要做什麼
那因為那個電路微型的話
你就有可能
你知道這個
原來這麼大的面積這個budget
在那邊原來不是什麼東西
那它有可能到一個點之後
那那個其實可以塞個處理器
對吧
效能大幅提升
對啊所以你看手機就一個例子
你看它原來有一個耗電量的控制對不對
那那個耗電量不大變的狀況
或是變小的狀況
我的那個摸的定律上
你的處理器可以塞進去
所以原來打打電話
寄20個電話在裡面就了不起了
寄50個電話
寄128個電話
到最後可以吃個彈吃蛇還不錯
但是它的固定
它的budget不大變的
就是那個耗能啊
跟那個它的花的錢
不會動得那麼快
但是你可以做的事情會增加
所以我覺得這個是主要的關鍵
因為我們技術在進步的時候
它就會造成這種滿足偏移
那你怎麼看這個摸的定律
摸的定律有點像
他們叫self-fulfilling prophecy
對不對
self-fulfilling prophecy
就是例如說以色列人會建國這種事情
我不說盛行對或不對
我們先不討論這個事情
但是你認為它會是對的
大家就得要跟著那條線去做
就有些人說台積電之所以那麼成功
就是台積電一直相信
但Intel其實很久以前就開始想要
做不到啊
做不到它就說不相信
你覺得哪個是因哪個是果
所以這是self-fulfilling prophecy
就是說因為有這個預言
這個預言就會成真
沒有這個預言它就不會成真
當初它搞不好講比較高
搞不好也會成功
因為它也是一個
我們叫heuristic
一個經驗法則
如果經驗法則它那時候歪斜一下
跳得比較快
搞不好你小時候就有iPhone 12可以用
我可以不要玩快死蛇好棒
對啊
然後可能這一代就全部沉淪了
因為大陸的
對啊 所以一樣
我覺得它還是一個
self-fulfilling prophecy
大家知道有一個目標在哪
然後如果沒有超越
或達到那個目標
很容易我會在產業上被淘汰
所以你覺得這個東西都是
只要有心都可以做到
人定勝天的概念
但不是啦
物理上面會有一些問題
所以現在台積電就做3D
我2D不夠了我就轉3D
對 但是3D
我覺得也不只是
device微型化而已
你當然3D可以跌得比2D還多
Core這些東西都有
今天可能不是重點講這個
但是我覺得其實我之前跟
做IC設計的人討論這個事情
為什麼要3D的RAM
大家也知道可以塞比較多設備
其實有另外一個重點
就是說這個我們以前讀書有講
叫做computational order
這怎麼講
面積是長乘以寬
假設是正方形
面積就是長乘以寬
就是平方
但是邊長是長加寬
所以你兩倍的場寬
會變成四倍的面積
中間面積幹什麼
塞運算
邊邊的收藏幹什麼
塞資料進來
所以你去看
假設NVIDIA你去看好
它過去20年的那個運算速度
跟記憶體的速度
運算看起來就很像
N平方的線一直上去
但是那個記憶體的速度
就像一條直線一樣長
所以這個是最
對 這個就是最基礎的問題
就是說資料如果只能從旁邊進來
變成兩倍的晶片
它是兩倍的速度
但是變兩倍的晶片
會有四倍的運算
那怎麼辦
所以不往3D跑怎麼辦
比較近啊
不是不是
他的意思是
比較近 對
對啊 比較近啊
而且可以有
就是同時間可以傳的比較多
它其實是背在上面
那個其實就是我們之前提過那個
Memory Wall
就是你再怎麼算再怎麼快
你就是會卡在
Memory的速度
但是你看
我如果邊長變兩倍
它就是一個叫N一個叫N平方
你還是差一個N
對
但是我變立體了
對啊
立體的一樣的問題就是
面積跟體積的問題
對
可是我至少變面積了
一個N平方一個N三方
對 還是差一個N
對
但是最少是說
它在實際上的比例沒有差那麼多
對吧
因為它一個是N三方
假設我是1000N三方
對不對
真的嗎 面積不是一樣嗎
比例都是一個維度啊
比例都是N
但是我如果一樣
N平方是1000
對
然後那個N是多少
一個平方一個是N
對啊
一個30
少一個啦
那好像30倍啊
我說比例的話不是差不多嗎
這個是因為你到最後
假設我一樣
要達到假設1000的算力好了
對
那面積是1000
它的邊長是差不多30左右
它的倍數是30倍
1000除以30
30倍
然後如果是立體的
一個是1000
對
是體積
但是面積就是100
100 對
所以差10倍而已啊
對
問題變小了
對
所以在相同算力的情況下面
我可以有更多的資料傳輸
沒錯
更短距離更多資料傳輸
對
而且你從隔壁可以搬的資料越多
那如果資料等的時間少
那處理器就比較不會叫20
stop motion
我們在運算裡面
在這個狀況你看
如果你的問題需要很多資料
那我有n平方的算力在裡面等著
外面只有n的資料進來
它很容易二傻
對
所以現在大部分處理器
都是在安排
誰什麼時候要做什麼
這是最大的問題
這是最大的問題
所以你看
新的NVIDIA處理器不是搞一大顆嗎
那很多連線嗎 幹嘛啦
那remote DMA這些東西
它是為了要處理資料問題
所以像現在我們在講NVIDIA的
大概幾個BIT
其他都已經不只是單純的GPU
GPU就是一點點
其他有很多就是怎麼BIT怎麼BIT
你覺得這個東西的會是
未來都會長這個樣子嗎
因為我怎麼BIT怎麼BIT
其實就牽扯到剛剛的
怎麼處理啊
哪一個線啊
或者是我的距離怎麼樣
對啊 所以我覺得高速運算
現在你看
你一定要把資料的password
弄到很短
那要不然就是把問題切得很乾淨
讓兩個處理器不要一起打架
我要這個資料跟你資料分開
所以你們現在做的比較像
桌子的那個樣子
對 但是我們的數量其實有點不一樣
那我們大部分狀況來說
我們自己的應用
可以把模型縮到很小
然後把運算也做得很特別的特用
但這樣其實就是切得很乾淨的概念嗎
對 一個也是切得很乾淨
但主要其實我們的處理器有效率
跟我們做的事情
比較沒那麼多樣是有關係
就我如果一個泛用型的機器
它能做很多事情
例如說會游泳的機器人
也會跑步的機器人
又會你知道搬貨的機器人
他就什麼都要有
但是我只是要一個會搬貨的機器人
他就不用有浮嘛
他不會游泳的關係
所以你就可以省錢
那在處理器的space
這邊是特別的嚴重
就是說有些是處理語音的
有些是處理影像的
那它拉進來的那個資料
拉法是不一樣
那你如果那個線就接了
但是不用
那是非常昂貴的
了解
那如果拉回來到Edge這邊
你覺得目前在發展Edge
不管我們講發展
或者我們講進到終端的應用好了
你覺得最大的瓶頸在哪裡
我覺得定義規格是很大的瓶頸
例如說你假設我們SoC講
我們叫做SoC的公司
他們要做一個晶片
然後要做對
其實是困難的
就是寫那個規格
什麼意思
好 我舉個例子好了
你們去買個車子好了
這一台就是我要的
可能大小剛好
然後但是那個什麼性能剛好
你就會有一種剛好的概念
因為你心裡面有一個想法
對不對
但是你就看看
有些車廠像什麼BMW好了
出了二三十台車
每一台都差10公分
對不對
因為你不知道到底要怎麼樣
才是最適切的
那你說好車子做三十台可能還好
對不對
晶片開三十顆你就破產
是
對不對
所以你要把那個晶片做到很適切
其實是很困難
是非常困難
就是你不能undershoot
你最好不要overshoot太多
undershoot就是做太慢
一定下課
undershoot就是沒有人要買
overshoot就是
浪費
就是虧
就賠錢
虧
而且搞不好太耗電
對 所以這種剛好的這個
其實大家會常常去對標
就例如說我跟我競爭對手
搞不好對標對清楚一點
那就常常會有這種
這一代我贏你
下一代你贏我
這種常常會有這種
贏的什麼意思
就例如說以前NVIDIA跟AMD
那個Graphics部門叫ATI
你在競爭的時候常常你也可以看
有時候我比較有效率
有時候你比較有效率
那通常就是
例如說兩代一個大的架構改變
然後幾數年就是你改
好數年就是我改
那結果後來你的股票就跟著這樣子
S型
互相跳來跳去的
今年我比較有效率
我股票就上來
你就下來
這樣
這個是常見的現象
所以其實所有的IC產業
我覺得問題
當然是也有不同的人高見
但我覺得最大問題是做到剛剛好
那剛剛好是什麼意思
蠻困難的
為什麼是跟同業對標
比較不會是直接去跟客服對標
有時候不一定說跟同業對標
是最正確的行為
但是跟同業對標可能
比較上面會比較容易一點
有時候通常除非你做一些很特別的產品
要不然你一定會有競品
這有點像是說
他們都幫你做好research了
我們去抄答案的感覺嗎
有一點點
但是通常你也會
你看其實你買大部分的產品
你有沒有發現他們都有點對標
例如說手機200塊美金做到什麼程度
100塊美金做到什麼程度
那100塊美金的手機
基本上如果你的100塊美金
跟我的100塊美金手機
例如說我的做得比較差的話
那我到最後只能賣59塊美金
差不多這個意思
雖然說我一樣搞不好是
100塊美金的cost上去想
所以對標有時候是因為商業手段
對不對
就是做架構一定會我們有叫做
system constraint
對不對
然後你的cost跟你的power
area這些都是constraint
你要在constraint裡面最有效率
就是要做取捨
就是要tradeoff
取捨就是最困難的事情
對
你到底要哪一個功能做快
哪一個功能做慢
很難
這就是比較在策略的部分
其實我們AI聊了很多
我們再來聊一下
英愛達其他的部分好了
就是去年英愛達也有跟微軟Intel
就是說要加速5G的數位轉型
然後什麼智慧製造
智慧製造這個詞也聽了好幾年了
對
就是要不要分享一下
英愛達在智慧製造扮演什麼樣的角色
然後裡面有沒有用到一些AI
用到什麼東西
好
那個製造本來就要智慧化
那為什麼
你的定義是什麼
好啦
其實就是說穩定的製造
這是一個重點對不對
OK
有效率的製造可以嗎
例如說穩定的話
為什麼有時候常常會說
我們要少用幾個
不是說我要多省錢
因為製造很大的cost
可能不是在人身上
搞不好像ESG來的電會比較貴
但是如果說我這一群人去
過年去放假回來
換另外一群人
我產品不一樣
生產出來不一樣
品質不一樣
那就不是穩定的製造
所以把人的這個變因移除
就是跟有穩定的製造有關係
那之前不是有那個前輩在講什麼
關燈工廠
那關燈工廠是什麼
看不到的工廠
裡面透抽
不是這樣
是燈關起來
還在做產品
就是無人工廠
就是無人工廠
對
那無人工廠其實
我們講一個最粗淺的事情
燈不用錢
對啊燈不用開的嘛
對不對
連燈都不用裝了
是不是很好
那再來就是
人也不用吹冷氣了嘛
對不對
你就裡面很熱很冷
都可以生產
這樣是不是也比較有效率
所以大概就是穩定生產
有效率生產
這個就可以當作智慧製造
因為我們現在不講設計
我們純講製造
但是回過頭來說
智慧製造有時候有些mandate
必須要跟設計有關係
我就講一個很簡單的例子
你們手機有用過那個什麼
果凍套之類的
軟軟的這種
有矽膠套那種
TPU
那你說假設我一個產品
是要把矽膠套套到手機上面去
這很難生產
對
因為它是軟的
對不對
那那個硬的東西好組裝
軟的東西難組裝
如果真的有這個需求
就等一下能搞個AI機械手臂
正向式學習
就不好搞
所以其實你如果設計裡面
有這些不好生產的元素進來
你的生產效率就會下降
所以設計跟生產是會有一個連動
產生的設計
產品的設計
產品的設計
產品的設計帶到產線的設計
OK
對
所以智慧製造基本上
就像我剛剛講的
穩定跟有效率的事情
那通常會有兩個面向
一個叫做單點式的自動化
或AI化
我們一個例子就是
例如說我們
應該做全世界最多的主機板
一年做大概400萬片左右
那全世界大概有1600萬個伺服器
一年需要這麼多主機板
那主機板說難不難
說簡單不簡單
因為它很大片
所以它其實零件定位也沒有那麼簡單
因為它還是有一些公差
然後還有完了以後
你把零件裝上去之後
到底是有沒有裝好
你要用個OpenCV的東西去看
但是OpenCV看
你常常會把它當作是有問題的
汗點汗壞了之類的
其實沒壞
但是汗席可能反光有點不夠
對它那個照起來是
我有看過人家那個AI剪的
有點像那個叫什麼
X光
對不對黑白的嘛
然後那個它凸起來跟扁平起來
那個其實看起來好像一樣
對
對啊然後就深淺不一樣而已
對
所以你就不知道說它多深多淺
差異多少是壞的
對不對
所以這個東西後面我們就會
接一個AI來看
那就會有一個東西叫止痛率
止痛率就是說
止痛率
對那個直接通過產線的比率
那其實大部分狀況就是說
那你如果零件越多
你看每一個有可能誤判的比率
是個P之類的
你就會P的N次方很高對不對
所以你這個誤判如果小小的
對一個小的產品還好
對大的產品是非常非常麻煩
那很多道理
對因為裡面一兩個
你覺得壞了它就要停下來
所以我們就可以用AI
來把這個事情處理好
它止痛率我們導入AI之後
就增加了蠻多的
不能講仔細數字
但是就是非常多
所以主要是在
多超一半
增加檢測的正確性這一塊
一樣是剛剛講的穩定生產這個產品
對不對
因為好的你也不想要讓它丟掉
壞的你也不應該錯放
對
所以這個是單點的AI自動化
但是整體的
我們叫生產計畫排程
這個其實是困難
那這邊我們有一些effort
那就是像數位轉型
各個不同地方資料可以彙整在一起
對這種事情就會比較有助益
這是你們自己做
還是你們有提供這樣的服務
我們事實上是有的
我們5G四位工廠是在桃園先試點
那完之後我們現在其實是有一個
新的事業部門
在協助大家把5G導到他的工廠裡面
為什麼要特別講5G
就是跟我們手機5G一樣
就一定要有這麼快的速度是不是
還是怎麼樣
對
就是例如說我像剛剛講的
如果說你要做AI
那產線上面放一個
例如說NVIDIA處理器
可能不一定是適合的
那你可能要放到樓上的機房
那你要傳影像是不是
檔案比較大
那你Latency又不想太高
你那個延遲如果太高
就會變成產線等待時間大
所以用5G的話
在整體來說是一個核算的投資
所以這會是像5G最主要的應用了嗎
這是專網嗎
對 這是專網
專網就有點像你在你工廠
自己架了一個自己的電信公司那種感覺
那我們5G專網是用自己的伺服器
搭配那個軟體弄起來
你有點像是
以前有人自己去買PC
然後裝Windows這種感覺
而不是說去什麼Acer
去Dell買這樣子
所以是分開做的
所以我們是用自己的硬體
再加上軟體來做的那個5G專網
我們可以幫大家做這個事情
那你覺得如果是一般的企業
想要來開始說
那我們也想要有
就現在想要有很好的
更穩定更有效率
對
如果一般的企業想要來導入
就除了錢以外主要的瓶頸是什麼
我覺得其實是應用場景的問題
就是說你為什麼要某種程度5G的那個
低延遲還有高貸款
可能還有你需要的是無線這個功能
像我們前一陣子可能
跟中美貿易有關係
我們那個產線移動很快
你說我們很多伺服器
現在去墨西哥生產
墨西哥
對 新聞上面有寫可以講
但是你看這個產線的移動
你如果要做的比較敏捷
最好是不要那麼多線
那最好是對於工廠的要求低一點
例如說我們可能
想要多塞一條生產線好了
那如果原來你有一個什麼
自動搬移機器人
那你可能就沒辦法做這個事情
對不對
因為所有的都架得好好的
但太大台了
那所以可不可以
零件的時候丟個推車一個人推
搞不好也可以
那所以你如果說有這種
敏捷的要去調整產線的需求
那你就不大能夠去接線了
那Wi-Fi大部分因為太Noisy
所以很多狀況用起來穩定度也差一點
所以5G不只是速度快而已
還有這種為了要可以
可行性這樣
對 那所以你如果說工廠想要
移動的速度快一點
我覺得這是一個優點
對
但是一樣是跟你的應用情形是有關係
那以整個智慧製造來說
還有哪些瓶頸嗎
智慧製造我覺得計畫是最困難
像我剛剛講單點的事情
我覺得其實是困難
單點其實是困難
單點困難
單點困難就是說
我做個AI丟到客人那邊
還要跟客人要資料
這是智慧製造AI最麻煩的事情
你說客戶不想給資料嗎
我覺得
就算有Local training都不行
沒有沒有 我覺得客戶的資料問題
並不是他想不想給的問題
那資料根本就串不出來嗎
對 像剛剛講資料治理的事情
就是說能不能標記
能不能好好的去儲存
能不能真的把它變成一個好的
一個benchmark來訓練你
這個東西真的是困難
對 我光是叫你把你家的所有
例如說你女兒的照片全部給我
我要訓練一個她的模型
都要找一陣子 對不對
那是你重視的資料
但是我們都還很難整理得很好
這其實也不是Privacy的問題
而是怎麼樣數位化的問題
對 這個數位化
你說我每天產線產生那麼多照片
你有沒有budget可以存它
這些問題都非常多的
不只是Privacy而已
資料定義 保存
就是整個整體資料治理的問題很大
所以是用舊的那些協定會不會
它的能夠處理或能夠儲存的資料
精度是有問題的
對 這個可能跟模型的轉換率是有關係
因為你用舊的資料訓練完
去新的場景不能用
這些東西都很常見
所以現在做大模型做技術模型
我們再製造一件S王這邊去做
就是最好都不要訓練
調一下就好
可以了嗎
差不多
這意思是這樣
你看 例如說我們現在在這邊聊天
有一個Mixer對不對
對
它有大小聲
對
它大小聲裡面控制很多東西
它可能也有那個等化器這些東西
它不是說只是真的純粹去動一個電容
以前可能純粹是
現在不是
所以你要做的事情是做出一個介面
有點像這個Mixer一樣
好幾根東西搬一搬
你就可以用了
所以如果要丟到工廠
要可以用的東西
最好它就是幾個旋鈕轉一轉
那就可以上口
但AI的問題是AI有很多很多旋鈕
我們那個模型裡面很多資料
每個資料都是個旋鈕
那個weight一改
然後幾成
對
所以要做的事情是把這麼多這麼多
可能幾個billion的參數
幾個million的參數
縮減到例如說三五個參數
變成一個面板上面旋鈕
讓它可以用
這是AI在智慧製造我覺得最大的問題
但在Domain有一些特定的應用的場域
我覺得是可以做到
我們也在做這種事情
對
但做到底來說
還是生產計劃最難
到最後我覺得是這種
例如說你像前一陣子不是
有惡物戰爭又有疫情
對
那缺料
要不然就是料太多
然後完了之後又一路接到那個
財務問題
Financial cost可能會增加
我覺得這一串的問題比較困難
可是
就如果你們今天想要去做這個生意
要到這些資料有點太敏感了對不對
不會
我覺得其實是像供應鏈的資料
其實的確是敏感
就是說很難有機會說大家互相共享資料
但是在自己跟自己客戶的需求端
事實上是必要的
就你必須要有自己的資料
你要知道說
你什麼時候可以deliver
然後你要deliver
那promise要做清楚
我今天要交貨
我今天就要交貨
但是你又要想要just in time
像Toyota講just in time
所以我說也不客氣
just in time就是零件不在我公司
我就不付錢
這就叫just in time
對所以你有沒有辦法真的是做到這個事情
然後結果壓榨你的供應商
這也不大對
對不對
雖然你不要運進來
我今天要用趕快運進來給我
這其實供應商的那個財務狀況
可能會因此出問題
所以我覺得這一整串的事情
其實是非常難做的
供應鏈管理是非常難做的
所以就是對你們來說
在做智慧製造這一塊
看起來第一步最容易下手的對象
還是自己的供應鏈
是啦是啦是啦
一定的一定的
那個智慧製造要產品化並沒有很容易
對
你可以當consultant
那你可以賣機器
做overall planning整個生產的規劃
其實已經有很多公司在做了
像西門子這種東西
那我們也有一個部門在
有點像幫大家導入這種西門子類的產品
我們有自己的
這個叫做那個MIS
就是Manufacturing Information System
我們也有開發了一些
泛用的這種排程系統
那這些都已經有一些客人拿來用了
就是讓他們的生產排程是比較有效率這樣子
對
我覺得好
今天學到非常多
我最後還是有個問題
其實非常好奇
好
就是聽起來你做的事情太多了吧
還好啦
懂太多了
對啊
你要怎麼樣去分配每個角色的時間
然後你還有自己的生活
這個時間到底是怎麼樣去分配的
你會怎麼樣決定
我覺得生活就會去做一個分界
但是它會互相leak
leak的意思是說
你有時候回家做點工作的事情
有工作做點家裡的事情
比如說在工作的時候
老婆叫我去找個彎去買個吃的
我還是會去買
對啊
這種事情不會說把它界線弄得那麼死
但是我覺得這個你能不能變的
就是你一天就這麼多時間
所以大概就是說
這個時間可以做多少事情
那其他的東西就是想辦法delegate
就是拿給別人做
或是從我做變成我在追蹤的項目
我覺得大概就是這樣子安排而已
那因為你的時間是固定的對不對
那我們人生是在跑馬拉松的
又不是在短跑的對不對
那短跑的時候是什麼研究所的時候
寫論文就一個禮拜不睡覺那種
後來就是去海邊追風三天
以前會做這種事情現在不會了
現在就是固定的case去做
那所以分配我覺得也算簡單
就是一個很大的to do list
然後一直排序這樣就可以
所以你是全部的東西一起排嗎
因為你可能有不管是
就是上課的身份
然後各個東西
你全部一起排
那會不會有個東西都沒有排到
有可能 這個也叫starvation對不對
我記得我們以前一個老師
他得了Turing award
他以前做這個IBM的處理器
就有那種排程
結果大學生的程式
那台電腦10年都沒排到
有可能這樣
那有些事情就會變成不重要了
如果他一直沒被排上去
那就是不重要
那我覺得還是我們叫做北極星
定位要清楚
我覺得做這些project
都有一些一定要做的事情
那有點像Paul Graham講的
就是你要創業就創業三四
你聽過嗎
創業三四
只能做三件事
Paul Graham有說過這句話
有有有
他是Paul Graham的粉絲
真的嗎
可能太老了
真的嗎
他不是有finger嗎
你可以finger他
不只finger是另外一個人
反正他有一個text based的blog
他說寫code
talk to users
寫code跟使用者對談
最後就是運動
真的嗎
對
OK
我覺得talk to users這個沒問題
畢竟這個是YC的理念
talk to users
Paul Graham講運動
寫code他沒有說talk to VC
他都不care
運動就是你的well being
他一天到晚穿涼鞋的
看起來不太像是有在運動
但人生是這樣
就是運動是必要的
尤其可能各位比較年輕的人
我已經步入中年了
所以能運動嗎
動啊動啊
心肺是有用的
你做有氧
對 不管就跑步 騎車什麼的
所以我覺得大概是這樣
就是6公里
然後什麼問題就解決
真的
有時候總有一些遇到煩躁的事情
我同意
真的啦
騎車
跑步也有
我都跑那個啊
士林那個離那個河堤不是很近
對啊
一個風貴嘴
什麼問題都解決
真的
差不多是這樣
真的什麼都不會想
你沒有辦法想因為很喘
對啊
我做重訓
我不知道有沒有這種有氧
有都有啊
對啊
我覺得維持身心的平衡
就是差不多就可以做比較
不會太誇張的決定
通常比較誇張的決定
比較rush decision
就是不會馬上去做
那我也很好奇
就是你怎麼決定什麼東西要delicate
這蠻簡單的
能delicate就delicate
有錢真好
不是有錢
不是 這不是這個意思
就是說你的責任在增加
你要讓你的工作有效率
你就是要想辦法delicate
那如果你的工作內容是穩定的
你就不需要想新的事情去delicate
這跟你們寫Codeway Refactor一樣
為什麼要refactor
就是要做新的功能
對
為什麼要想新的這種代理人制度
要把事情往其他地方推
那就是因為你要做新的事情
對 所以我覺得大部分都是這樣做
假設我們維持20%的capacity
是準備新的事情
對
那那個新的事情出來的時候
你可能八成的workload
八成的工作負擔
可能就會變成100%
可能會變120%
對
那你就要想辦法
把原來八成的workload再往下降
你才有辦法接新的事情
所以你是有新的東西的時候
你才會想說那我舊的要哪些要delicate
還是你一直都會想說
我什麼東西可以delicate
這跟我們什麼時候refactor code
是同一件問題
對不對
同的時候
好像先重新Code
那個程式要重新改寫
才來放新的功能
或是我先放功能
先放進來
結果Code壞掉要重改
我覺得這個問題沒有很好的答案
就是我覺得比較簡單的就是說
維持一個capacity是可以空下來
要不然完全沒辦法塞新的事情
你自己怎麼樣去定義這個
空下來的capacity
就看那個會議被塞多滿
差不多只能這樣子
所以是不是你可能一大堆會的時候
你就要求我一個禮拜
至少要有一個整天是沒有會的
就是說在你的工作表現的狀況不變之下
你要想辦法
最好是你的資源不要改變之下
想辦法降低你開會
或是增加你可以自己工作的時間
就用這個原則去處理就好
我總要有例如說我要閱讀一些東西
我要寫一些東西
人才會進步
那如果我沒辦法創造
我都是在做管理的話
人是不會進步
這樣就可以了
那所以用這個原則去做就好
就那個事情太多了
那就把它放一些出去
大家也才比較有成長的空間
了解了解
今天真的非常感謝陳副總來上節目
有一個最後這個非常的收穫良多
不敢不敢 謝謝
我馬上待會出去就跟他們說
這些工作全部都給你們做了
不要找我問了
但是我還是要講這個叫accountable
到最後你還是負責
所以你怎麼在負責狀況下
把這件事情這個delegation做好
其實是有一點學問
好 沒問題
希望未來還有機會邀副總上節目
來跟我們分享一下
可能在剛剛那個
AI加速器的表現
或者客戶如果有開始提到
我們可以來提一下
中間有沒有什麼有趣的事情這樣子
好
那有任何的問題或支持
都可以在Apple Podcast
或YouTube留言
有業務合作需求
請參考資訊欄下方的合作信箱
再次感謝副總
我們下週再見
拜拜
好 謝謝各位
拜拜
謝謝
